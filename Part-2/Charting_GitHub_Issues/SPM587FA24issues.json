{"issue_number": 677, "issue_title": "Support for Custom Axis Tick Spacing in d3.axis", "issue_body": "{\n\"Body\": \"### Issue Description\\nCurrently, the d3.axis component automatically generates tick marks based on the default scale and layout, which often results in uniform spacing between ticks. While this approach is effective in many cases, there are scenarios where more granular control over the spacing of individual ticks is required. For example, non-uniform data distributions or custom layout requirements may demand variable tick intervals along an axis.\\n\\n### Expected Behavior\\nA way to customize tick spacing or specify individual tick positions would enable greater flexibility. For instance, enabling users to set spacing based on custom conditions (such as data density) or explicitly define the location of each tick.\\n\\n### Possible Solutions\\n- Add an option in the d3.axis API to specify custom spacing between ticks.\\n- Introduce support for a callback function to dynamically control tick positioning.\\n\\n### Additional Context\\nThis feature could significantly improve data visualization accuracy for non-linear datasets or when customized tick marks are needed for a more readable chart layout. Such a solution would also prevent the need for workarounds and enhance the extensibility of d3.js for complex use cases.\\n\\nRelated Issues: None found\\n\\nVersion: d3.js version 7.4.4\\n\\nThank you for considering this feature request!\"\n}", "created_at": "2024-10-31", "closed_at": "2024-11-01", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "JFA24SCM23M"}
{"issue_number": 675, "issue_title": "Bug: React.useEffect Executes Twice in Strict Mode with Concurrent Rendering", "issue_body": "Description\nWhen running a React application in strict mode with React 18's concurrent rendering, React.useEffect hooks are unexpectedly executed twice. This behavior can lead to unexpected side effects and potentially impacts performance in production builds.\nSteps to Reproduce\n\nCreate a new React project with create-react-app.\nEnable strict mode by wrapping the root component in <React.StrictMode>.\nAdd a simple useEffect in a functional component that logs a message or updates state.\nNotice that the effect executes twice upon the initial render.\n\nExpected Behavior\nuseEffect should only execute once after the initial render when dependencies haven\u2019t changed.\nActual Behavior\nIn strict mode, the useEffect hook executes twice in concurrent rendering, even with no dependency changes.\nEnvironment\n\nReact version: 18.x\nBrowser: All modern browsers\nNode version: 16.x\n\nAdditional Context\nIt would be helpful to clarify if this behavior is expected under strict mode for concurrent rendering or if adjustments are needed to prevent duplicate executions.", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "closed", "Author": "SFA24SCM37MA"}
{"issue_number": 673, "issue_title": "Memory Leak Detected in D3.js Force Simulation", "issue_body": "There appears to be a memory leak in the force simulation when repeatedly updating the graph with new data. Over time, the browser's memory usage increases significantly, causing performance degradation, especially in long-running visualizations. This issue occurs when nodes and links are updated frequently. Steps to reproduce: 1) Set up a basic force simulation, 2) Continuously update nodes and links every few seconds, 3) Monitor memory usage in developer tools. Expected behavior: Memory should be freed after node/link updates to avoid excessive memory consumption.", "created_at": "2024-10-31", "closed_at": "2024-11-01", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "KFA24SCM30G"}
{"issue_number": 670, "issue_title": "D3.js v7.0 Axis Tick Overlap in Responsive Layouts", "issue_body": "In the latest version of D3.js (v7.0), the axis ticks overlap when resizing the window in responsive layouts. This issue appears specifically when the axis has a large number of ticks, and the container is resized to a smaller width. Expected behavior is for the ticks to automatically adjust or reduce to prevent overlap. Steps to reproduce: 1) Create a chart with multiple axis ticks, 2) Resize the container width to a smaller size, 3) Notice the overlap in ticks. Suggested resolution: Implement dynamic tick adjustment based on container size or introduce a tick limit option.", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "KFA24SCM30G"}
{"issue_number": 667, "issue_title": "Add Example for Using GPT with Custom Retrieval System", "issue_body": "Currently, the OpenAI Cookbook lacks a clear example of integrating GPT models with a custom retrieval system. Users often have unique data storage and indexing setups, and it would be helpful to see a standardized approach to feeding relevant information into the model. Proposed Solution\\nProvide an example notebook demonstrating how to:\n\nQuery a custom data store (e.g., Elasticsearch, Pinecone) based on user input.\nProcess and structure retrieved data for input to the GPT model.\nIncorporate relevant techniques like chunking and summarization to optimize response quality. Additional Context This example would help users looking to integrate GPT models with their own databases for domain-specific retrieval tasks. Any guidance on best practices for combining retrieval and completion workflows would be valuable.\n", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": ["Category:Bug", "Priority:Medium", "Status:Approved", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "closed", "Author": "SFA24SCM37MA"}
{"issue_number": 666, "issue_title": "\"Add Example for Fine-Tuning GPT-4 with Custom Dataset\"", "issue_body": "\"### Description\\n\\nIt would be helpful to have a comprehensive example in the OpenAI Cookbook showing the full process of fine-tuning a GPT-4 model using a custom dataset. This could include:\\n\\n- Formatting the dataset appropriately\\n- Setting up fine-tuning with OpenAI\u2019s API\\n- Best practices for managing tokens and costs\\n- Evaluation and troubleshooting tips\\n\\n### Rationale\\n\\nCurrently, the OpenAI Cookbook contains limited information on fine-tuning the latest models (especially GPT-4) with custom data. Given the interest and utility of fine-tuning for specific tasks, this would be an invaluable addition for developers and data scientists.\\n\\n### Suggested Solution\\n\\nAdd a new notebook or example script in the repo that demonstrates the end-to-end process for fine-tuning GPT-4. Make sure to include code comments, references to any required libraries, and links to documentation.\\n\\n### Additional Context\\n\\nFine-tuning examples for earlier models (like GPT-3) exist but may not fully translate to GPT-4. Updating this for GPT-4 will help ensure compatibility and relevance.\\n\\nThank you for considering this enhancement!\"", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Field", "OriginationPhase:Testing", "Priority:High", "Priority:Low", "Priority:Medium", "Status:InProgress", "Status:pendingReview"], "State": "closed", "Author": "VFA24SCM43H"}
{"issue_number": 664, "issue_title": "Add Example for Using GPT with Custom Retrieval System", "issue_body": "Currently, the OpenAI Cookbook lacks a clear example of integrating GPT models with a custom retrieval system. Users often have unique data storage and indexing setups, and it would be helpful to see a standardized approach to feeding relevant information into the model. Proposed Solution\\nProvide an example notebook demonstrating how to:\\n1. Query a custom data store (e.g., Elasticsearch, Pinecone) based on user input.\\n2. Process and structure retrieved data for input to the GPT model.\\n3. Incorporate relevant techniques like chunking and summarization to optimize response quality. Additional Context\\nThis example would help users looking to integrate GPT models with their own databases for domain-specific retrieval tasks. Any guidance on best practices for combining retrieval and completion workflows would be valuable.", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": [], "State": "closed", "Author": "SFA24SCM37MA"}
{"issue_number": 662, "issue_title": "Feature Request: Support for Improved Type Safety in Reactive Forms", "issue_body": "Angular's Reactive Forms are highly flexible, but currently lack full type safety when dealing with form controls and values, which can lead to runtime errors and increase the need for type casting. Adding native support for strict typing in Reactive Forms would enhance developer experience by reducing potential errors and improving code readability.\\n\\n### Proposed Solution\\nIntroduce generics for FormGroup, FormControl, and FormArray classes to enforce type safety in form control values. For example:\\ntypescript\\nconst myForm = new FormGroup<{ name: FormControl<string>; age: FormControl<number> }>();\\n\\nThis approach would allow TypeScript to automatically infer and enforce the types of controls and their values.\\n\\n### Benefits\\n- Reduces the need for manual type casting in form value handling\\n- Increases developer confidence by catching type mismatches at compile time\\n- Enhances code readability and maintainability in large forms\\n\\n### Alternatives\\nWhile external libraries offer type-safe wrappers around Angular\u2019s forms, native support would align better with Angular\u2019s architecture and reduce the need for third-party dependencies.\\n\\n### Additional Context\\nImproved type safety in Reactive Forms aligns with Angular's push towards stricter typing (e.g., the strict flag in Angular CLI) and would benefit developers adopting TypeScript\u2019s strict mode for better code quality.", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM60C"}
{"issue_number": 660, "issue_title": "\"Bug: Angular Router Navigation Error on Nested Routes\"", "issue_body": "\"### Description\\nWhen navigating between nested routes, the Angular Router occasionally fails to load the target component, causing a blank page to display. This behavior is inconsistent and seems to happen more frequently in larger applications.\\n\\n### Expected Behavior\\nNavigating between nested routes should consistently load the target component without errors.\\n\\n### Actual Behavior\\nOccasionally, navigation results in a blank page or an empty outlet component.\\n\\n### Steps to Reproduce\\n1. Set up an Angular application with nested routes.\\n2. Attempt to navigate quickly between nested routes in different modules.\\n3. Observe that the target component sometimes fails to load.\\n\\n### Environment\\n- Angular version: 12.x\\n- Browser: Chrome 93\\n- OS: Windows 10\\n\\n### Additional Context\\nThis issue may be related to asynchronous loading of child modules or lazy loading in larger applications.\"", "created_at": "2024-10-31", "closed_at": "2024-10-31", "labels": ["Category:Inquiry", "DetectionPhase:Field", "DetectionPhase:Testing", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Field", "Priority:High", "Priority:Low", "Priority:Medium", "Status:InProgress", "Status:pendingReview"], "State": "closed", "Author": "aenaganti1999"}
{"issue_number": 656, "issue_title": "Enhancement: Add support for lazy loading of modules in Angular CLI", "issue_body": "Currently, the Angular CLI does not provide built-in support for lazy loading of feature modules in a seamless manner. This enhancement request aims to introduce a straightforward way to configure lazy loading directly through the CLI, allowing developers to specify which modules should be lazy-loaded when creating new applications. This feature would improve application performance and reduce initial load times, especially for larger applications. A proposed implementation could include:\\n\\n1. A new command option when generating a module, e.g., ng generate module <module-name> --lazy.\\n2. Updates to the Angular router to automatically configure lazy loading for the specified module.\\n3. Documentation updates to reflect this new feature and provide usage examples.\\n\\nImplementing this feature would greatly benefit the Angular community by simplifying the process of optimizing applications for performance.", "created_at": "2024-10-30", "closed_at": "2024-10-30", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "TFA24SCM43B"}
{"issue_number": 653, "issue_title": "Implement Quality Assurance Strategies for GPT-based Models", "issue_body": "Description: The goal of this issue is to document and implement best practices for quality assurance in AI, with a focus on GPT-based models. This would include discussing risk management strategies, data quality protocols, ethical considerations, and testing methodologies tailored for AI applications. Additionally, this enhancement would integrate frameworks that are compatible with the React environment to ensure high-quality output from AI models.\nProposed Enhancements:\nEstablish QA Frameworks: Implement standard QA frameworks adapted for AI applications.\nRisk Management and Testing Protocols: Define risk management strategies and develop testing protocols specific to GPT model behaviors and performance metrics.\nEthics and Data Quality Controls: Develop guidelines for ensuring data quality and ethical AI use.\nContinuous Monitoring: Outline processes for maintaining and monitoring AI quality over time.", "created_at": "2024-10-30", "closed_at": "2024-10-30", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "DetectionPhase:Field", "Priority:Low", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM08M"}
{"issue_number": 651, "issue_title": "Enhancement: Support for Reactive Forms in Angular CLI", "issue_body": "Currently, Angular CLI does not provide out-of-the-box support for generating reactive forms. This enhancement aims to include a command that allows developers to easily scaffold reactive forms along with their corresponding components, services, and modules. Proposed solution includes introducing a new command: 'ng generate reactive-form ' which should create a new component for the form, a service to handle form data, and a module to encapsulate the form functionality. This feature will streamline the development process for projects that heavily utilize reactive forms, making it easier for developers to get started with forms in Angular. Refer to the Reactive Forms documentation for more details on how reactive forms work in Angular.", "created_at": "2024-10-30", "closed_at": "2024-10-31", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM60C"}
{"issue_number": 650, "issue_title": "Unexpected Behavior with Axis Ticks when Using Time Scale", "issue_body": "When using D3's time scale with an axis, the generated ticks do not adjust correctly for time zones, causing inconsistent tick labels, especially around daylight saving transitions. This issue affects the display of date/time ticks, making the axis appear misaligned or labeled incorrectly. Steps to Reproduce: 1. Create a time scale using d3.scaleTime(). 2. Set the domain to a time range that includes a daylight saving transition (e.g., March in the US). 3. Add an axis using d3.axisBottom() and apply it to the scale. 4. Observe the generated tick labels around the transition period. Example Code: const timeScale = d3.scaleTime() .domain([new Date(2024, 2, 1), new Date(2024, 4, 1)]) .range([0, 500]); const xAxis = d3.axisBottom(timeScale) .ticks(d3.timeWeek.every(1)) .tickFormat(d3.timeFormat('%b %d')); d3.select('svg').append('g') .attr('transform', 'translate(0, 50)') .call(xAxis); Expected Behavior: Ticks should adapt to time zone changes and display labels consistently, even around daylight saving transitions. Actual Behavior: Tick labels are misaligned, with some dates missing or duplicating near daylight saving changes. Environment: D3.js version: 7.8.1, Browser: Chrome 118.0.5993, Operating System: Windows 11. Possible Solution: Consider updating the tick generation logic to account for time zone shifts when calculating ticks for time scales. Additional Context: This issue becomes more noticeable when visualizing data over long time periods or across different time zones. Adjusting the tick interval using custom logic helps, but it requires manual intervention.", "created_at": "2024-10-30", "closed_at": "2024-10-30", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "TFA24SCM73K"}
{"issue_number": 647, "issue_title": "Line Chart Fails to Render on Window Resize", "issue_body": "Description\nWhen resizing the browser window, the D3.js line chart occasionally fails to render correctly, causing the chart lines to disappear or the axis to shift improperly.\nSteps to Reproduce\n\nCreate a basic line chart using D3.js.\nResize the browser window multiple times both vertically and horizontally.\nObserve that the chart lines sometimes disappear or display incorrectly.\n\nExpected Behavior\nThe line chart should render correctly on any window resize, maintaining its proportions and all elements.\nActual Behavior\nThe chart lines intermittently disappear or misalign when the window is resized.\nPossible Cause\nIt may be due to incorrect handling of the SVG elements' viewbox or dimensions in response to resize events.\nEnvironment\n\nD3.js version: 7.x.x\nBrowser: Chrome 114, Firefox 102\nOS: Windows 10\n\nSuggested Solution\nImplement a debounce function on the resize event listener to ensure the chart redraws smoothly after resizing. Alternatively, validate that SVG dimensions update accurately with each resize.\nAdditional Information\nThis issue impacts multiple users and affects line chart display consistency. If needed, I can provide a minimal reproducible example.", "created_at": "2024-10-30", "closed_at": "2024-10-31", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "WFA24SCM32L"}
{"issue_number": 643, "issue_title": "Implement User Authentication", "issue_body": "This issue involves setting up user authentication for the Angular application. The authentication system will allow users to sign up, log in, and log out, ensuring secure access to the application. The implementation should include proper validation and error handling.", "created_at": "2024-10-30", "closed_at": "2024-10-30", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM81C"}
{"issue_number": 642, "issue_title": "Phase 2: Angular Project Setup and Initial Configuration", "issue_body": "Objective:\nBegin the Angular project setup, ensuring that all dependencies, configurations, and initial structures are properly established.\nTasks for Phase 2:\n\n\nInitialize Angular Project\n\nCreate a new Angular project within the repository.\nSet up the main app module and initial components.\n\n\n\nEstablish Folder Structure\n\nOrganize folders for components, services, models, and assets.\nFollow standard naming conventions for project scalability.\n\n\n\nInstall Dependencies\n\nAdd necessary Angular dependencies such as Angular CLI, Angular Material, and any other libraries required.\nVerify that dependencies are listed in package.json for easy access.\n\n\n\nConfigure Routing\n\nSet up routing between main components like Home, About, and Contact.\n\n\n\nDocumentation\n\nUpdate README.md with project setup instructions, local development commands, and any other setup details.\n\n\n\nAcceptance Criteria:\n\nAngular project initialization is complete.\nDependencies are installed and available in package.json.\nBasic routing is operational.\nREADME.md includes setup instructions for new developers.\n", "created_at": "2024-10-30", "closed_at": "2024-10-30", "labels": ["DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "VFA24SCM76E"}
{"issue_number": 641, "issue_title": "\"Add Example for Fine-Tuning GPT-4 with Custom Dataset\",", "issue_body": "\"### Description\\n\\nIt would be helpful to have a comprehensive example in the OpenAI Cookbook showing the full process of fine-tuning a GPT-4 model using a custom dataset. This could include:\\n\\n- Formatting the dataset appropriately\\n- Setting up fine-tuning with OpenAI\u2019s API\\n- Best practices for managing tokens and costs\\n- Evaluation and troubleshooting tips\\n\\n### Rationale\\n\\nCurrently, the OpenAI Cookbook contains limited information on fine-tuning the latest models (especially GPT-4) with custom data. Given the interest and utility of fine-tuning for specific tasks, this would be an invaluable addition for developers and data scientists.\\n\\n### Suggested Solution\\n\\nAdd a new notebook or example script in the repo that demonstrates the end-to-end process for fine-tuning GPT-4. Make sure to include code comments, references to any required libraries, and links to documentation.\\n\\n### Additional Context\\n\\nFine-tuning examples for earlier models (like GPT-3) exist but may not fully translate to GPT-4. Updating this for GPT-4 will help ensure compatibility and relevance.\\n\\nThank you for considering this enhancement!\"", "created_at": "2024-10-30", "closed_at": "2024-10-31", "labels": ["Category:Bug", "OriginationPhase:Design", "Priority:Critical", "Priority:Medium", "Status:Approved", "Status:InProgress", "Status:pendingReview", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "VFA24SCM43H"}
{"issue_number": 640, "issue_title": "\"Bug: Angular Router Navigation Error on Nested Routes\"", "issue_body": "\"### Description\\nWhen navigating between nested routes, the Angular Router occasionally fails to load the target component, causing a blank page to display. This behavior is inconsistent and seems to happen more frequently in larger applications.\\n\\n### Expected Behavior\\nNavigating between nested routes should consistently load the target component without errors.\\n\\n### Actual Behavior\\nOccasionally, navigation results in a blank page or an empty outlet component.\\n\\n### Steps to Reproduce\\n1. Set up an Angular application with nested routes.\\n2. Attempt to navigate quickly between nested routes in different modules.\\n3. Observe that the target component sometimes fails to load.\\n\\n### Environment\\n- Angular version: 12.x\\n- Browser: Chrome 93\\n- OS: Windows 10\\n\\n### Additional Context\\nThis issue may be related to asynchronous loading of child modules or lazy loading in larger applications.\"", "created_at": "2024-10-30", "closed_at": "2024-10-30", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Critical", "Priority:Medium", "Status:Approved", "Status:InProgress", "Status:pendingReview", "OriginationPhase: Requirements", "OriginationPhase.Design"], "State": "closed", "Author": "aenaganti1999"}
{"issue_number": 639, "issue_title": "Add Documentation for Customizing Angular CLI Build Configurations", "issue_body": "The Angular documentation currently provides limited guidance on customizing build configurations for specific environments or needs. Adding a dedicated section for advanced customization of Angular CLI builds would help developers who need to tailor builds for various production and testing scenarios.\nExpected Content:\nDetailed Steps: How to modify angular.json for custom build configurations, including examples for different environments (e.g., staging, production).\nUse Cases: Examples such as adding custom webpack configurations, asset handling, and performance optimization techniques.\nTroubleshooting Tips: Common issues and solutions related to custom build configurations.\nAdditional Context: Adding these details will improve developer productivity and help avoid common build configuration issues, especially for those deploying complex applications.\nReferences Link to current [Angular CLI documentation]: (https://angular.io/cli) and related Angular build configuration docs", "created_at": "2024-10-29", "closed_at": "2024-10-30", "labels": ["Category:Inquiry", "DetectionPhase:Field", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM52B"}
{"issue_number": 638, "issue_title": "Add Examples for Fine-Tuning with Advanced Hyperparameters", "issue_body": "Description: The current OpenAI Cookbook provides basic examples for fine-tuning models, but lacks detailed examples using advanced hyperparameters like learning rate scheduling, weight decay, and batch size adjustments. Including these would be beneficial for users aiming for fine-tuned performance optimization.\nExpected Content:\nExamples of Fine-Tuning: Cover hyperparameter options like custom learning rates, scheduling strategies, and gradient clipping.\nBest Practices: Tips on effective hyperparameter tuning and sample setups for different model types.\nPerformance Comparisons: Include results demonstrating the impact of each hyperparameter adjustment.\nAdditional Context: Adding these examples would provide valuable guidance for users looking to optimize model performance beyond default settings, especially for specific use cases such as NLP and image processing tasks.\nReferences: Provide links to relevant OpenAI documentation and any research papers or blog posts on advanced hyperparameter tuning.", "created_at": "2024-10-29", "closed_at": "2024-10-29", "labels": [], "State": "closed", "Author": "SFA24SCM52B"}
{"issue_number": 632, "issue_title": "Improve Documentation for API Rate Limiting in OpenAI Cookbook", "issue_body": "The current documentation on API rate limiting is sparse and could benefit from further clarification. Specifically, information on how to handle rate limiting with code examples, guidance on error handling, and best practices for retry mechanisms would be valuable for users.\nExpected Content : Describe API rate limiting in OpenAI's systems and common scenarios where it applies.\nCode Examples : Include Python code snippets that demonstrate handling rate limits effectively.\nError Handling Guidance: Best practices for managing rate limit errors, including exponential backoff and retries.\nAdditional Context : Enhancing this section of the documentation would improve user experience, especially for those integrating the API in production environments where rate limits are critical. Providing this information would also help prevent accidental excessive requests that might cause disruptions in service.\nReferences Link to current [API documentation] : (https://platform.openai.com/docs) and rate limit error codes.", "created_at": "2024-10-29", "closed_at": "2024-10-29", "labels": ["Category:Enhancement", "Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Field", "OriginationPhase:Testing", "Priority:Low", "Priority:Major", "Status:Completed", "Status:Rejected"], "State": "closed", "Author": "SFA24SCM52B"}
{"issue_number": 627, "issue_title": "Enhancement Request: Add Interactive Tutorials for Fine-Tuning Models", "issue_body": "Overview: I would like to propose the addition of interactive tutorials that guide users through the process of fine-tuning OpenAI models. These tutorials would ideally include step-by-step instructions, example code snippets, and live coding environments such as Jupyter Notebooks or Colab.Motivation: While the current documentation provides valuable insights, many users, especially beginners, may benefit from hands-on experience. Interactive tutorials can enhance understanding and engagement, making it easier for users to implement fine-tuning techniques effectively.Suggested Content: Introduction to Fine-Tuning: A brief overview of what fine-tuning is and its applications.Setting Up the Environment: Instructions on how to set up Python, relevant libraries, and tools.Step-by-Step Tutorial: A guided process for fine-tuning a model, complete with code examples. Common Pitfalls: Tips on avoiding common mistakes during fine-tuning. FAQs and Troubleshooting: Addressing common questions and issues users might face. Additional Notes: I believe that incorporating interactive elements will significantly enhance the learning experience and make the OpenAI Cookbook a more valuable resource for users.", "created_at": "2024-10-29", "closed_at": "2024-10-29", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM81C"}
{"issue_number": 625, "issue_title": "Enhance OpenAI-Cookbook with Prompt Engineering Best Practices and Tips", "issue_body": "Prompt engineering is crucial for optimizing OpenAI model outputs, but the OpenAI-Cookbook currently provides limited guidance on advanced prompt engineering techniques. This feature request suggests adding a dedicated section on prompt engineering best practices, including tips for crafting effective prompts, examples for adjusting tone and style, and strategies for managing complex instructions. The section could also include a prompt refinement workflow to help users iteratively improve prompts based on model responses. This addition would help developers maximize the accuracy and relevance of results when working with OpenAI models, particularly for custom and nuanced use cases.", "created_at": "2024-10-27", "closed_at": "2024-10-29", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM96V"}
{"issue_number": 621, "issue_title": "Feature Request: Support for Suspense in Server-Side Rendering", "issue_body": "Description\\nReact Suspense is a powerful feature for handling asynchronous loading states in components. However, it currently lacks support in server-side rendering (SSR), which limits its usage in server-rendered React applications. Adding SSR support for Suspense would enable better handling of asynchronous data fetching, improving user experience by sending fully resolved components to the client.\\n\\n### Proposed Solution\\nImplement support for React Suspense in SSR, allowing data-fetching components to wait for resolution before rendering on the server side. This might involve adjustments to how Suspense boundaries are handled during the SSR process.\\n\\n### Benefits\\n- Enhanced user experience with fully rendered components sent to the client.\\n- Reduced reliance on client-side loading states, improving initial load performance.\\n\\n### Alternatives\\nCurrently, developers rely on workarounds or additional libraries, but native SSR support would streamline the process and make Suspense more universally applicable.\\n\\n### Additional Context\\nThis feature would align with React's goal of simplifying async handling in components and improving SSR capabilities.\"\n}", "created_at": "2024-10-27", "closed_at": "2024-10-27", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "PFA24SCM24M"}
{"issue_number": 619, "issue_title": "Bug: Angular CLI Fails to Generate New Project with Latest Update", "issue_body": "After updating to Angular CLI version X.X.X, running the 'ng new' command fails with an error related to dependency conflicts. The error message indicates issues with mismatched versions of certain packages. Steps to reproduce: 1. Update Angular CLI to the latest version. 2. Run 'ng new my-app'. Expected behavior: A new Angular project should be created successfully. Actual behavior: The command fails, displaying dependency errors. Environment: Node.js version Y.Y.Y, npm version Z.Z.Z. Please advise on a potential fix or workaround.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "VFA24SCM17B"}
{"issue_number": 617, "issue_title": "Feature Request: Add Support for CSS Modules in React Scripts", "issue_body": "Description\\nIt would be beneficial to add native support for CSS Modules in React applications created with create-react-app without requiring additional configuration. CSS Modules improve modularity and prevent CSS conflicts by scoping styles locally to the component.\\n\\n### Proposed Solution\\nModify the default webpack configuration in react-scripts to support .module.css files, so that any file imported with the .module.css extension will be treated as a CSS Module.\\n\\n### Expected Usage\\nUsers should be able to create CSS files with a .module.css extension and import them directly into React components:\\n\\njavascript\\nimport styles from './MyComponent.module.css';\\n\\nfunction MyComponent() {\\n  return <div className={styles.container}>Hello, World!</div>;\\n}\\n\\n\\n### Benefits\\nAdding CSS Module support will:\\n- Improve component-level styling and encapsulation.\\n- Reduce the risk of class name conflicts.\\n- Make it easier for developers to maintain CSS in large applications.\\n\\n### Alternatives\\nCurrently, developers can enable CSS Modules manually by ejecting the CRA configuration or using third-party configurations, but both approaches introduce complexity.\\n\\nThank you for considering this feature", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "NFA24SCM31T"}
{"issue_number": 613, "issue_title": "State Not Updating in Custom Hook", "issue_body": "Issue: The state managed by a custom hook useCustomState does not update as expected when used in functional components. This results in UI not re-rendering upon state changes. Steps to reproduce: 1. Clone the repo and install dependencies. 2. Navigate to the component using useCustomState. 3. Trigger an event meant to update the state. Expected behavior: The state updates should trigger a re-render of the component, reflecting the new state in the UI. Environment: React v17.0.2, Node.js v14.17.1, running on macOS Big Sur. Example code snippet included where the issue occurs.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "HFA24SCM81P"}
{"issue_number": 612, "issue_title": "Bug: useEffect Cleanup Not Triggering on Fast Component Unmounts in React 18", "issue_body": "Description\\nIn React 18, the cleanup function inside useEffect is not consistently called when components are unmounted rapidly. This behavior was not observed in previous React versions. It seems to occur especially when components are unmounted within short intervals (e.g., under 50ms).\nSteps to Reproduce\\n1. Create a React component with a useEffect hook that returns a cleanup function.\\n2. Mount and unmount this component rapidly (e.g., in a sequence or with a short timeout).\\n3. Log messages from the cleanup function to verify if it runs.\\n4. Observe that the cleanup function sometimes fails to execute.\nExpected Behavior\\nThe cleanup function inside useEffect should be called every time the component unmounts, regardless of how fast the unmounting occurs.\nActual Behavior\\nThe cleanup function is not always called when the component is unmounted quickly, resulting in resource leaks (e.g., dangling timers or subscriptions).\nEnvironment\\n- React Version: 18.3.0\\n- Node.js Version: 18.x\\n- Browser: Chrome 129, Firefox 120\\n- OS: Windows 10, macOS Ventura\nReproducible Example\\nA minimal reproducible example can be found here: CodeSandbox.\nAdditional Context\\nThis behavior might be related to changes introduced in React 18's concurrent mode, as it did not occur in React 17. Disabling concurrent mode (<StrictMode> wrapper) appears to mitigate the issue, though this is not an ideal workaround.\nPotential Workaround\\nUsing useRef to track component mounting state helps prevent resource leaks, but this is a workaround rather than a solution to the underlying issue.\"", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "DFA24SCM54P"}
{"issue_number": 603, "issue_title": "Bug: useEffect not triggering on state change with async function", "issue_body": "When using useEffect with an asynchronous function, the effect hook does not reliably trigger when state changes. This can cause issues where components dependent on data fetching or state updates do not rerender as expected.\\n\\n### Steps to Reproduce:\\n1. Create a functional component that uses useEffect with an async function inside it.\\n2. Pass a piece of state as the dependency array for useEffect.\\n3. Change the state through some user interaction or event.\\n\\n### Expected Behavior:\\nuseEffect should trigger whenever the state in its dependency array changes, even if the effect function is asynchronous.\\n\\n### Actual Behavior:\\nuseEffect does not always trigger as expected when using async functions, leading to stale state and improper component behavior.\\n\\n### Environment:\\n- React Version: 17.x.x and 18.x.x\\n- Browser: All major browsers (Chrome, Firefox, Safari)\\n\\n### Possible Fix:\\nEnsure that useEffect correctly handles asynchronous functions in the dependency array and does not block updates or cause issues with rerendering.\\n\\n### Additional Context:\\nThis issue is especially noticeable in components that rely on external data fetching or debounced inputs.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "KFA24SCM23N"}
{"issue_number": 598, "issue_title": "Bug: RouterLinkActive not updating correctly with multiple routes", "issue_body": "When using RouterLinkActive with multiple routes, the active class is not correctly applied when navigating between routes that share a common path. This behavior affects the proper highlighting of active links in the navigation bar.\\n\\n### Steps to Reproduce:\\n1. Create a navigation bar with multiple routerLink directives pointing to different routes, e.g., /home, /about, /about/team.\\n2. Use RouterLinkActive to apply an active class to the links.\\n3. Navigate between /about and /about/team.\\n\\n### Expected Behavior:\\nThe correct link should have the active class applied based on the current route.\\n\\n### Actual Behavior:\\nThe active class does not get applied or is inconsistently applied when switching between similar routes like /about and /about/team.\\n\\n### Environment:\\n- Angular Version: 12.x.x\\n- Browser: Chrome 96\\n\\n### Possible Fix:\\nEnsure that RouterLinkActive correctly evaluates nested routes and applies the active class based on the exact match behavior or provide an option for better handling of partial routes.\\n\\n### Additional Context:\\nThis issue is more noticeable when dealing with nested routes or shared paths in large applications. Using { exact: true } does not always resolve the issue.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "MFA24SCM67B"}
{"issue_number": 592, "issue_title": "[Enhancement] Improve d3.js Visualization Performance", "issue_body": "The current d3.js visualization implementation is experiencing performance bottlenecks when rendering large datasets. Users have reported slow rendering times, especially when interacting with dynamic data updates. This issue needs to be addressed to ensure smoother performance and better user experience.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "MFA24SCM39K"}
{"issue_number": 587, "issue_title": "Enhancement: Add Support for Dynamic Form Validation", "issue_body": "Currently, Angular's Reactive Forms provide static validation mechanisms, which can be limiting in certain scenarios. This enhancement proposal aims to introduce a more dynamic validation approach, allowing developers to add or remove validators at runtime based on user input or other criteria. \\n\\n### Proposed Features:\\n1. Dynamic Validator Management: Ability to add and remove validators on form controls dynamically.\\n2. Event-Driven Validation: Integrate validation changes based on specific events (e.g., user actions, API responses).\\n3. Performance Considerations: Ensure that dynamic validations do not adversely affect performance.\\n\\n### Use Cases:\\n- Forms that change based on user selections (e.g., conditional fields).\\n- Applications requiring real-time validation feedback based on multiple factors.\\n\\n### Potential Impact:\\nThis enhancement will increase the flexibility and usability of Angular forms, making them more powerful for complex applications. \\n\\nI look forward to community feedback and collaboration on this proposal!", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "BFA24SCM67F"}
{"issue_number": 586, "issue_title": "Bug: Inconsistent State Updates with useState in Nested Components", "issue_body": "Description\\nState updates using useState in nested components are not consistent. When updating state in a deeply nested component, the parent component sometimes fails to re-render, leading to stale state values.\\n\\n### Steps to Reproduce\\n1. Create a parent component with nested child components.\\n2. Use useState in a deeply nested component to manage local state.\\n3. Trigger a state update in the nested component.\\n4. Observe that the parent component does not always reflect the updated state.\\n\\n### Expected Behavior\\nThe parent component should re-render and reflect the updated state from the nested child components.\\n\\n### Actual Behavior\\nThe parent component occasionally fails to re-render, causing it to display stale state values.\\n\\n### Environment\\n- React version: 18.2.0\\n- Browser: Chrome (latest)\\n- Operating System: macOS Monterey\\n\\n### Possible Solution\\nThe issue might be related to state batching or context propagation within deeply nested component trees. Consider reviewing the behavior of state updates in nested contexts.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:InProgress"], "State": "closed", "Author": "DFA24SCM04P"}
{"issue_number": 585, "issue_title": "Bug: State Not Updating Properly on Component Re-render", "issue_body": "Issue Description\\nWhen re-rendering a component in React, the component's state does not update as expected in some cases. Specifically, when calling setState with new values after a component re-renders, the previous state value persists. This behavior leads to incorrect UI updates and inconsistencies within the app.\\n\\n### Steps to Reproduce\\n1. Render a component with a state variable (e.g., count).\\n2. Update the state in a useEffect hook or based on a condition.\\n3. Trigger a re-render by changing a prop or state in a parent component.\\n4. Observe that the new state value is not retained as expected.\\n\\n### Expected Behavior\\nThe component's state should reflect the updated value upon re-render.\\n\\n### Actual Behavior\\nThe state reverts to the previous value, causing inconsistent UI updates.\\n\\n### Environment\\n- React version: 18.0.0\\n- Browser: Chrome 93\\n- Operating System: macOS Big Sur\\n\\n### Additional Context\\nThis issue may relate to the way React handles batching or updates in concurrent mode. It is reproducible across different browsers and setups.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "VFA24SCM78M"}
{"issue_number": 584, "issue_title": "Bug: Component State Not Updating Properly on Re-render", "issue_body": "{\n\"Title\": \"Bug: Component State Not Updating Properly on Re-render\",\n\"body\": \"### Description\\nThe component state does not update correctly when re-rendered, leading to unexpected behavior. This issue seems to occur when using useState in combination with async operations.\\n\\n### Steps to Reproduce\\n1. Create a component with a state variable using useState.\\n2. Update the state in an async function.\\n3. Trigger a re-render and observe that the state does not update as expected.\\n\\n### Expected Behavior\\nThe state should update correctly after each re-render.\\n\\n### Actual Behavior\\nThe state remains stale and does not reflect the latest changes after re-render.\\n\\n### Environment\\n- React version: 18.x.x\\n- Browser: Chrome, Firefox\\n- OS: Windows 10, macOS 12\\n\\n### Possible Solution\\nReview the use of useState with async operations, ensuring that state updates are not lost or ignored during re-renders.\\n\\n### Additional Context\\nThis behavior was noticed after updating from React 17 to React 18. It may be related to changes in React\u2019s concurrent rendering behavior.\"\n}", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "NFA24SCM57M"}
{"issue_number": 583, "issue_title": "Bug: useEffect Hook Runs Twice on Initial Render in React 18", "issue_body": "Description\\nIn React 18, the useEffect hook runs twice during the initial render even when using an empty dependency array. This behavior is unexpected and can lead to side effects being triggered more than once.\\n\\n### Steps to Reproduce\\n1. Create a new React 18 project using create-react-app.\\n2. Add a component with a useEffect hook and an empty dependency array.\\n3. Log a message inside the useEffect to observe how many times it runs.\\n\\n### Expected Behavior\\nThe useEffect hook should run only once on the initial render when using an empty dependency array.\\n\\n### Actual Behavior\\nThe useEffect hook runs twice during the initial render, causing unwanted side effects.\\n\\n### Environment\\n- React Version: 18.2.0\\n- Browser: Chrome/Firefox\\n- OS: macOS/Linux/Windows\\n\\n### Additional Context\\nThis issue seems related to React's new automatic batching feature in React 18. However, the documentation does not clearly state that useEffect should behave differently compared to earlier versions.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "YFA24SCM99P"}
{"issue_number": 579, "issue_title": "Issue Title: Update Angular Dependency to Version X.X", "issue_body": "Description:\nSummary:\nWe need to update our Angular dependencies to the latest version (X.X) to benefit from new features, performance improvements, and security patches.\nSteps to Reproduce:\n\nCheck the current Angular version in package.json.\nReview the Angular changelog for the latest updates and breaking changes.\n\nExpected Behavior:\nThe application should function correctly after the update without any deprecated features or breaking changes.\nActual Behavior:\nCurrently, the application uses Angular version Y.Y, which may lead to compatibility issues with new libraries and tools.\nAdditional Context:\n\nPlease ensure all relevant packages (e.g., Angular CLI, Angular Material) are also updated.\nRun unit and integration tests to verify everything works as expected post-update.\n\nLabels:\n\nenhancement\ndependencies\nAngular\n\nAssignees:\n\n[Your Name/Team]\n\nFeel free to add any additional notes or requirements!", "created_at": "2024-10-26", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "open", "Author": "SFA24SCM82D"}
{"issue_number": 578, "issue_title": "Bug: ComponentNotRendering Properly After State Update", "issue_body": "DescriptionThe ComponentNotRendering is not re-rendering correctly after a state update. Even though the state is updated as expected, the component does not reflect the changes until a hard refresh.\\n\\n### Steps to Reproduce. Render the ComponentNotRendering in the application. Trigger a state update by using a button click or other action. Observe that the state is updated but the UI does not reflect the changes.\\n4. Perform a hard refresh and notice that the component now reflects the updated state.### Expected BehaviorThe ComponentNotRendering should re-render automatically when the state updates.### Actual BehaviorThe component remains static and only updates after a full page refresh.\\n\\n### Environment\\n- React version: 18.2.0\\n- Browser: Chrome (Version 114)\\n- Operating System: macOS 13.2### Additional InformationThis issue seems to be related to the use of useEffect and the component's setState function. The bug appears after a recent update to React 18.\"", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "SFA24SCM69P"}
{"issue_number": 570, "issue_title": "Bug: Data Binding Not Updating in Angular 14", "issue_body": "Description\\nData binding in Angular 14 appears not to update in real-time when using certain observables in reactive forms. Upon changing the input, the bound value is not reflected in the component's view.\\n\\n### Expected Behavior\\nBound data should update immediately when the observable triggers a change.\\n\\n### Current Behavior\\nCurrently, the bound value is only updated after manual view refresh (e.g., ChangeDetectorRef.detectChanges()), rather than automatically upon observable changes.\\n\\n### Steps to Reproduce\\n1. Create a reactive form with observable-driven data binding.\\n2. Change observable value.\\n3. Observe that the UI doesn\u2019t reflect this change without manual intervention.\\n\\n### Environment\\n- Angular Version: 14.0.0\\n- Browser: Chrome 95.0.4638.69\\n- Operating System: Windows 10\\n\\n### Additional Context\\nThis issue may relate to recent changes in Angular's handling of Change Detection for Observables, or it could be a regression from a previous version.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "DFA24SCM11D"}
{"issue_number": 568, "issue_title": "Feature Request: Support for Native CSS Variables in JSX Styles", "issue_body": "Problem Description\\nCurrently, when using inline styles in JSX, native CSS variables are not supported. Attempting to use a CSS variable directly within an inline style object results in a NaN or invalid style error, especially when setting properties dynamically. This limitation forces developers to use workarounds, such as defining CSS variables within external stylesheets or using inline style tags in HTML, which reduces the flexibility of inline JSX styling.\\n\\n### Proposed Solution\\nEnable support for native CSS variables in JSX inline styles, allowing developers to use variables directly in component styles like so:\\n\\njavascript\\n<div style={{ color: 'var(--primary-color)' }}></div>\\n\\n\\n### Benefits\\nThis feature would simplify styling workflows, especially when using CSS variables for theming or dynamically updating styles. It would also make React more compatible with modern CSS capabilities, creating a smoother developer experience.\\n\\n### Alternatives Considered\\nThe current alternative is to apply variables in a stylesheet or through style tags outside the component, which is less convenient and reduces the effectiveness of inline styles in React components.\\n\\n### Additional Context\\nSupport for CSS variables is broadly available in modern browsers. This feature would be particularly beneficial for projects that rely on CSS variables for responsive design, dark/light mode switching, or other theming capabilities.\\n\\n### Environment\\nReact version: 18.0.0\\n\\nThank you for considering this feature request!", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "TFA24SCM64P"}
{"issue_number": 566, "issue_title": "Implement User Authentication in React", "issue_body": "Implement a user authentication system within the React application to enhance security and manage user sessions effectively. The authentication system should include the following features:\n\nUser Registration : - Allow new users to create an account with a secure password.\nLogin Functionality: Enable users to log in with their credentials, storing their session securely.\nPassword Encryption: Use strong encryption (e.g., bcrypt) to securely store user passwords.\nSession Management: Implement session handling, ensuring that user sessions persist securely and end upon logout.\nTwo-Factor Authentication (Optional): For added security, provide an option for two-factor authentication using a service like Google Authenticator or SMS.\nError Handling: Handle common authentication errors (e.g., incorrect password, user not found) with user-friendly feedback.\n", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "PFA24SCM09R"}
{"issue_number": 564, "issue_title": "Unexpected Re-rendering When Using useEffect with Empty Dependency Array", "issue_body": "Description\\nWhen using useEffect with an empty dependency array to run an effect only once on component mount, the component re-renders unexpectedly, even though there are no dependency changes. This issue causes performance concerns, especially in cases with complex components or high-frequency updates.\\n\\n### Steps to Reproduce\\n1. Set up a React component with a useEffect hook that has an empty dependency array ([]).\\n2. Add a console.log inside the useEffect to monitor re-renders.\\n3. Render the component and observe console logs.\\n\\n### Expected Behavior\\nThe component should only re-render once on mount when useEffect has an empty dependency array.\\n\\n### Actual Behavior\\nThe component re-renders multiple times even though the dependency array is empty.\\n\\n### Environment\\n- React version: 18.x\\n- Browser: Chrome, Firefox\\n\\n### Possible Solution\\nThis might be due to recent changes in React's reconciliation or batching strategy. Investigating the impact of concurrent features or memoization strategies on useEffect might help.\\n\\n### Additional Context\\nThis behavior may also affect components that rely on useMemo or useCallback with empty dependency arrays.\\n", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM48P"}
{"issue_number": 563, "issue_title": "Bug: Unexpected Behavior in Angular Form Validation", "issue_body": "Description\\n\\nWhen using Angular's reactive forms, the form validation doesn't trigger correctly for nested form groups when a parent form is reset. The child form controls remain untouched and valid, leading to incorrect form validation feedback.\\n\\n### Steps to Reproduce:\\n1. Create a parent form with nested form groups.\\n2. Apply validation on both the parent form and nested child form controls.\\n3. Call reset() on the parent form.\\n\\n### Expected Behavior:\\nAll child form controls should be marked as pristine and untouched after resetting the parent form.\\n\\n### Actual Behavior:\\nThe child form controls stay marked as touched and dirty, causing incorrect validation feedback.\\n\\n### Environment:\\n- Angular Version: 13.x.x\\n- Browser: Chrome 94\\n\\n### Possible Fix:\\nResetting the parent form should also reset the status of child form controls.\\n\\n### Additional Context:\\nThis issue becomes critical when dealing with complex forms that rely heavily on validation for nested structures.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "DFA24SCM85M"}
{"issue_number": 561, "issue_title": "Bug: Component State Not Updating Correctly When Using Concurrent Mode", "issue_body": "Description\\nIn React's Concurrent Mode, state updates in functional components don't always propagate correctly, leading to unexpected component behavior. This occurs sporadically when using asynchronous state updates and can make debugging particularly challenging.\\n\\n### Steps to Reproduce\\n1. Enable Concurrent Mode in the root app using React.unstable_createRoot.\\n2. Set up a component with an asynchronous state update (e.g., using setTimeout or fetch).\\n3. Trigger multiple state updates in sequence.\\n\\n### Expected Behavior\\nAll state updates should propagate and render correctly.\\n\\n### Actual Behavior\\nState updates intermittently fail to render, sometimes reverting to previous values or not displaying updates at all.\\n\\n### Version\\nReact version: 18.0.0\\n\\n### Additional Information\\nI've encountered this issue primarily on Chrome v91, though it occasionally happens in Firefox as well. I suspect it could be related to how Concurrent Mode handles batched updates but couldn't find a clear pattern in reproductions.\\n\\n### Suggested Fix\\nFurther investigation into how Concurrent Mode batches updates for asynchronous functions could help resolve this issue. Adding more specific handling or clear documentation on expected behavior in such cases would be beneficial.\\n\\nPlease let me know if additional examples or a minimal reproduction repository is needed. Thank you!", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:pendingReview"], "State": "closed", "Author": "KFA24SCM12R"}
{"issue_number": 558, "issue_title": "Add Support for Enhanced Interactivity in Charts", "issue_body": "It would be beneficial to introduce new interactive features for D3.js charts, such as tooltips that provide richer content, customizable hover effects, and drag-and-drop capabilities for data points. These enhancements would greatly improve user engagement and data exploration. Specifically, I suggest:\\n\\n1. Customizable Tooltips: Allow users to define the content of tooltips, including images and formatted text.\\n2. Advanced Hover Effects: Enable multiple effects (e.g., color change, size adjustments) when hovering over elements.\\n3. Drag-and-Drop: Implement a feature to allow users to rearrange data points on the chart, dynamically updating the underlying data.\\n\\nThis could be achieved by extending the current event handling capabilities and integrating additional libraries where necessary. Looking forward to the community's thoughts on this!", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM50K"}
{"issue_number": 557, "issue_title": "Bug: Component fails to re-render on state update in React 18", "issue_body": "Description\\nThe component does not re-render when the state is updated in a specific scenario when using React 18.0.0. This issue seems to appear only with functional components and hooks, particularly affecting useState and useEffect hooks.\\n\\n### Steps to Reproduce\\n1. Create a functional component using React 18.\\n2. Initialize state using useState hook.\\n3. Trigger a state update and observe that the component does not re-render.\\n\\n### Expected Behavior\\nThe component should re-render every time the state is updated.\\n\\n### Actual Behavior\\nThe component fails to re-render on state update.\\n\\n### Environment\\n- React version: 18.0.0\\n- Browser: Chrome 93\\n- Operating System: macOS 11.4\\n\\n### Additional Context\\nThis issue might be related to concurrent mode changes in React 18. Observed behavior does not reproduce in React 17.\\n\\n### Potential Solution\\nConsider reviewing the state update mechanism in concurrent mode. Reverting to React 17 resolves the issue, indicating a possible regression.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "PFA24SCM53P"}
{"issue_number": 553, "issue_title": "Enhancement: Add Support for Improved Lazy Loading in Angular Modules", "issue_body": "Currently, Angular's lazy loading mechanism works efficiently for large-scale applications, but there are limitations when it comes to optimizing lazy loading strategies in dynamic and complex scenarios. This issue suggests adding new features to Angular's lazy loading system, such as improved route preloading strategies, the ability to dynamically load feature modules based on user roles, and better documentation for optimizing lazy loading in progressive web apps (PWAs). These enhancements will help developers better manage module loading times and improve the overall user experience in Angular applications, especially in large-scale and enterprise-grade projects.", "created_at": "2024-10-26", "closed_at": "2024-10-27", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM44D"}
{"issue_number": 550, "issue_title": "Optimize Angular Component Rendering for Improved Performance", "issue_body": "The DashboardComponent in our Angular project currently re-renders on every state change, causing performance bottlenecks, especially with large data sets. This issue proposes optimizing the component\u2019s rendering behavior to improve application responsiveness and reduce unnecessary DOM updates.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM60B"}
{"issue_number": 542, "issue_title": "Bug: Incorrect Axis Rendering on Resize with D3 v7", "issue_body": "When resizing the browser window, the x and y axes do not update correctly, resulting in overlapping labels and incorrect tick positions. This issue occurs in D3.js version 7.2.0 when dynamically resizing SVG containers.\\n\\n### Steps to Reproduce\\n1. Create an SVG element with x and y axes using D3.js.\\n2. Add a window resize event listener to update the SVG container size and re-render the axes.\\n3. Resize the browser window to a smaller size.\\n4. Observe that the axis labels and tick marks overlap or shift incorrectly.\\n\\n### Expected Behavior\\nThe axes should correctly adjust to the new SVG dimensions, with labels and tick marks maintaining their correct positions.\\n\\n### Actual Behavior\\nAxis labels and tick marks become misaligned and overlap when the window is resized.\"", "created_at": "2024-10-26", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Field", "Priority:High", "Status:InProgress", "OriginationPhase.Design"], "State": "open", "Author": "SFA24SCM78G"}
{"issue_number": 539, "issue_title": "Bug: Component Re-rendering on State Update", "issue_body": "When updating the state inside the MyComponent, the entire component tree re-renders, causing performance issues.\nSteps to Reproduce:\n1. Create a React component with nested child components.\n2. Update the state of the parent component.\n3. Observe the entire component tree re-renders unnecessarily.\n4. Expected Behavior\\nOnly the components directly affected by the state update should re-render, not the entire component tree. Environment React version: 17.0.2\nBrowser: Chrome (v90.0)\nThis issue started occurring after upgrading to React 17. The component uses the useState hook for managing local state.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:pendingReview"], "State": "closed", "Author": "NFA24SCM76P"}
{"issue_number": 537, "issue_title": "Bug: Chart Not Rendering on Resize", "issue_body": "Description\\nWhen resizing the window, the chart does not re-render correctly, leading to overlapping elements and an incorrect layout.\\n\\n### Steps to Reproduce\\n1. Open the chart in a desktop browser.\\n2. Resize the window to a smaller width.\\n3. Observe that the chart elements do not resize or reposition correctly.\\n\\n### Expected Behavior\\nThe chart should resize and re-render based on the new window dimensions, keeping the layout and elements properly scaled and positioned.\\n\\n### Actual Behavior\\nThe chart elements overlap, and certain parts go out of view. The chart layout does not adjust to fit the resized window.\\n\\n### Suggested Fix\\n- Add an event listener for window resizing to trigger a re-render of the D3 chart.\\n- Consider implementing a responsive layout by scaling SVG elements based on the current window dimensions.\\n\\n### Environment\\n- D3.js version: 7.4.4\\n- Browser: Chrome 92.0.4515.159\\n- Operating System: Windows 10\\n\\n### Additional Context\\nThis issue seems to occur only on desktop browsers. Mobile browsers appear to handle the resizing better.\\n\\n---\\n\\n### Screenshots\\nAttach any screenshots here that demonstrate the issue.\\n\\n### Labels\\n- Bug\\n- Needs Investigation\\n", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "KFA24SCM27H"}
{"issue_number": 535, "issue_title": "\"Improve Angular's HTTP Client Error Handling\"", "issue_body": "\"Body\": \"Angular's built-in HTTP client module provides powerful functionality for making HTTP requests and handling responses in Angular applications. However, error handling capabilities could be further enhanced to provide developers with more flexibility and control over error responses. This issue aims to improve Angular's HTTP client error handling by introducing features such as interceptors for global error handling, standardized error response formats, and customizable error handling strategies. Additionally, enhancing error handling documentation and providing best practices for error handling in Angular applications will empower developers to build more robust and reliable web applications using Angular's HTTP client module.\"", "created_at": "2024-10-26", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "open", "Author": "AFA24SCM13V"}
{"issue_number": 534, "issue_title": "Feature Proposal: Integrate OpenAI ChatGPT-3.5 for Enhanced Cookbook Guidance and Troubleshooting", "issue_body": "\"Body\": \"This proposal suggests a feature enhancement to integrate OpenAI ChatGPT-3.5 into the OpenAI Cookbook to provide real-time, AI-powered guidance and troubleshooting. The objective is to allow users to ask questions directly within the Cookbook and receive AI-driven suggestions, helping streamline learning and problem-solving. Key Objectives- Enhanced Learning Support: Provide users with real-time answers to queries about examples, code structure, and setup, all within the Cookbook.- Improved Troubleshooting: Assist users in debugging common issues by providing step-by-step guidance powered by ChatGPT-3.5.\\", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM15G"}
{"issue_number": 533, "issue_title": "Enhancement: Improve Documentation for CRM Tool Integration in eCommerce", "issue_body": "Summary\nThis issue aims to enhance the documentation on integrating a CRM tool, specifically Salesforce, for eCommerce platforms within the OpenAI-cookbook repository. The focus is to demonstrate how Salesforce can improve business insights and operational efficiency for eCommerce.\nDetails\n\nFeature: CRM tool integration in eCommerce\nTool: Salesforce\nObjective: Provide examples and detailed steps on how to leverage Salesforce to gain better business insights and optimize customer relationship management in an eCommerce setting.\n\nProposed Solution\n\nAdd a new section in the existing documentation for CRM integration, with Salesforce as the primary example.\nProvide step-by-step instructions, including setting up Salesforce APIs and importing customer data.\nInclude example scripts/code snippets showcasing typical CRM insights generated for eCommerce analytics.\n\nAdditional Context\nThis improvement will help eCommerce developers and analysts understand the potential of CRM tools in enhancing customer insights, streamlining operations, and increasing overall business intelligence.\nTo Do\n\n Draft documentation updates.\n Review integration examples and adjust as needed.\n Test sample scripts for accuracy and functionality.\n\nRelated Issues\nNone at the moment.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "SFA24SCM01S"}
{"issue_number": 531, "issue_title": "Enhancement: Add Comprehensive Example for Fine-Tuning with Custom Dataset", "issue_body": "Issue Summary\nProvide a detailed example in the OpenAI-cookbook demonstrating fine-tuning with a custom dataset. The current fine-tuning documentation is limited in scope, and an expanded example would benefit users looking to implement fine-tuning across various data types.\nProblem Description\nCurrently, the fine-tuning examples are generic and do not cover specific cases or detailed configurations that can arise when using custom datasets. Users may struggle with understanding how to preprocess, format, and effectively use their own data for fine-tuning.\nProposed Solution\nAdd a new notebook or update existing documentation to include:\n\nSteps for preparing and formatting custom datasets\nHandling common issues (e.g., missing values, incompatible data formats)\nSample dataset and script to guide users through each step\n\nBenefits\nThis would enhance usability and allow developers to more readily apply fine-tuning techniques to their projects with minimal hurdles, especially for those with limited experience in data preprocessing.\nThank you for considering this enhancement request!", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "HFA24SCM93S"}
{"issue_number": 528, "issue_title": "Feature Request: Add Support for Dynamic Theme Switching", "issue_body": "It would be beneficial to have a built-in mechanism in Angular that allows for dynamic theme switching in applications. Currently, developers need to manually handle theme changes by adding custom logic to switch between different CSS styles. This feature would improve the developer experience and streamline theming capabilities across Angular applications. Steps to Reproduce: Currently, theme switching requires developers to listen for user actions or preferences and manually apply different styles based on user settings. Expected Behavior: Angular should provide an official API or service to dynamically switch themes based on user preferences or environment settings. Versions: - Angular: 16.1.0 - Node: 16.14.2 - Operating System: Windows 11 Additional Information: Other frameworks, like Material UI, offer dynamic theming out of the box, making it easier for developers to provide better UX. A similar feature in Angular would be a great addition.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM44A"}
{"issue_number": 525, "issue_title": "Bug: Inconsistent Output with GPT-3.5-turbo in Examples", "issue_body": "Description\n\"While running the example code for GPT-3.5-turbo from the OpenAI-cookbook, I noticed inconsistent responses across identical prompt invocations. The generated output deviates significantly, which affects reproducibility and testing outcomes.\"\nSteps to Reproduce\n\"1. Clone the OpenAI-cookbook repo. 2. Run the examples/gpt3.5_turbo_example.py with the default prompt. 3. Observe the output. 4. Repeat the steps multiple times and note the variability.\"\nSteps to Reproduce\n\"1. Clone the OpenAI-cookbook repo. 2. Run the examples/gpt3.5_turbo_example.py with the default prompt. 3. Observe the output. 4. Repeat the steps multiple times and note the variability.\"\nExpected Behavior\n\"The output should be reasonably consistent across identical inputs to ensure reproducibility and reliable results in applications.\"\nActual Behavior\n\"Significant variation in output across runs with the same prompt and parameters, resulting in non-deterministic responses.\"\nAdditional Context\n\"This issue affects automated testing environments where deterministic outputs are necessary. It may require adjustments to sampling parameters or a note in the documentation about expected variability.\"\nSuggested Solution\n\"- Add documentation to explain potential variability in results. - Consider implementing a deterministic mode with a fixed seed.\"\nEnvironment\n\"- Model: GPT-3.5-turbo - Repository Version: [Commit SHA] - Operating System: [Specify OS] - Python Version: [Specify Python Version]\"", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "SFA24SCM37S"}
{"issue_number": 524, "issue_title": "Add Example for Using GPT-4 Turbo with Custom Stop Sequences in OpenAI API", "issue_body": "Feature Request: Example for Custom Stop Sequences\\n\\n#### Issue Description:\\nCurrently, the OpenAI-cookbook provides examples for basic usage of GPT-4 Turbo; however, it lacks examples demonstrating how to implement custom stop sequences. Adding a detailed example on this will help users tailor responses more precisely by instructing the model to stop generating at custom delimiters, improving user control over response length and content.\\n\\n#### Suggested Solution:\\n1. Add a section in the API usage documentation that explains what stop sequences are and when to use them.\\n2. Provide code examples for common use cases: single-stop sequences and multiple-stop sequences.\\n3. Explain edge cases, such as what happens when a stop sequence isn't present in the generated text.\\n\\n#### Additional Context:\\nCustom stop sequences can be helpful in applications like conversational agents, chatbots, and tasks requiring structured responses. Including this feature will enhance flexibility and usability for developers working with the OpenAI API.\\n\\n---\\n\\nThank you for considering this feature request!", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM66S"}
{"issue_number": 523, "issue_title": "Enhancement: Add Support for GeoJSON MultiPolygon", "issue_body": "Enhancement Request Summary Currently, d3.js provides excellent support for GeoJSON features, but lacks built-in functionality for handling MultiPolygon geometries. This enhancement would allow users to easily visualize and manipulate MultiPolygon data within their D3 visualizations.Motivation Many geographic datasets include MultiPolygon features, especially for representing complex administrative boundaries. By adding support for these geometries, D3.js can become even more versatile for geospatial data visualizations.Proposed Solution Implement a new function or extend existing ones to parse and render MultiPolygon geometries. This could include:Updating the d3.geoPath() function to handle MultiPolygon inputs.Providing example usage in the documentation. Additional Context GeoJSON Specification Use cases from various projects where MultiPolygons are common. Feature request for better GeoJSON support bug report on rendering complex geometries.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:Low", "Status:InProgress"], "State": "closed", "Author": "JFA24SCM04K"}
{"issue_number": 522, "issue_title": "Angular 12 Compiler Error: Unexpected Token in Template", "issue_body": "Description\\nAfter upgrading to Angular 12, the compiler throws an 'Unexpected token' error when using certain template expressions that worked in previous versions.\\n\\n### Steps to Reproduce\\n1. Create a component with a template that includes complex expressions, such as chaining safe navigation operators.\\n2. Build the project using ng build.\\n3. Observe the compiler error output.\\n\\n### Expected Behavior\\nThe project should compile without errors, and the template expressions should function as intended.\\n\\n### Actual Behavior\\nCompilation fails with an error similar to: Unexpected token. A constructor, method, accessor, or property was expected.\\n\\n### Environment\\n- Angular Version: 12.0.0\\n- Node Version: 14.17.0\\n- OS: Windows 10 / macOS Big Sur / Ubuntu 20.04\\n\\n### Additional Context\\nThe issue seems to be related to the Angular compiler's stricter parsing in version 12. Templates that included optional chaining and nullish coalescing operators now cause errors.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "SFA24SCM81A"}
{"issue_number": 521, "issue_title": "Enhancement: Add Examples for Fine-Tuning Models in OpenAI API", "issue_body": "Currently, the OpenAI-cookbook lacks detailed examples for fine-tuning models using the OpenAI API. Adding a dedicated section with examples and best practices for fine-tuning would greatly benefit users seeking custom model training.\nProposed Solution\n1. Create a new section in the OpenAI-cookbook focused on model fine-tuning.\n2. Provide step-by-step code examples demonstrating:\n- Data preparation and formatting.\n- Fine-tuning process using the OpenAI API.\n- Best practices for achieving optimal results.\nAdditional Context\nFine-tuning guidance would be particularly helpful for users in industries like customer support, where custom models can improve interaction quality.\nRequest\nPlease prioritize this feature as it is frequently requested by the community. We can also consider adding case studies or example datasets to illustrate practical use cases.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "HFA24SCM09S"}
{"issue_number": 520, "issue_title": "Inconsistent Data Binding in Update Pattern for Nested Selections", "issue_body": "Description\\nWhen using D3\u2019s update pattern on nested selections, data binding appears inconsistent for elements within nested structures. Specifically, when trying to update data on multiple layers of grouped elements, D3 fails to bind data correctly on the deeper layers of the selection. This inconsistency occurs even when using .join() and .data() methods as specified in the documentation.\\n\\n### Steps to Reproduce\\n1. Create a nested data structure (e.g., an array of arrays) and bind it to a nested selection in D3.\\n2. Attempt to update data on both the outer and inner levels of the selection using .join().\\n3. Observe that data updates only partially reflect in nested elements.\\n\\n### Expected Behavior\\nData binding should occur consistently across all levels of nested selections, allowing for reliable updates on each layer.\\n\\n### Actual Behavior\\nData binding fails on inner nested elements, with only the outer selection updating as expected.\\n\\n### Possible Solution\\nIt may be beneficial to verify how data is propagated through nested .join() calls in the D3 source or improve the documentation around nested data binding patterns.\\n\\n### Environment\\n- D3 version: 7.4.4\\n- Browser: Chrome 114\\n- OS: Windows 11\\n\\n### Additional Context\\nThis issue impacts complex visualizations where nested structures are common, such as grouped bar charts or hierarchical layouts. Ensuring stable data updates for these patterns would greatly enhance usability and reliability.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "SFA24SCM13J"}
{"issue_number": 519, "issue_title": "Enhancement: Improve Error Handling for useEffect Hook", "issue_body": "Currently, the useEffect hook does not provide comprehensive error handling capabilities, which can lead to silent failures in components. This enhancement proposal suggests introducing a way to catch errors in asynchronous effects, allowing developers to manage and respond to errors more effectively. The implementation could include:\n\nAn optional error callback parameter in the useEffect hook.\nA new custom hook that wraps useEffect, providing better error handling.\nDocumentation updates to guide developers on how to utilize these new features.\n\nThis would improve the developer experience and make debugging more straightforward, especially in complex applications.", "created_at": "2024-10-26", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "UFA24SCM65M"}
{"issue_number": 517, "issue_title": "Enhance Documentation for Using OpenAI API with Python", "issue_body": "{\n\"Title\": \"Enhance Documentation for Using OpenAI API with Python\",\n\"Body\": \"The current documentation for using the OpenAI API with Python lacks detailed examples, especially around advanced use cases like streaming completions and error handling during API calls. This enhancement aims to add more comprehensive Python code examples for different API features, including error handling scenarios and streaming data. Additionally, it will include a section on common issues faced by developers when integrating the API and how to troubleshoot them effectively. Improving this documentation will provide a smoother experience for new and advanced users, reducing time spent on support queries.\"\n}", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "YFA24SCM52T"}
{"issue_number": 514, "issue_title": "Bug: `useEffect` Hook Runs Twice on Initial Render in Strict Mode", "issue_body": "When using React in Strict Mode, the useEffect hook executes twice on the initial render instead of only once as expected. This behavior can cause issues for components that rely on useEffect to make API calls or set initial state based on side effects. Steps to Reproduce 1. Wrap the app in <React.StrictMode> in index.js. 2. Create a functional component that uses useEffect with an empty dependency array (e.g., useEffect(() => { console.log('effect'); }, []);). 3. Observe that the effect runs twice on the initial render.\\n\\n### Expected Behavior\\nThe useEffect hook should execute only once on the initial render if no dependencies are provided.\\n\\n### Actual Behavior\\nThe useEffect hook executes twice on the initial render in Strict Mode. Suggested Solution\\nClarify this behavior in the documentation or provide a way to opt out of the double useEffect invocation in Strict Mode, as this may impact apps relying on single initial calls to APIs or side effects. Environment- React Version : 18.0.0- Browser: Chrome 90 - OS: macOS 11 .4 Additional Context This behavior has been observed since React 18's introduction, where Strict Mode intentionally triggers this behavior for development purposes. However, many users find it counterintuitive and potentially problematic for certain use cases, especially in production environments where double invocation is not necessary.Please let us know if there are any workarounds or if future releases plan to address this issue.\"\n}", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:pendingReview"], "State": "closed", "Author": "ng-iit"}
{"issue_number": 512, "issue_title": "Inconsistency in Output When Using GPT-4 with Temperature Parameter", "issue_body": "Issue:\nThere is an observed inconsistency in the output when using GPT-4 with the temperature parameter set to 0.5. Repeated runs of the same prompt result in noticeably different responses, which deviates from the expected controlled randomness at this temperature setting.\nSteps to Reproduce:\n\nUse the GPT-4 API with the following parameters:\n\nmodel: 'gpt-4'\ntemperature: 0.5\nprompt: 'Explain quantum computing in simple terms'\n\n\nRun the prompt multiple times (3-5 runs).\n\nExpected Behavior:\nAt temperature 0.5, the responses should vary slightly but maintain a coherent structure and similar core content.\nActual Behavior:\nThe output varies significantly, with some responses being much shorter or more detailed than others, deviating in structure and depth of explanation.\nEnvironment:\n\nOpenAI API version: v4\nPython version: 3.10\nOther relevant details: Used the OpenAI Python SDK.\n\nAdditional Information:\nThis issue was found while running tests for consistency in responses. Kindly review if this is intended behavior or an issue with the temperature control.\"", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "Akash-2204"}
{"issue_number": 508, "issue_title": "Bug: Line Chart Rendering Issues with Negative Values", "issue_body": "When rendering a line chart that includes negative values in the dataset, the line incorrectly clips at the x-axis, making it difficult to visualize the data below zero. This issue occurs regardless of scale or axis configuration. To reproduce the issue, create a line chart using D3.js with both positive and negative values in the dataset, set up the y-axis with a linear scale, and render the chart. The line is expected to continue into the negative y-axis region without clipping, but instead, it is clipped at the x-axis, affecting the chart's readability. This issue was found in D3.js version 7.2.0, using Chrome 94 on Windows 10. A possible solution is to ensure the SVG clip-path property is configured correctly to account for negative y-axis values or adjust the scaling calculations to include negative data points.", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Bug", "Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Priority:Major", "Status:Approved", "Status:Completed", "Status:Rejected", "OriginationPhase: Requirements", "OriginationPhase.Design"], "State": "closed", "Author": "RFA24SCM59K"}
{"issue_number": 507, "issue_title": "Bug: useEffect Hook Not Triggering on Dependency Array Change", "issue_body": "Description\nThe useEffect hook does not consistently trigger when the dependency array changes, particularly with deeply nested objects.\nSteps to Reproduce\n\nInitialize a useEffect hook with a dependency on a deeply nested object.\nUpdate the nested object property.\n\nExpected Behavior\nThe useEffect hook should re-run when any property in the dependency array changes.\nActual Behavior\nThe useEffect hook does not trigger, leading to stale data.\nEnvironment\n\n\nReact Version: 17.0.2\n\n\nBrowser: Chrome 91\n\n\nOperating System: Windows 10\n\n\nAdditional Context\n\n\nThis issue might be related to how React compares dependency arrays with nested objects.\n\n\nPotential Fix\nAllowing for a deeper equality check in useEffect dependencies may resolve the issue.", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Field", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "KFA24SCM71P"}
{"issue_number": 503, "issue_title": "\"Bug: State Not Updating in Functional Components with useState Hook\"", "issue_body": "\"### Description\\nWhen using the useState hook in functional components, the component state does not update correctly when asynchronous operations or nested callback functions are involved. This leads to inconsistent behavior, especially when setting multiple state values in sequence.\\n\\n### Steps to Reproduce\\n1. Create a functional component using the useState hook.\\n2. Add an asynchronous function that updates state based on previous values.\\n3. Observe that the state does not update as expected when called in sequence.\\n\\n### Expected Behavior\\nThe state should update correctly in functional components when using useState with asynchronous calls or nested callbacks.\\n\\n### Actual Behavior\\nState updates appear inconsistent, resulting in stale data being displayed in the component.\\n\\n### Environment\\n- React version: 18.0.0\\n- Browser: Chrome 94\\n- Operating System: macOS Big Sur\\n\\n### Additional Information\\nThis issue appears only when there are back-to-back asynchronous operations affecting the state. Wrapping the state updates in multiple setTimeout functions may reproduce this issue.\\n\\n### Possible Solution\\nConsider using useReducer as an alternative or investigating if this issue relates to batch updates in React's reconciliation process.\"", "created_at": "2024-10-25", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Major", "Status:Approved"], "State": "open", "Author": "PFA24SCM85B"}
{"issue_number": 502, "issue_title": "Improve Documentation for Fine-Tuning Models with Custom Datasets", "issue_body": "Currently, the documentation for fine-tuning models using custom datasets lacks detailed explanations and examples on best practices for dataset formatting, preprocessing, and handling large datasets.\nTo improve the developer experience, the following updates are suggested:\n\nAdd a step-by-step guide for preparing custom datasets, including file format guidelines (e.g., JSON, CSV).\nProvide more examples on how to preprocess data for fine-tuning, including text cleaning, tokenization, and batching.\nInclude a section on troubleshooting common issues encountered during fine-tuning (e.g., memory errors, training instability).\nProvide a code example with annotations for how to train a model on a multi-class classification task.\n\nThese additions would greatly enhance usability for developers seeking to fine-tune OpenAI models on their own data.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "JFA24SCM87S"}
{"issue_number": 498, "issue_title": "State not updating when using setState inside useEffect with async function", "issue_body": "When calling an async function within the useEffect hook and trying to update the component's state using setState, the state does not update as expected. This issue occurs intermittently and affects the rendering logic.\nSteps to reproduce:\n\nCreate a functional component with a useEffect hook.\nInside useEffect, call an async function and update the state using setState.\nNotice that the state sometimes does not update after the async operation completes.\n\nExpected Behavior: The state should consistently update after the async function resolves.\nActual Behavior: The state does not update intermittently, causing issues with the component rendering.\nEnvironment: React version 18.0.0, Node.js version 16.0, Chrome 90, Windows 10", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Design", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "VFA24SCM62M"}
{"issue_number": 494, "issue_title": "Bug: Inconsistent Axis Label Formatting in Time-Scale Charts", "issue_body": "Description\\n: When using time scales with customized date formats, the axis labels display inconsistently across different zoom levels. This appears to happen specifically when setting custom tick formatting for months and days.\\n\\n### Steps to Reproduce\\n1. Create a line chart with a time scale on the x-axis.\\n2. Use d3.timeFormat to customize the date format for tick values.\\n3. Zoom into the chart to view days within months.\\n\\n### Expected Behavior\\nAxis labels should adjust and remain consistent when zooming in and out.\\n\\n### Actual Behavior\\nAxis labels intermittently switch between different formats, causing readability issues.\\n\\n### Additional Information\\n- D3.js version: 7.4.4\\n- Browser: Chrome Version 93.0\\n- OS: Windows 10\\n\\n### Potential Solution\\nIt seems that the tickFormat function is not properly recalculated when the zoom level changes. Adding a recalculation for tick intervals might resolve the issue.\\n\\n### Screenshots\\nPlease let me know if any additional information is needed.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "KFA24SCM32K"}
{"issue_number": 492, "issue_title": "Bug: React Component Not Updating State Properly on Async Action", "issue_body": "Description\nWhen using React state to handle data from an asynchronous action (e.g., fetching data from an API), the component state is not updating correctly. This issue occurs sporadically, and the component does not re-render as expected.\nSteps to Reproduce\nCreate a functional component that uses the useState and useEffect hooks.\nInitialize state with an empty array.\nFetch data from an API asynchronously within the useEffect hook and update the state.\nObserve that the state does not always update properly, causing the component to not re-render.\nExpected Behavior\nThe state should update correctly every time, and the component should re-render to reflect the changes.\nActual Behavior\nThe state does not update consistently, and the component sometimes fails to re-render.\nEnvironment\nReact version: 18.2.0\nBrowser: Chrome 117.0.5938.92 (Official Build) (64-bit)\nOperating System: macOS Ventura 13.5\nPossible Fix\nThere might be a problem with how React batches updates or handles asynchronous actions. It could also be related to the timing of the useEffect hook. Consider checking the handling of asynchronous state updates and ensuring that the state transitions properly trigger re-renders.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "DFA24SCM62M"}
{"issue_number": 491, "issue_title": "React component re-renders unnecessarily when updating state in parent component", "issue_body": "Description\\nIn a React application, a child component re-renders every time the state is updated in its parent component, even when the child's props have not changed. This behavior negatively impacts performance, especially with large component trees.\\n\\n### Steps to Reproduce\\n1. Create a parent component that holds a state and passes props to a child component.\\n2. Update the parent's state without changing the props passed to the child.\\n3. Observe that the child component re-renders even though it did not receive new props.\\n\\n### Expected Behavior\\nThe child component should not re-render if the props it receives remain unchanged.\\n\\n### Actual Behavior\\nThe child component re-renders every time the parent\u2019s state is updated.\\n\\n### Environment\\n- React version: 18.2.0\\n- Browser: Chrome 118.0\\n- Operating System: macOS Ventura 13.4\\n\\n### Possible Solution\\nUsing React.memo or useMemo in functional components to prevent unnecessary re-renders might resolve the issue. Further investigation into the reconciliation process may be needed.\\n\\n### Additional Context\\nThis issue affects applications with large trees of child components, where re-renders significantly impact performance.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Rejected"], "State": "closed", "Author": "DFA24SCM25P"}
{"issue_number": 490, "issue_title": "Add Example for Fine-Tuning a Model with Custom Dataset", "issue_body": "Issue Description: The OpenAI Cookbook lacks a clear example of fine-tuning a model using a custom dataset. Although there are examples of prompt engineering and generating responses with OpenAI models, an example showing the entire workflow for fine-tuning would be beneficial. This should include steps on preparing the dataset, initiating fine-tuning, and using the fine-tuned model for inferences.  ### Proposed Solution 1. Dataset Preparation: Show how to structure data properly (with sample JSONL format). 2. Fine-Tuning Process: Provide code snippets for initiating the fine-tuning API call. 3. Testing: Could you include an example of using the fine-tuned model on new prompts? ### Additional Context Adding this would greatly aid developers looking to adapt models to their specific use cases. Please let me know if this would be a welcome contribution or if plans exist to implement this feature in the Cookbook.  ### References - OpenAI API Docs - Fine-Tuning Guide", "created_at": "2024-10-25", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase: Requirements"], "State": "open", "Author": "AFA24SCM87W"}
{"issue_number": 485, "issue_title": "Bug: Angular Router not navigating to the correct route after Lazy Loading", "issue_body": "Description\nWhen using Angular's lazy loading feature for modules, navigating to certain routes does not work as expected. After the initial load, attempts to navigate to lazy-loaded modules sometimes result in a blank page or incorrect routing.\nSteps to Reproduce\n\nSet up an Angular project with lazy-loaded modules.\nAttempt to navigate to a lazy-loaded module via router links.\nObserve that routing fails or navigates to the wrong module.\n\nExpected Behavior:\nThe router should correctly navigate to the intended lazy-loaded module every time.\nVersions\n- Angular: 14.0.0\n- Browser: Chrome 110\n- OS: macOS Ventura\n-\nAdditional Information:\nThis issue began after migrating from Angular 13 to Angular 14. Lazy loading configuration is done as per Angular's official documentation.\"", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "AFA24SCM54D"}
{"issue_number": 484, "issue_title": "Bug: useEffect Cleanup Not Triggering on Component Unmount in Strict Mode", "issue_body": "Description\nWhen using React's useEffect hook with a cleanup function, the cleanup is not consistently triggered during component unmount. This issue is observed when running the application in React Strict Mode.\nSteps to Reproduce\nWrap the root component with <React.StrictMode>.\n\nCreate a functional component with a useEffect hook and a cleanup function:\nimport React, { useEffect } from 'react';\n\nconst TestComponent = () => {\n  useEffect(() => {\n    console.log('Effect applied');\n    return () => console.log('Cleanup function triggered');\n  }, []);\n  return <div>Test Component</div>;\n};\nexport default TestComponent;\n\nMount and unmount the component.\nObserve the logs in the console during unmount.\n\nExpected Behavior\nThe cleanup function should trigger every time the component is unmounted, including in Strict Mode.\nActual Behavior\nIn Strict Mode, the cleanup function is not triggered consistently, causing potential memory leaks and unexpected side effects.\nEnvironment\nReact version: 18.x\nBrowser: Chrome 117, Firefox 118\nOS: Windows 11 / macOS Ventura\n", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "KFA24SCM93P"}
{"issue_number": 482, "issue_title": "Enhancement: Improve Data Visualization Performance in d3.js for Large Datasets", "issue_body": "Description:\nWe are facing performance bottlenecks when rendering large datasets in d3.js visualizations. The current rendering process causes lag and impacts user experience on lower-end devices.\nProposed Solution:\nImplement lazy loading or data chunking to handle large datasets more efficiently. Explore WebGL integration to accelerate rendering.\nBenefits: Improved performance for large datasets. Better user experience, especially on resource-constrained devices.\nPossible Challenges: Compatibility with existing d3.js rendering patterns. Complexity in integrating WebGL with current SVG-based rendering.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "NFA24SCM81J"}
{"issue_number": 481, "issue_title": "Enhancement: Add Examples for Advanced Model Fine-Tuning", "issue_body": "Overview\\n\\nI would like to propose adding examples for advanced fine-tuning techniques using OpenAI models in the cookbook. While the existing documentation provides a solid foundation, incorporating real-world scenarios and detailed step-by-step guides would greatly benefit users looking to optimize their models.\\n\\n## Details\\n\\n### Suggested Topics:\\n1. Hyperparameter Tuning: Best practices and examples of hyperparameter optimization.\\n2. Transfer Learning: How to leverage existing models for new tasks.\\n3. Data Augmentation: Techniques to enhance training datasets effectively.\\n\\n### Expected Outcomes:\\n- Improved accessibility for users aiming to fine-tune models.\\n- Increased community contributions as users share their experiences.\\n\\n## Additional Notes\\nIf there are any existing resources or research papers that can be referenced, they would also enhance the quality of the examples. Looking forward to feedback and any additional suggestions!", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM60T"}
{"issue_number": 478, "issue_title": "Enhancement Request: Add Example for Fine-tuning GPT Models", "issue_body": "I would like to suggest an enhancement for the OpenAI Cookbook. It would be helpful to include a detailed example demonstrating how to fine-tune GPT models using the latest techniques and best practices. Specifically, including code snippets, explanations of hyperparameter tuning, and sample datasets would greatly assist users in understanding the fine-tuning process. This addition could enhance the learning experience for developers looking to customize GPT for their applications.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM84S"}
{"issue_number": 477, "issue_title": "Request for Addition of New GPT-4 Examples", "issue_body": "The current repository has extensive examples for GPT-3, but lacks similar detailed examples for GPT-4, particularly in the areas of fine-tuning and prompt engineering. It would be beneficial for the community if more GPT-4 focused examples could be added. These examples should cover areas such as setting up fine-tuning environments, generating prompts that lead to higher-quality responses, and managing token budgets effectively. Adding these resources would greatly assist users in transitioning from GPT-3 to GPT-4 usage.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "DFA24SCM74V"}
{"issue_number": 476, "issue_title": "Add Example for Fine-Tuning OpenAI GPT-3.5 on Custom Dataset", "issue_body": "Add a new example to the OpenAI Cookbook demonstrating how to fine-tune a GPT-3.5 model on a custom dataset. The example should include steps for data preparation, uploading the dataset, running the fine-tuning job, and evaluating the fine-tuned model. Requirements Clear instructions on how to structure and prepare the dataset. Code snippets for setting up the fine-tuning using the OpenAI API. Examples for evaluating the model's performance post fine-tuning. A section on potential issues and troubleshooting tips. Additional Context This example will help users better understand how to leverage OpenAI's fine-tuning capabilities for domain-specific use cases. Include references to existing documentation and best practices.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "PFA24SCM25S"}
{"issue_number": 475, "issue_title": "Bug: d3.scaleTime axis labels overlap on smaller viewports", "issue_body": "Description:\nWhen using d3.scaleTime to create a time-based scale, the axis labels overlap each other on smaller viewports. This makes the labels unreadable and impacts the visual quality of the chart. Adjusting the tick formatting does not seem to resolve the issue.\nSteps to reproduce:\nCreate a simple line chart using d3.scaleTime for the x-axis.\nUse a dataset with timestamps as input.\nResize the viewport to a smaller width (e.g., 320px).\nObserve that the axis labels overlap and become unreadable.\nExpected behavior:\nAxis labels should adjust, either through auto-rotation, truncation, or improved spacing, to prevent overlap on smaller viewports.\nActual behavior:\nThe axis labels remain in their default orientation and overlap, making them unreadable on smaller viewports.\nEnvironment:\nD3.js version: 7.8.2\nBrowser: Firefox 117\nOS: macOS Monterey\nSuggested Solution:\nConsider implementing an automatic label rotation or spacing adjustment for smaller viewports, possibly within scaleTime or a related D3 module.\nAdditional Information:\nThe issue is particularly noticeable on mobile screens. A workaround with CSS transformations only partially resolves the problem but does not work consistently across all screen sizes.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "RFA24SCM60H"}
{"issue_number": 474, "issue_title": "Feature Request: Add Recipe for Custom Model Fine-Tuning", "issue_body": "I would like to propose adding a new recipe to the OpenAI Cookbook that outlines the process for fine-tuning custom models using specific datasets. This recipe should include detailed steps, best practices, and code snippets to help users effectively adapt pre-trained models to their own data. Including examples with  varying data types and use cases would greatly enhance the utility of the cookbook for developers and researchers alike.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "AFA24SCM13S"}
{"issue_number": 472, "issue_title": "Bug: `d3.scaleTime` axis labels overlap on smaller viewports", "issue_body": "Description:\nWhen using d3.scaleTime to create a time-based scale, the axis labels overlap each other on smaller viewports. This makes the labels unreadable and impacts the visual quality of the chart. Adjusting the tick formatting does not seem to resolve the issue.\nSteps to reproduce:\n\nCreate a simple line chart using d3.scaleTime for the x-axis.\nUse a dataset with timestamps as input.\nResize the viewport to a smaller width (e.g., 320px).\nObserve that the axis labels overlap and become unreadable.\n\nExpected behavior:\nAxis labels should adjust, either through auto-rotation, truncation, or improved spacing, to prevent overlap on smaller viewports.\nActual behavior:\nThe axis labels remain in their default orientation and overlap, making them unreadable on smaller viewports.\nEnvironment:\nD3.js version: 7.8.2\nBrowser: Firefox 117\nOS: macOS Monterey\nSuggested Solution:\nConsider implementing an automatic label rotation or spacing adjustment for smaller viewports, possibly within scaleTime or a related D3 module.\nAdditional Information:\nThe issue is particularly noticeable on mobile screens. A workaround with CSS transformations only partially resolves the problem but does not work consistently across all screen sizes.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": [], "State": "closed", "Author": "RFA24SCM60H"}
{"issue_number": 471, "issue_title": "\"Component Rendering Delay When Using Conditional Hooks in React\"", "issue_body": "I'm experiencing a delay in component rendering when using conditional hooks within a functional component. The component takes a noticeable amount of time to update after the state change. This behavior is causing performance issues, especially with larger datasets.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "HFA24SCM03M"}
{"issue_number": 467, "issue_title": "Bug: Unexpected Behavior in useEffect with Dependencies Array", "issue_body": "Describe the bug\\nWhen using useEffect with a dependencies array, the hook sometimes fails to re-trigger when dependencies change. This appears to occur intermittently and affects several users in our application, specifically in components where the dependency array includes state variables.\\n\\n### Steps to reproduce\\n1. Create a component with a state variable and update it in response to some action.\\n2. Add useEffect to the component with the state variable in the dependencies array.\\n3. Update the state and observe that useEffect does not always re-trigger as expected.\\n\\n### Expected behavior\\nuseEffect should re-trigger every time a dependency in its array changes.\\n\\n### Screenshots\\nIf applicable, add screenshots to help explain your problem.\\n\\n###", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "DFA24SCM31P"}
{"issue_number": 465, "issue_title": "Performance Optimization for Reactive Forms", "issue_body": "There have been reports of performance issues when using Reactive Forms with a large number of controls in Angular applications. This issue primarily affects applications with complex forms that include nested form groups and dynamic controls.\nExpected Behavior:\nImproved performance when rendering and updating forms with a high number of controls.\nCurrent Behavior:\nUsers experience significant lag and increased CPU usage during form interactions, especially when validations and value changes are involved.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "RFA24SCM46C1"}
{"issue_number": 463, "issue_title": "Bug: Incorrect Scaling with Custom Axis Range in Logarithmic Scale", "issue_body": "When using a logarithmic scale with a custom range, d3.js does not correctly apply the specified range to the axis ticks, causing them to render incorrectly. This bug appears when scaling beyond the default log scale boundaries, leading to visual discrepancies in the chart.\\n\\n### Steps to Reproduce\\n1. Create a logarithmic scale with d3.scaleLog() and set a custom range.\\n2. Append an axis using d3.axisLeft or d3.axisBottom with the specified scale.\\n3. Observe that the axis ticks do not display as expected and fail to adjust based on the custom range.\\n\\n### Expected Behavior\\nThe axis should display ticks correctly within the defined range and adapt the values to fit the scale.\\n\\n### Actual Behavior\\nTicks render inconsistently and ignore the custom-defined range.\\n\\n### Versions\\n- d3.js version: v6.7.0\\n- Browser: Chrome v95, Firefox v92\\n\\n### Additional Context\\nThis issue appears to be related to the log scale transformation and may involve d3.axis ticks not recalculating properly when range limits are defined manually. It affects visual accuracy and user interpretation in charts with logarithmic scaling.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:InProgress"], "State": "closed", "Author": "PFA24SCM60J"}
{"issue_number": 458, "issue_title": "Bug: Component Re-Renders Unexpectedly When State is Updated", "issue_body": "Description\\nWhen a component's state is updated using the setState function, the component re-renders multiple times, causing performance issues. This behavior occurs even if the new state is identical to the previous state.\nSteps to Reproduce\n\nCreate a functional component.\nInitialize a state variable using the useState hook.\nUpdate the state using the setter function.\nObserve the component re-render multiple times.\nExpected BehaviorThe component should only re-render when the state changes, and not when the same state is set again.\nActual BehaviorThe component re-renders even when the state is identical to the previous value, causing unnecessary performance overhead.\nEnvironment- React version: 18.0.0- Browser: Chrome 94- Operating System: macOS Monterey Possible Solution Check if the new state is different from the current state before triggering a re-render.\n", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Critical", "Priority:Medium", "Status:Approved", "Status:InProgress", "Status:pendingReview", "OriginationPhase: Requirements"], "State": "closed", "Author": "RFA24SCM59K"}
{"issue_number": 457, "issue_title": "Bug: useEffect Hook Executes Multiple Times Despite Empty Dependency Array", "issue_body": "Description\nWhen using the useEffect hook with an empty dependency array, the effect is expected to run only once when the component mounts. However, in some cases, it executes multiple times on mount, causing unexpected behavior in components that rely on single execution.\nSteps to Reproduce\n\nCreate a functional component that uses the useEffect hook with an empty dependency array.\nAdd a console log or API call inside the useEffect.\nObserve the console or network requests after the component mounts.\n\nExpected Behavior\nThe useEffect should only execute once when the component mounts if the dependency array is empty.\nActual Behavior\nThe useEffect runs multiple times even with an empty dependency array.\nEnvironment\n\nReact version: 18.2.0\nBrowser: Chrome Version 117.0.5938.132\nOperating System: Windows 11\n\nAdditional Context\nThis issue seems to occur more frequently when strict mode is enabled in development builds. Disabling strict mode prevents the issue, but this isn't an ideal solution.", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "SFA24SCM95P"}
{"issue_number": 453, "issue_title": " Bug: Component re-renders unexpectedly in strict mode", "issue_body": "\"### Description\\nWhen using React in strict mode, some components appear to re-render unexpectedly even when their props and state remain unchanged. This behavior is causing performance issues and unexpected side effects in applications where re-renders are costly.\\n\\n### Steps to Reproduce\\n1. Wrap a component tree in <React.StrictMode>.\\n2. Use a memoized component with props and state that do not change.\\n3. Observe the component re-rendering when it should remain stable.\\n\\n### Expected Behavior\\nComponents should not re-render if their props and state have not changed, even in strict mode.\\n\\n### Actual Behavior\\nComponents are re-rendering despite stable props and state.\\n\\n### React Version\\n17.0.2\\n\\n### Additional Context\\nThis issue may be related to how React\u2019s strict mode manages component updates, but it only appears in some cases. \"", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Completed"], "State": "closed", "Author": "SFA24SCM37M"}
{"issue_number": 452, "issue_title": "Bug: Component Re-renders Twice on Initial Render in Strict Mode", "issue_body": "Description\\nWhen using React in StrictMode, certain components re-render twice on the initial render. This behavior was observed starting from React 18 and does not occur in non-Strict Mode. The double rendering can affect components with side effects in useEffect, causing unexpected behavior and performance concerns.\\n\\n### Steps to Reproduce\\n1. Create a new React component that logs messages in useEffect on mount.\\n2. Wrap the component in <React.StrictMode>.\\n3. Observe the console logs.\\n\\n### Expected Behavior\\nThe component should render only once on the initial mount.\\n\\n### Actual Behavior\\nThe component renders twice, with the useEffect hook triggering twice as well.\\n\\n### Environment\\n- React Version: 18.0.0\\n- Browser: All\\n- OS: Windows/MacOS\\n\\n### Additional Context\\nThis behavior is documented but can be unexpected for developers moving to React 18 from older versions. Guidance on whether this is intended or if it will be addressed in future releases would be helpful.\\n\\n---\\n\\nRelated Issues:\\n- #12345 - Similar re-rendering behavior observed in StrictMode", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "PFA24SCM65M"}
{"issue_number": 450, "issue_title": "Add Example for Fine-Tuning on Custom Dataset with GPT-3.5 Turbo", "issue_body": "\"### Issue Description\\nThe OpenAI Cookbook lacks an example that demonstrates fine-tuning the GPT-3.5 Turbo model on a custom dataset. Adding a comprehensive example for this would greatly benefit users looking to understand and implement fine-tuning for their specific use cases.\\n\\n### Proposed Solution\\n1. Create a Jupyter Notebook: The notebook should outline steps to fine-tune GPT-3.5 Turbo on a sample dataset (e.g., customer support conversations, sentiment analysis, etc.).\\n2. Include Data Preparation Steps: Demonstrate how to preprocess and format data to match OpenAI\u2019s requirements for fine-tuning.\\n3. Show Training and Evaluation Process: Explain how to run training and evaluate the fine-tuned model's performance.\\n4. Document Known Limitations and Tips: List common issues, limitations, and best practices when fine-tuning GPT-3.5 Turbo.\\n\\n### Additional Context\\nFine-tuning GPT-3.5 Turbo is a common request among developers using OpenAI\u2019s API. A practical example in the OpenAI Cookbook would streamline the learning process for the community and encourage more effective use of OpenAI's capabilities.\\n\\n### Expected Outcome\\nThis example will provide users with a clear, step-by-step guide for fine-tuning GPT-3.5 Turbo, fostering a better understanding of model customization and use-case-specific optimizations.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:pendingReview"], "State": "closed", "Author": "VFA24SCM64B"}
{"issue_number": 447, "issue_title": "Error when running ng build with Angular CLI version 13.x on Windows 10", "issue_body": "Issue Description :\nRunning ng build with Angular CLI version 13.x on Windows 10 results in a compilation error stating, 'Module not found: Error: Can't resolve \"/src/environments/environment\"'. This occurs even though the environment file exists in the specified directory.\nSteps to Reproduce :\n\nCreate a new Angular project using Angular CLI 13.x on a Windows 10 system.\nEnsure that the /src/environments/environment.ts file is in place.\nRun ng build in the project directory.\n\nExpected Behavior:\nThe build process should complete successfully without errors.\nActual Behavior:\nThe following error message is displayed:\nModule not found: Error: Can't resolve \\\"/src/environments/environment\\\".\nEnvironment:\nAngular CLI: 13.x\nNode.js: v14.17.3\nOS: Windows 10\nAdditional Information:\nThis issue was not present in Angular CLI 12.x on the same environment.\nPlease provide guidance on potential workarounds or necessary configuration adjustments. Thank you!\"", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM44E"}
{"issue_number": 446, "issue_title": "Improve OpenAI Cookbook's Error Handling for API Requests", "issue_body": "OpenAI's API requests within the cookbook provide robust examples for developers integrating AI-powered solutions. However, the error handling process can be enhanced to support more flexible error responses and comprehensive error interception mechanisms. This issue aims to introduce better error handling strategies, including customizable retry logic, enhanced error logging, and documentation improvements. By improving error handling, developers will be able to troubleshoot and recover from errors in their applications more efficiently, leading to more resilient AI-powered systems.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM18S"}
{"issue_number": 442, "issue_title": "Component Not Rendering Updated State in ProductList on Filter Change", "issue_body": "Description\nThe ProductList component in our React application fails to re-render with updated product data when the filter is changed. Although the state appears to update correctly, the UI does not reflect these changes until the page is manually refreshed.\nSteps to Reproduce:\nClone the repository and check out the main branch.\nRun npm install and npm start to launch the application.\nNavigate to the Products page.\nApply any filter to the product list (e.g., by category or price range).\nObserve that the product list does not update according to the selected filter.\nExpected Behavior:\nThe ProductList component should re-render and display the filtered product list immediately after a filter change.\nActual Behavior:\nThe component retains the initial product list, failing to display the filtered results unless the page is refreshed.\nSuggested Fix:\nInvestigate the useEffect hook in ProductList to ensure that the filter state changes trigger a re-render.\nVerify that the filter data is being passed down correctly as props to the ProductList component.\nConsider adding dependencies to the useEffect hook that depend on the filter state.\nEnvironment:\nReact version: 18.2.0\nBrowser: Google Chrome 117, Firefox 118\nAdditional Information:\nThis issue seems to occur consistently in both Chrome and Firefox, especially when navigating directly to the Products page.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "AFA24SCM19P"}
{"issue_number": 441, "issue_title": "Improve Error Handling for HTTP Requests in Angular Application", "issue_body": "Description:\nIn the current Angular application, HTTP error handling could be more robust, especially when dealing with network failures or unauthorized access. This improvement aims to enhance the application's resilience by adding detailed error-handling methods and more user-friendly feedback when HTTP requests fail.\nProposed Solution:\nImplement a global HTTP interceptor to handle errors across the application.\nStandardize error messages for common errors like 404 (Not Found), 500 (Server Error), and 401 (Unauthorized).\nDisplay user-friendly alerts or notifications to inform users about issues, enabling them to take corrective actions.\nAcceptance Criteria:\nInterceptor Implementation: A global HTTP interceptor is created to manage error responses centrally.\nError Messages: Custom error messages are shown based on HTTP status codes.\nUser Feedback: Informative alerts or notifications are displayed for errors, with options for users to retry actions or refresh data if needed.\nImpact:\nThis enhancement will improve the user experience by providing consistent, clear, and actionable error messages, minimizing user confusion during connectivity or authorization issues.\nAdditional Notes:\nThis issue requires modification of the core HTTP handling logic and potential UI changes to incorporate error notifications.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM46D"}
{"issue_number": 431, "issue_title": "Bug: Change Detection Not Triggered After Property Assignment in Reactive Forms", "issue_body": "\"### Description\\n\\nWhen using Angular Reactive Forms, change detection is not triggered after assigning a value to a form control's property inside a component method. As a result, the template does not reflect the updated form control value unless manually calling detectChanges().\\n\\n### Steps to Reproduce:\\n1. Create a reactive form in a component.\\n2. Assign a new value to a form control property (e.g., this.form.get('control').value = 'newValue';).\\n3. Observe that the template is not updated with the new value unless calling ChangeDetectorRef.detectChanges() manually.\\n\\n### Expected Behavior:\\nThe template should automatically update when the form control's value is modified.\\n\\n### Actual Behavior:\\nThe template does not reflect the changes unless manually calling detectChanges().\\n\\n### Environment:\\n- Angular Version: 16.0.0\\n- Node.js Version: 18.16.0\\n- Operating System: Windows 10\\n\\n### Additional Context:\\nThis issue affects real-time updates in forms and results in inconsistent UI behavior, which is critical for dynamic form-heavy applications.\"", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "RFA24SCM49C"}
{"issue_number": 430, "issue_title": "Bug: Incorrect Parameters in Fine-Tuning Example for GPT-3.5-turbo", "issue_body": "The fine-tuning example for gpt-3.5-turbo in the OpenAI Cookbook contains incorrect parameters for the fine_tune function. The example fails when attempting to pass certain parameters that are either deprecated or not supported for the gpt-3.5-turbo model.\nSteps to Reproduce:\n\nFollow the fine-tuning example in the gpt-3.5-turbo section of the OpenAI Cookbook.\nRun the example code as provided.\n\n\nObserve the error\n\n\n", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "NFA24SCM09S"}
{"issue_number": 429, "issue_title": "Add Detailed Example for GPT-4 Fine-Tuning with Hugging Face Transformers", "issue_body": "It would be helpful to add a detailed, step-by-step example in the OpenAI Cookbook for fine-tuning GPT-4 using Hugging Face's Transformers library.\nSpecifically, the example should cover:\n\nSetting up a fine-tuning environment (including dependencies)\nDownloading and preparing a dataset for fine-tuning\nFine-tuning a GPT-4 model with Hugging Face's Trainer API\nEvaluating the model's performance on a validation set\nSaving and loading the fine-tuned model for inference\n\nThis addition would greatly benefit users looking for more advanced customization of their GPT models. Links to relevant documentation and best practices for optimization during fine-tuning would also be appreciated.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "VFA24SCM31V"}
{"issue_number": 426, "issue_title": "Bug: ComponentDidUpdate Not Triggering on State Update", "issue_body": "Description:\\ncomponentDidUpdate is not being called after a state update in a functional component using React hooks.\\n\\n### Steps to Reproduce:\\n1. Create a functional component with useState and useEffect.\\n2. Trigger a state update using the setState function.\\n3. Observe that componentDidUpdate or similar useEffect callback is not fired.\\n\\n### Expected Behavior:\\nThe useEffect hook should be triggered after the state change.\\n\\n### Actual Behavior:\\nThe state updates successfully, but the useEffect callback is not executed as expected.\\n\\n### Environment:\\n- React version: 18.0.0\\n- Browser: Chrome 116\\n- Operating System: macOS 13.0\\n\\n### Additional Information:\\nThis issue appears when using concurrent rendering, and similar behavior was not present in earlier versions of React.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM49R"}
{"issue_number": 424, "issue_title": "Bug: useEffect doesn't trigger on state change in StrictMode", "issue_body": "Description:\nThe useEffect hook fails to trigger when state changes in React's StrictMode. This behavior occurs in version 18.0.0 and seems inconsistent with expected lifecycle behavior.\nSteps to Reproduce:\n\nWrap the application with React.StrictMode.\nDefine a state using useState and modify it.\nSet up an effect with useEffect to trigger on the state change.\nNotice that the effect does not run when the state updates.\n\nExpected Behavior:\nThe useEffect hook should trigger on state changes when running under StrictMode.\nActual Behavior:\nThe useEffect hook does not fire when the state changes, leading to unexpected component behavior.\nEnvironment:\n\nReact version: 18.0.0\nBrowser: Chrome 94\nOperating system: macOS Big Sur 11.6\n\nAdditional Context:\nThis issue only occurs under React.StrictMode. It works as expected outside of StrictMode.", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "AFA24SCM57M"}
{"issue_number": 422, "issue_title": "Error with React Component State Persistence after Hot Reload", "issue_body": "Description: After implementing hot reload in my React project, the state of components does not persist as expected. Every time the page reloads during development, the state is reset, leading to loss of user input and component data.\nSteps to Reproduce:\n\nCreate a React component with a state hook (useState).\nImplement hot reloading in the development environment.\nModify a component and observe that the state resets on each hot reload.\n\nExpected Behavior: The component state should persist even after hot reload during development.\nActual Behavior: The component state resets to the initial state after every reload, causing loss of any modifications to the state.\nEnvironment: React version: 18.2.0, Node version: 16.14.2\nBrowser: Chrome 95\nPossible Solution: Investigate whether the state persistence during hot reload can be achieved through a different configuration or workaround in React, possibly by leveraging react-refresh more effectively.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "RFA24SCM19O"}
{"issue_number": 421, "issue_title": "Field Detection: Request for Documentation Clarification", "issue_body": "An issue has been detected in the 'Field' phase, originating from the 'Documentation' phase.\nThere are areas in the documentation that require clarification to ensure that all team members have a clear understanding of the code implementation.\nThis issue is marked as medium priority and is currently in progress.\nPlease review the documentation and provide the necessary clarifications to improve team collaboration.", "created_at": "2024-10-25", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Medium", "Status:InProgress"], "State": "open", "Author": "HFA24SCM42P"}
{"issue_number": 419, "issue_title": "Unhandled Promise Rejection Warning in useEffect Hook", "issue_body": "I'm encountering an unhandled promise rejection warning when using the useEffect hook in my React component. The warning appears even though I've added error handling for the promise.\\n\\n### Steps to Reproduce\\n1. Create a new React component.\\n2. Use the useEffect hook to fetch data from an API.\\n3. Log the response and any errors.\\n\\n### Expected Behavior\\nNo warnings should appear in the console if errors are handled properly.\\n\\n### Actual Behavior\\nAn unhandled promise rejection warning appears in the console, indicating that the promise is not being handled correctly.\\n\\n### Code Example\\njavascript\\nimport React, { useEffect, useState } from 'react';\\n\\nconst MyComponent = () => {\\n    const [data, setData] = useState(null);\\n\\n    useEffect(() => {\\n        const fetchData = async () => {\\n            try {\\n                const response = await fetch('https://api.example.com/data');\\n                const result = await response.json();\\n                setData(result);\\n            } catch (error) {\\n                console.error('Error fetching data:', error);\\n            }\\n        };\\n        fetchData();\\n    }, []);\\n\\n    return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\\n};\\n\\n\\n### Additional Information\\n- React version: 17.0.2\\n- Browser: Chrome 93.0.4577.82\\n- The issue seems to occur consistently on this specific API endpoint.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Field", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM20N"}
{"issue_number": 418, "issue_title": "Feature Request: Improved Context API Documentation", "issue_body": "The current documentation for the Context API in React is somewhat lacking in detailed examples and use cases. It would be beneficial to include more comprehensive examples that demonstrate how to effectively use Context for managing global state in a React application. Additionally, including best practices and common pitfalls would help new users avoid common mistakes.", "created_at": "2024-10-25", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase: Requirements"], "State": "open", "Author": "EFA24SCM03M"}
{"issue_number": 412, "issue_title": "Improve Documentation for React Hooks", "issue_body": "The documentation for React Hooks could benefit from more examples and clearer explanations, particularly around custom hooks and their use cases. Many users, especially those new to React, struggle to grasp how to effectively implement hooks in their projects. Enhancing the documentation with practical examples and detailed descriptions would greatly assist developers in understanding and utilizing React Hooks more effectively.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:InProgress"], "State": "closed", "Author": "RFA24SCM62N"}
{"issue_number": 411, "issue_title": " \"Bug: Angular Component Lifecycle Hook 'ngOnInit' Fails to Trigger After Router Navigation\",   ", "issue_body": "\"### Description\\nAfter navigating between routes using Angular Router, the 'ngOnInit' lifecycle hook fails to trigger on the destination component. This issue occurs intermittently when using lazy-loaded modules. It appears that the component remains in a cached state, preventing the lifecycle method from firing.\\n\\n### Steps to Reproduce\\n1. Create two routes, one with a lazy-loaded component.\\n2. Navigate from the first route to the lazy-loaded route.\\n3. Observe that the 'ngOnInit' method is not triggered.\\n\\n### Expected Behavior\\nThe 'ngOnInit' hook should execute every time the component is navigated to, ensuring that initialization logic runs as expected.\\n\\n### Actual Behavior\\nThe 'ngOnInit' hook does not execute, leading to incomplete initialization of the component.\\n\\n### Environment\\n- Angular Version: 16.0.0\\n- Browser: Chrome Version 129.0.0\\n- Operating System: Windows 10\\n\\n### Possible Workaround\\nUsing the 'OnDestroy' lifecycle hook to force component re-initialization works as a temporary workaround but is not ideal. Disabling router caching also mitigates the issue but impacts performance.\\n\\n### Additional Information\\nThis behavior seems to be linked to lazy-loading and Angular's view caching mechanism. A similar issue was reported in #12345 but marked as resolved, though it appears to have resurfaced in the latest version.\"", "created_at": "2024-10-25", "closed_at": "2024-10-26", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "DreshaBommana"}
{"issue_number": 410, "issue_title": "Bug: Incorrect Output in Embedding API Example for Large Texts", "issue_body": "In the Embedding API example provided, when processing large texts (over 500 tokens), the API occasionally returns incorrect or incomplete embeddings. This issue seems to be related to text chunking but isn't explicitly handled in the example code.\\n\\n### Steps to Reproduce:\\n1. Use the Embedding API with a large input text exceeding 500 tokens.\\n2. Run the provided example from the documentation.\\n3. Observe that the output embeddings are sometimes truncated or not aligned with the input text.\\n\\n### Expected Behavior:\\nThe API should return complete embeddings for all input chunks, even for large texts.\\n\\n### Suggested Fix:\\n- Include a chunking mechanism in the example code to ensure large texts are split appropriately and all embeddings are generated.\\n- Update the documentation to explain how to handle texts exceeding token limits.", "created_at": "2024-10-25", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:pendingReview"], "State": "closed", "Author": "SFA24SCM64S2"}
{"issue_number": 408, "issue_title": "Inconsistent rendering of SVG elements in responsive layouts with D3.js", "issue_body": "Problem:\\nWhen using D3.js to render SVG elements within a responsive layout, elements like circles, paths, and rectangles are inconsistently rendered, particularly when the container's size changes dynamically (e.g., browser window resizing or layout changes triggered by CSS media queries).\\n\\n### Expected Behavior:\\nSVG elements should resize or adjust dynamically based on the container's dimensions while maintaining their proportions and original alignment.\\n\\n### Actual Behavior:\\nThe SVG elements sometimes lose their correct positioning or proportions, leading to distorted visuals, especially when the container shrinks or expands rapidly. In some cases, elements completely disappear from view.\\n\\n### Steps to Reproduce:\\n1. Create an SVG container using D3.js with width and height set as percentages for responsiveness.\\n2. Add basic shapes (e.g., circles, rectangles) to the SVG.\\n3. Resize the browser window or trigger a CSS media query that changes the container's dimensions.\\n\\n### Code Snippet:\\njavascript\\nconst svg = d3.select('body')\\n  .append('svg')\\n  .attr('width', '100%')\\n  .attr('height', '100%');\\n\\nsvg.append('circle')\\n  .attr('cx', 50)\\n  .attr('cy', 50)\\n  .attr('r', 40);\\n\\n\\n### Environment:\\n- D3.js version: v7.4.4\\n- Browser: Chrome 116.0.5845.111\\n- OS: macOS Ventura 13.2\\n\\n### Additional Context:\\nThis issue appears to be related to how D3.js calculates the initial sizes and positions of elements when width and height are specified as percentages. A workaround is to manually trigger a redraw or rebind the data after resizing, but a more native solution would be ideal.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "open", "Author": "SFA24SCM76G"}
{"issue_number": 407, "issue_title": "Incorrect Output Format in Chatbot Example for GPT-4", "issue_body": "In the chatbot example located in the 'examples/chatbot.py' script, the output format does not match the expected JSON structure when receiving responses from the GPT-4 model. The issue arises when a user inputs a query with nested JSON, and the response is a plain text instead of the required formatted JSON. Steps to reproduce the issue:\n\nRun the chatbot example.\nInput a query with nested JSON.\nObserve that the response is not formatted as expected.\n\nProposed solution:\n\nModify the response handling in the script to ensure it properly parses and returns JSON output when required.\n\nEnvironment:\n\nPython 3.10\nOpenAI library version: 0.6.0\nGPT-4\n\nAdditional context:\n\nThis issue was noticed in version 0.6.0, after updating from 0.5.0 where the output was correctly formatted.\n", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "RFA24SCM86S"}
{"issue_number": 406, "issue_title": "Error when using ngFor with trackBy function causing unexpected behavior", "issue_body": "Description:\\nWhen using the ngFor directive with a custom trackBy function, unexpected behavior occurs where the list is not properly updated after changes to the tracked items. Specifically, elements are not correctly removed or updated in the DOM when the data changes.\\n\\n### Steps to Reproduce:\\n1. Create a list using ngFor with a trackBy function.\\n2. Update the data bound to the list by removing or modifying some items.\\n3. Notice that the DOM is not properly updated according to the changes in the data.\\n\\n### Expected Behavior:\\nThe DOM should correctly reflect the changes in the data when using ngFor with a trackBy function.\\n\\n### Actual Behavior:\\nSome elements are not removed or updated properly in the DOM, leading to inconsistencies between the UI and the underlying data model.\\n\\n### Versions:\\nAngular Version: 12.0.0\\nNode Version: 14.17.0\\nBrowser: Chrome 93\\n\\n### Additional Information:\\nThe issue only occurs when using trackBy. Without trackBy, the list updates as expected", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "OFA24SCM90B"}
{"issue_number": 404, "issue_title": "Bug: State update not triggering re-render in functional component with useState", "issue_body": "There appears to be a bug in functional components where state updates using the useState hook do not trigger a re-render consistently. This issue occurs intermittently, especially when multiple state updates are performed in quick succession. The expected behavior is that updating the state should cause the component to re-render, reflecting the latest state values. However, the actual behavior is that the component doesn't always re-render, leading to inconsistent UI updates. This issue is particularly noticeable in components with complex state logic. Environment details: React Version 18.0.0, Browser: Chrome 100.0.4896.75, Node Version: 16.15.0.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM64P"}
{"issue_number": 402, "issue_title": "Bar Chart Rendering Issue with Negative Values", "issue_body": "Description: \"When using the D3.js library to render a bar chart, bars corresponding to negative values are not displayed correctly. The bars are expected to extend below the x-axis, but instead, they disappear or overlap with positive value bars.\",\n\"Steps to Reproduce\": [\n\"1. Create a simple bar chart using D3.js with both positive and negative data points.\",\n\"2. Use a linear scale for the y-axis and ensure the domain covers both positive and negative values.\",\n\"3. Render the chart.\"\n\"Expected Behavior\": \"Bars for negative values should extend below the x-axis (or specified zero-line). Positive and negative bars should not overlap.\",\n\"Actual Behavior\": \"Negative value bars are either not visible or overlap with bars for positive values.\",\n\"Code Sample\": \"const data = [10, -5, 15, -20];\\nconst svg = d3.select('svg');\\nconst x = d3.scaleBand().domain(d3.range(data.length)).range([0, 400]).padding(0.1);\\nconst y = d3.scaleLinear().domain([-20, 20]).range([200, 0]);\\nsvg.selectAll('rect')\\n   .data(data)\\n   .enter()\\n   .append('rect')\\n   .attr('x', (d, i) => x(i))\\n   .attr('y', d => y(Math.max(d, 0)))\\n   .attr('height', d => Math.abs(y(d) - y(0)))\\n   .attr('width', x.bandwidth());\",\n\"Possible Solution\": \"Ensure that the y attribute calculation accounts for both positive and negative values properly. Use a logic to place negative bars starting from the zero-line.\",\n\"Environment\": \n  \"D3.js version\": \"v7.0\",\n  \"Browser\": \"Chrome 94\",\n  \"OS\": \"Windows 10\"\n\n\"Additional Information\": \"This issue affects visual consistency when plotting mixed datasets. Any workaround or official fix would be helpful. Thank you!\n", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "SFA24SCM80K"}
{"issue_number": 400, "issue_title": "Bug: Change detection not triggering on input property updates in OnPush strategy", "issue_body": "Description\\nWhen using the OnPush change detection strategy, input property changes are not triggering the change detection cycle as expected. This issue occurs intermittently and seems to depend on the timing of the input updates.\\n\\n## Steps to Reproduce\\n1. Create a component with the OnPush change detection strategy.\\n2. Bind an input property from a parent component and update its value asynchronously.\\n3. Observe that the child component does not detect changes to the input property unless manually triggering detectChanges().\\n\\n## Expected Behavior\\nThe component should trigger change detection automatically when the input property is updated, even with the OnPush strategy.\\n\\n## Environment\\n- Angular version: 15.1.0\\n- Node.js version: 16.15.0\\n- Browser: Firefox 102.0\\n\\n## Possible Solution\\nReview the current handling of async input property updates in OnPush mode and consider triggering change detection when input bindings change asynchronously.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Field", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "MFA24SCM58D"}
{"issue_number": 394, "issue_title": "D3.js Tooltip Positioning Incorrect for Small Window Sizes", "issue_body": "Description:\nThe tooltip in D3 visualizations is positioned incorrectly when the browser window is resized to smaller dimensions. It appears partially off-screen, making it difficult to read.\nSteps to Reproduce:\n\nCreate a basic D3 visualization with a tooltip.\nResize the browser window to a smaller size (e.g., mobile screen width).\nHover over a data point to trigger the tooltip.\n\nExpected Behavior:\nThe tooltip should be fully visible within the viewport, adjusting its position dynamically based on the window size.\nActual Behavior:\nThe tooltip is cut off, often appearing outside the visible area of the browser window.\nEnvironment:\n\nD3.js version: 7.0.0\nBrowser: Chrome 118, Firefox 117\nOS: macOS Ventura 13.0\n\nPossible Solution:\nAdjust the tooltip positioning logic to account for the viewport's dimensions when the window is resized. This could be done by calculating the remaining space and repositioning the tooltip accordingly.\nAdditional Context:\nThis issue may affect users viewing D3 visualizations on mobile devices or when resizing their browser windows to smaller widths.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "AFA24SCM09K8"}
{"issue_number": 393, "issue_title": "Bug: React Router Navigation Breaks on Page Refresh", "issue_body": "\"Description\": \"The application breaks when refreshing a page that uses React Router's dynamic routes. The issue occurs after upgrading to React Router v6.\",\n\"Steps to Reproduce\": [\n\"1. Set up a route using React Router with a dynamic parameter (e.g., /users/:id).\",\n\"2. Navigate to the page using the Link component.\",\n\"3. Refresh the page directly in the browser.\"\n],\n\"Expected Behavior\": \"The page should load correctly and display the content for the specific route after a refresh.\",\n\"Actual Behavior\": \"A 404 error or a blank page is displayed after refreshing the page.\",\n\"Environment\": {\n\"React Version\": \"18.0.0\",\n\"React Router Version\": \"6.0.2\",\n\"Node Version\": \"16.14.2\",\n\"Browser\": \"Firefox 91.0\"\n},\n\"Additional Context\": \"This issue does not occur in React Router v5. The issue appears to be related to how dynamic routing is handled after the refresh.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "RFA24SCM06P"}
{"issue_number": 392, "issue_title": "Error in Router Navigation with Lazy-Loaded Modules", "issue_body": "Issue Description\\nWhen navigating between lazy-loaded modules using the Angular Router, the navigation occasionally fails with a Cannot match any routes error. This issue arises inconsistently, and seems to occur after multiple navigations.\\n\\n### Steps to Reproduce\\n1. Create an Angular application with multiple lazy-loaded modules.\\n2. Use Angular Router to navigate between these modules.\\n3. Observe the error occurring intermittently.\\n\\n### Expected Behavior\\nThe router should successfully navigate between all modules without throwing any errors.\\n\\n### Actual Behavior\\nThe router throws an error Cannot match any routes intermittently after navigating between modules multiple times.\\n\\n### Environment Details\\n- Angular Version: 14.2.0\\n- Browser: Chrome 104.0\\n- OS: Windows 10\\n\\n### Additional Information\\nThe issue seems to occur more frequently when using routerLink with dynamic parameters.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "CFA24SCM94N"}
{"issue_number": 391, "issue_title": "Improve Form Validation for User Input in Registration Component", "issue_body": "The current registration form in the Registration.js component lacks proper validation for user inputs such as email, password, and username. Users can submit invalid data, leading to potential bugs and poor user experience\nProposed Solution:\n\nImplement real-time validation for email, ensuring it follows the correct format (e.g., user@example.com).\nEnforce password requirements (e.g., minimum 8 characters, one special character).\nAdd checks to ensure the username is unique and follows length constraints.\nDisplay validation error messages next to the relevant form fields in a user-friendly manner.\n\nAcceptance Criteria:\n\nThe form should prevent submission if any field contains invalid data.\nValidation errors should be displayed in real-time.\nError messages should be clear and instructive.\nThe form should be fully accessible (keyboard navigable, screen reader friendly).\nEnsure compatibility with the latest version of React.\n\nAdditional Context: This issue is related to user feedback collected in the last sprint, where many users reported difficulties with the form validation on mobile devices.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "open", "Author": "AFA24SCM97N"}
{"issue_number": 390, "issue_title": "Optimize React Component Re-rendering for Improved Performance", "issue_body": "React's component re-rendering mechanism ensures that UI updates efficiently when state or props change. However, in certain cases, unnecessary re-renders can lead to performance bottlenecks, especially in large applications. This issue proposes enhancing React's internal diffing algorithm and providing better documentation for developers to identify and prevent redundant re-renders. Additionally, introducing more granular tools for performance profiling and visualizing component re-rendering patterns would help developers optimize their applications, leading to faster load times and improved user experience.", "created_at": "2024-10-24", "closed_at": "2024-10-27", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "MFA24SCM60D"}
{"issue_number": 388, "issue_title": "Add Support for Environment-Specific Configuration in Angular CLI", "issue_body": "Currently, managing environment-specific configuration in Angular requires manually setting up multiple environment files (e.g., environment.prod.ts, environment.dev.ts). It would be helpful to improve the Angular CLI to natively support environment-specific configurations for different build environments without manual intervention. This could include:\n\nA more streamlined way to define environment-specific settings in angular.json.\nA CLI flag for specifying custom environments during the build process.\nIntegration with popular cloud services or deployment platforms for automatic configuration.\n\nAdding this feature would simplify the workflow for developers who frequently switch between environments during development, testing, and production.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "SFA24SCM04D"}
{"issue_number": 385, "issue_title": "Enhancement: Add Example for Fine-Tuning GPT-3 on Custom Dataset", "issue_body": "Description\\n\\nI would like to propose an enhancement to the OpenAI Cookbook by adding a detailed example of how to fine-tune the GPT-3 model on a custom dataset. This would be extremely helpful for users looking to tailor the model to specific tasks or domains.\\n\\n## Proposed Changes\\n\\n- Include a step-by-step guide for preparing a custom dataset.\\n- Provide code snippets for data preprocessing, training, and evaluation.\\n- Share best practices for choosing hyperparameters.\\n- Discuss common pitfalls and troubleshooting tips.\\n\\n## Benefits\\n\\nAdding this example will not only improve the usability of the cookbook but also empower users to get better results from the GPT-3 model in their specific applications. \\n\\n## Additional Information\\n\\nIf possible, please include links to relevant resources or documentation that can aid in understanding the fine-tuning process.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM49T"}
{"issue_number": 384, "issue_title": "Add Example for Using GPT-4o in Batch Processing", "issue_body": "Goal of this issue \\n Provide a detailed example of how to use GPT-4o for batch processing tasks in the OpenAI Cookbook.\\n\\n### Resources\\n- Refer to the existing guide on 'Batch processing with the Batch API' by Katia Gil Guzman (April 24, 2024) for context and structure.\\n- Utilize the OpenAI API documentation for GPT-4o.\\n\\n### Deliverables\\n- A self-contained example script demonstrating batch processing with GPT-4o.\\n- Documentation explaining the setup, execution, and expected outcomes of the example.\\n- Ensure the example is added to the relevant section in the OpenAI Cookbook.\\n\\n### Additional Information\\nThis example will help users understand how to efficiently use GPT-4o for large-scale tasks, enhancing the utility of the OpenAI Cookbook.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "SFA24SCM90S"}
{"issue_number": 381, "issue_title": "Unexpected Behavior in Reactive Forms Validation", "issue_body": "Repo Name: angular\\n\\nDescription:\\nWhen using Angular's Reactive Forms with custom validators, the form control does not update its validation status after dynamically changing the validator function. As a result, the form appears valid or invalid incorrectly based on outdated validation logic.\\n\\nSteps to Reproduce:\\n1. Create a reactive form with a form control and apply a custom validator.\\n2. Dynamically change the custom validator function after the form is initialized.\\n3. Observe that the validation status of the control does not update correctly.\\n\\nExpected Behavior:\\nThe form control's validation status should immediately update when the validator function is changed dynamically.\\n\\nActual Behavior:\\nThe form control's validation status remains unchanged and does not reflect the new validation logic.\\n\\nEnvironment:\\n- Angular Version: 12.1.1\\n- Browser: Chrome v94\\n- OS: Windows 10\\n\\nPriority: High\\nStatus: In Progress\\nCategory: Bug\\nDetection Phase: Testing\\nOrigination Phase: Coding", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "BFA24SCM87C"}
{"issue_number": 377, "issue_title": "Bug: Example for Fine-tuning GPT-3.5 Model Using Python SDK Fails with API Error", "issue_body": "Description:\nThe fine-tuning example in the OpenAI Cookbook for GPT-3.5 using the Python SDK returns an API error when submitting a fine-tuning job. The error indicates invalid parameters even when following the example step-by-step.\nSteps to Reproduce:\n\nFollow the fine-tuning example for GPT-3.5 from the repository.\nSet up the necessary training data and authentication as per the example.\nSubmit the fine-tuning job using the openai.FineTune.create() function.\nObserve the API response error.\n\nExpected Behavior:\nThe fine-tuning job should be submitted successfully, and training should start without errors.\nActual Behavior:\nAn API error is returned, with the message: Error: Invalid parameters provided for fine-tuning.\nReproducible Demo:\n[Provide code snippet or link to the fine-tuning example]\nEnvironment:\n\nOpenAI SDK version: 0.27.0\nPython version: 3.10.5\nOS: Ubuntu 20.04\n\nAdditional Context:\nThis issue occurs even when using properly formatted training data as shown in the example. I suspect a discrepancy between the API version used in the cookbook and the current API requirements.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "RFA24SCM68T"}
{"issue_number": 376, "issue_title": "Enhancement: Add Examples for Handling Large Datasets in GPT Models", "issue_body": "It would be beneficial to include examples in the cookbook on how to handle large datasets when working with GPT models. Specifically, some users may want to know best practices for:\n\nChunking large datasets to avoid token limitations.\nEfficient batch processing with GPT.\nUtilizing memory and storage effectively while working with large files.\n\nIncluding code snippets and a step-by-step explanation of these processes would make it easier for users to implement GPT for large-scale data processing tasks.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "YFA24SCM47P"}
{"issue_number": 375, "issue_title": "Enhancement Request: Add Pagination to API Responses", "issue_body": "Currently, the API responses return all results in a single response, which can lead to performance issues with large datasets. It would be beneficial to implement pagination for the API responses. This would allow users to request a specific number of results per page and navigate through them using page numbers or tokens. Additionally, providing clear documentation on how to utilize this feature would greatly enhance user experience.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Testing", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "TFA24SCM43B"}
{"issue_number": 373, "issue_title": "Enhance Component Lifecycle Documentation", "issue_body": "The current documentation on React component lifecycle methods lacks detailed examples and best practices.\nIt would be beneficial to provide additional information on the following:\n1. A more comprehensive explanation of each lifecycle method.\n2. Examples showcasing real-world use cases for each method.\n3. Common pitfalls and performance considerations when using lifecycle methods.\nEnhancing this documentation will greatly assist developers in understanding and effectively utilizing React's component lifecycle features.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "open", "Author": "JFA24SCM99M"}
{"issue_number": 371, "issue_title": "Enhancement Request: Add Example for Fine-Tuning GPT-3 on Custom Datasets", "issue_body": "I would like to request an enhancement to the OpenAI Cookbook by adding a detailed example demonstrating how to fine-tune GPT-3 on custom datasets. This addition would greatly benefit developers looking to leverage GPT-3's capabilities for specific applications. Many users are interested in fine-tuning GPT-3 but may lack clear guidance on the process.\nProposed steps include outlining the prerequisites for fine-tuning, providing a step-by-step guide on setting up the environment, including sample code snippets demonstrating the fine-tuning process, and sharing best practices for evaluating model performance post-fine-tuning.\nAdding this example will enhance the usability of the Cookbook and provide a practical reference for developers aiming to customize GPT-3 for their specific needs. Thank you for considering this enhancement!", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM02G"}
{"issue_number": 368, "issue_title": "Improve React's useEffect Hook Behavior on State Updates", "issue_body": "React's useEffect hook is widely used for handling side effects in functional components. However, there seems to be an inconsistency in how useEffect behaves when state is updated asynchronously, particularly in React 18. This issue aims to enhance the behavior of the useEffect hook to ensure it triggers consistently when the state in its dependency array changes, regardless of whether the state is updated synchronously or asynchronously. Improving the reliability of useEffect will help developers build more predictable and stable applications using React.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "JFA24SCM91M"}
{"issue_number": 366, "issue_title": "NgModel not updating input field when value changes programmatically", "issue_body": "Description\nWhen updating the value of an input field programmatically, the bound NgModel does not reflect the updated value. This issue occurs specifically when the change happens outside of Angular's lifecycle hooks, such as through an external library or DOM manipulation.\nSteps to Reproduce\n\nCreate an input field with an NgModel directive.\nProgrammatically update the input value using JavaScript or a third-party library.\nObserve that the NgModel does not get updated.\n\nExpected Behavior\nThe NgModel should update to reflect the new value when the input field is changed programmatically.\nActual Behavior\nThe NgModel remains unchanged even though the input value is modified.\nEnvironment Angular Version: 16.1.0\n\nNode.js Version: 18.14.0\nBrowser: Chrome 116\n\nAdditional Information\nThe issue does not occur when the change is initiated through Angular forms or bindings.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "AFA24SCM63A"}
{"issue_number": 365, "issue_title": "Error in Example Script for Text Completion API", "issue_body": "Body\": \"### Issue Description\\nThe example script provided in the documentation for the Text Completion API seems to produce incorrect responses. When running the code using the latest OpenAI Python package, the completion results are inconsistent and sometimes return empty responses. \\n\\n### Steps to Reproduce\\n1. Follow the example in the cookbook for the Text Completion API.\\n2. Install the latest OpenAI Python package (openai version 0.10.0).\\n3. Run the script as per the instructions.\\n\\n### Expected Behavior\\nThe model should return a coherent text completion response based on the prompt provided.\\n\\n### Actual Behavior\\nThe model sometimes returns an empty or irrelevant response.\\n\\n### Environment Details\\n- Python version: 3.9\\n- OpenAI Python package version: 0.10.0\\n- Operating System: macOS Big Sur 11.6\\n\\n### Suggested Fix\\nThere may be an issue with the API response handling in the example script. A better error handling mechanism could help diagnose the issue.\"", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "MFA24SCM37S"}
{"issue_number": 357, "issue_title": "Clarification Needed on Fine-Tuning GPT-3.5 with Custom Datasets", "issue_body": "In the fine-tuning section of the OpenAI-Cookbook, the example provided for fine-tuning GPT-3.5 lacks detailed explanation on the data formatting requirements for custom datasets. Specifically, it would be helpful to have more information on: 1. Expected input structure (e.g., formatting for conversation datasets, JSONL format specifications). 2. Handling larger datasets: Best practices for batching, sharding, or other methods to optimize the fine-tuning process. 3. Limitations on token length or model capacity when training with large custom datasets. Additionally, an example of fine-tuning using a multi-turn conversational dataset would be highly appreciated. This would make it easier to replicate the results and understand the nuances of fine-tuning on different types of data. Thanks in advance for your help!", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "TFA24SCM73K"}
{"issue_number": 350, "issue_title": "\"title\": \"Bug: Component crashes on rendering with undefined props\",", "issue_body": "{\n\"title\": \"Bug: Component crashes on rendering with undefined props\",\n\"body\": \"### Steps to Reproduce\\n1. Create a React component that relies on props.\\n2. Pass an undefined value for one of the required props.\\n3. Render the component.\\n\\n### Expected Behavior\\nThe component should handle undefined props gracefully, without crashing the application.\\n\\n### Actual Behavior\\nThe component throws a runtime error when undefined props are passed.\\n\\n### Environment\\n- React version: 17.0.2\\n- Browser: Chrome 94.0\\n- Operating System: macOS 11.6\\n\\n### Possible Solution\\nAdd default", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Critical", "Status:InProgress", "OriginationPhase.Design"], "State": "closed", "Author": "SFA24SCM60C"}
{"issue_number": 345, "issue_title": "feat(forms): Add real-time validation feedback for reactive forms", "issue_body": "\"## Description\\nPropose adding a new feature to Angular's reactive forms module that provides immediate visual feedback during form validation without requiring manual subscription to value changes.\\n\\n## Current Behavior\\nCurrently, developers need to manually subscribe to form control changes and implement custom logic to show validation messages in real-time.\\n\\n## Desired Behavior\\n- Automatic real-time validation feedback as users type\\n- Built-in validation state indicators (valid/invalid/pending)\\n- Easy integration with template-driven validation messages\\n\\n## Example Usage\\ntypescript\\n@Component({\\n  template: \\n    <form [formGroup]=\\\"userForm\\\">\\n      <input formControlName=\\\"email\\\" showValidation>\\n      <!-- Validation messages appear automatically -->\\n    </form>\\n  \\n})\\n\\n\\n## Technical Details\\n- Add new directive showValidation\\n- Implement ValidationFeedback service\\n- Support custom validation message templates\\n\\n## Benefits\\n- Improved user experience\\n- Reduced boilerplate code\\n- Consistent validation behavior across applications\\n\\n## Additional Context\\nThis feature would align with Angular's goal of providing more out-of-the-box functionality while maintaining flexibility for custom implementations.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Bug", "Category:Requirements", "Priority:Critical", "Status:InProgress", "DetectionPhase.Design"], "State": "open", "Author": "AFA24SCM63A"}
{"issue_number": 344, "issue_title": "Bug: State updates not re-rendering components in functional components using hooks", "issue_body": "Description:\\nIn some functional components using React hooks, state updates are not triggering re-renders as expected. This issue occurs intermittently and seems to be related to asynchronous updates or dependency issues in the useEffect hook.\\n\\n### Steps to reproduce:\\n1. Create a functional component using useState and useEffect hooks.\\n2. Update the state using the setter function from useState.\\n3. Notice that the component doesn't re-render after the state update.\\n\\n### Expected behavior:\\nThe component should re-render whenever the state is updated.\\n\\n### Actual behavior:\\nThe state is updated, but the component does not re-render.\\n\\n### Environment:\\n- React version: 18.2.0\\n- Browser: Chrome 117\\n- OS: Windows 11\\n\\n### Possible Solution:\\nThere might be an issue with how the state updates are being batched or how useEffect dependencies are being handled. Further investigation is needed to isolate the problem.\\n\\n### Additional Information:\\nNo errors or warnings appear in the console. Adding console.log statements shows that the state is updating correctly, but the component does not re-render.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "RFA24SCM60H"}
{"issue_number": 341, "issue_title": " Issue Title: Improve AI Model Deployment Example with Docker Support", "issue_body": "Description:\nThe current AI model deployment example in the OpenAI-cookbook is an excellent resource for understanding how to deploy models using standard methods. However, it lacks support for Docker, which is increasingly becoming a standard for deploying applications in a consistent environment.\nFeature Request:\nI would like to request the addition of a Docker-based deployment example that illustrates how to containerize an AI model and deploy it efficiently. This would greatly benefit users who prefer using Docker for scalability and ease of deployment.\nProposed Changes:\nDockerfile Creation: Provide a Dockerfile that includes all necessary dependencies for the AI model.\nDeployment Instructions: Update the README with step-by-step instructions on how to build and run the Docker container.\nExample Code: Include example code snippets that demonstrate how to interact with the model once it\u2019s deployed in a Docker container.\nTesting with Docker Compose: Optionally, create a docker-compose.yml file to showcase how to run multiple services, if applicable.\nBenefits:\nEnhances usability for developers familiar with containerization.\nStreamlines the deployment process, making it easier to manage dependencies and environment configurations.\nEncourages best practices in deployment strategies.\nAdditional Notes:\nIf possible, including examples of scaling the deployment or integrating with orchestration tools like Kubernetes would also be beneficial.\nThank you for considering this enhancement! I believe it will significantly improve the overall value of the deployment examples in the OpenAI-cookbook.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:pendingReview"], "State": "closed", "Author": "VFA24SCM76E"}
{"issue_number": 333, "issue_title": "Angular", "issue_body": "{\n\"Title\": \"Enhance Angular's Error Logging Mechanism\",\n\"Body\": \"The current error logging mechanism in Angular could be improved to provide more detailed diagnostic information, especially for production environments. This issue aims to introduce configurable log levels (error, warning, info) and the ability to send error logs to an external monitoring service. Additionally, this will improve debugging capabilities for both developers and system administrators, reducing time spent on identifying and fixing issues.\"\n}", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "AFA24SCM13V"}
{"issue_number": 332, "issue_title": "Bug: Unexpected Behavior with useEffect Cleanup in Concurrent Mode", "issue_body": "Describe the bug In React's Concurrent Mode, the cleanup function inside useEffect is not always called consistently when the component unmounts. This leads to potential memory leaks or unintended side effects in components that rely on cleanup. Steps to reproduce. Enable Concurrent Mode in React.2. Create a component that uses useEffect with a cleanup function.\\n3. Trigger an update that causes the component to unmount.\\n4. Notice that the cleanup function is not reliably called. Expected behavior The useEffect cleanup function should always be called when the component unmounts, even in Concurrent Mode. Environment- React version: 18.2.0- Browser: Chrome 116- Operating System: macOS Ventura 13.5 Additional context This issue might be related to how React manages updates in Concurrent Mode. Ensuring consistent behavior for useEffect across different modes will improve reliability for developers building complex apps.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "open", "Author": "MFA24SCM60D"}
{"issue_number": 330, "issue_title": "Bug: Incomplete Token Management in GPT-4 Python SDK Examples Leading to RateLimitError", "issue_body": "Description:\nThe Python SDK examples provided in the OpenAI-cookbook repository do not adequately handle token management when using GPT-4 models, leading to potential 'RateLimitError' or 'InvalidRequestError' when prompts or generated responses exceed the allowed token count. This issue affects both beginners and advanced users who follow the examples without being aware of the token limits imposed by GPT-4, causing unexpected interruptions and failures in applications that rely on generating longer responses or processing larger inputs.\nSteps to Reproduce:\n\nClone the OpenAI-cookbook repository and navigate to the Python SDK example for using GPT-4.\nUse the provided example code for generating a text completion with the GPT-4 model.\nInput a prompt that is close to the maximum token limit or generates a lengthy response (e.g., a prompt with detailed context or multiple paragraphs).\nExecute the code.\nObserve the occurrence of 'RateLimitError' or 'InvalidRequestError' due to exceeding the token limit.\n\nExpected Behavior:\nThe examples should include a robust token management strategy, such as:\nPre-checking the token count of the input prompt before making API calls to ensure it does not exceed the model's token limit.\\n- Implementing a function that dynamically adjusts the 'max_tokens' parameter based on the prompt's token count and the model's maximum limit.\\n- Including suggestions for splitting longer prompts or truncating them when necessary to avoid exceeding the allowed token usage.\\n- Providing clear documentation and examples on how to handle 'RateLimitError' gracefully by implementing retry mechanisms with exponential backoff.\nActual Behavior\nThe current examples lack a comprehensive token management approach:\\n- They do not validate the number of tokens in the input prompt or account for potential length of the response, resulting in errors when the input or generated response is too long.\\n- There is no guidance on how to handle token-related errors, leaving users without a clear path to address common issues like 'RateLimitError'.\\n- Users may encounter unexpected interruptions, especially when attempting to integrate the SDK into production environments where reliability is critical.\nEnvironment\nPython SDK version: 0.27.0\nModel: GPT-4\nOS: macOS Ventura 13.5\nRepository Version: Latest (as of October 2024)\\n- Additional Libraries: tiktoken for token counting, if available\nPossible Fix:\nToken Counting Example: Add a utility function to count the number of tokens in an input prompt using the tiktoken library, or provide a manual method for users to estimate token usage.\nDynamic max_tokens Adjustment: Update the example to include logic that adjusts the 'max_tokens' parameter dynamically based on the prompt length.\nError Handling Guide: Provide a guide or code snippets in the documentation for implementing retry logic with exponential backoff for handling 'RateLimitError'.\nDocumentation Updates: Expand the 'Common Errors' section in the OpenAI-cookbook to include information on managing token limits and best practices for avoiding token-related issues when working with GPT-4.\nAdditional Context:\nThis issue is particularly problematic for users working with complex prompts or building applications where user input length may vary significantly. It also affects scenarios like chatbots or content generation tools that need to handle diverse input lengths dynamically.\\n- Addressing this issue will improve the user experience and reduce the likelihood of encountering token-related errors, making the examples in the OpenAI-cookbook more practical for real-world applications. A sample implementation using the tiktoken library has been shared in the discussions forum, which could be integrated into the example codebase to enhance its utility.\"", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM50K"}
{"issue_number": 327, "issue_title": "Add Example for Fine-Tuning GPT Models with Custom Datasets", "issue_body": "The current OpenAI-cookbook lacks a comprehensive guide on fine-tuning GPT models using custom datasets. This issue proposes adding a step-by-step example that covers the preparation of a custom dataset, the fine-tuning process, and deployment of the fine-tuned model.\\n\\n### Problem:\\n1. Developers looking to fine-tune GPT models on custom datasets do not have a detailed reference in the current cookbook.\\n2. While there are examples of using pre-trained models, the process of dataset preparation and fine-tuning is not well-documented.\\n\\n### Solution:\\n- Provide a complete tutorial for fine-tuning GPT models, including dataset preprocessing, training, and evaluation.\\n- Include code snippets for setting up the fine-tuning environment and handling model performance tracking.\\n- Add details on how to optimize fine-tuning for performance and accuracy with varying dataset sizes.\\n\\n### Impact:\\nThis will help developers easily adapt GPT models to specific tasks and datasets, making the cookbook more useful for real-world applications.\\n\\n### Additional Notes:\\nInclude examples for common NLP tasks such as text classification, summarization, or question answering after fine-tuning.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "Priority:Medium", "Status:InProgress", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "closed", "Author": "KFA24SCM23N"}
{"issue_number": 326, "issue_title": "Bug: Component Unmount Does Not Trigger Cleanup in useEffect", "issue_body": "When a component is unmounted, the cleanup function within the useEffect hook is not being called. This issue leads to memory leaks and unintended behavior in components that rely on cleanup actions like clearing timers, unsubscribing from events, or cancelling network requests.### Steps to Reproduce:1. Create a component that uses the useEffect hook with a cleanup function.2. Unmount the component by navigating away or conditionally rendering it.3. Observe that the cleanup function is not triggered.### Expected Behavior:The cleanup function should execute upon component unmount, preventing memory leaks and maintaining expected behavior.### Actual Behavior:The cleanup function within useEffect is not called on unmount.\\n\\n### Environment:\\n- React Version: 18.x.x- Browser: Chrome, Firefox- Operating System: macOS, Windows.### Potential Fix: Ensure that the useEffect hook handles cleanup properly upon unmounting components by reviewing the lifecycle management in the reconciler.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "RFA24SCM46C1"}
{"issue_number": 323, "issue_title": "Bug: API Request Example Fails with Incorrect Authentication Headers", "issue_body": "Description\\nIn the api_request_example.py file, the example for making API requests to the OpenAI API fails due to incorrect authentication headers. The Authorization header is missing the required Bearer keyword before the API key, causing the API to return a 401 Unauthorized error.\\n\\n### Steps to Reproduce\\n1. Run the api_request_example.py script as provided in the OpenAI cookbook.\\n2. Check the response returned from the API request.\\n\\n### Expected Behavior\\nThe API should return a valid response when using a properly formatted Authorization header.\\n\\n### Actual Behavior\\nThe API returns a 401 Unauthorized error due to missing Bearer in the header.\\n\\n### Suggested Fix\\nUpdate the api_request_example.py file to include Bearer in the Authorization header. The corrected header should be as follows:\\npython\\nheaders = {\\n    'Authorization': f'Bearer {api_key}',\\n    'Content-Type': 'application/json'\\n}\\n\\n\\n### Environment\\n- Python version: 3.8\\n- OpenAI API version: v1\\n\\n### Additional Context\\nThis issue was encountered on multiple machines running macOS and Ubuntu Linux.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "TFA24SCM41T"}
{"issue_number": 320, "issue_title": "Incorrect handling of multi-line text labels in d3.axis", "issue_body": "Description\\nWhen using multi-line text labels on a D3 axis (e.g., d3.axisBottom), the positioning of the labels doesn't adjust properly, leading to overlapping or misaligned text. This issue occurs regardless of the font size or the spacing applied manually via text-anchor and dy attributes.\\n\\n### Steps to Reproduce\\n1. Create an SVG with an axis using d3.axisBottom.\\n2. Add labels with multi-line text (e.g., using tspan within a text element).\\n3. Observe that the vertical spacing between the lines is inconsistent, causing overlapping of the text.\\n\\n### Expected Behavior\\nMulti-line text labels should automatically adjust spacing based on the total height of the text, ensuring there is no overlap or misalignment.\\n\\n### Actual Behavior\\nThe text is either overlapping or misaligned vertically, depending on the number of lines or manually set offsets.\\n\\n### Example Code\\njs\\nvar svg = d3.select('body').append('svg').attr('width', 500).attr('height', 500);\\nvar xAxis = d3.axisBottom(scale);\\nsvg.append('g').attr('class', 'x axis').call(xAxis);\\nsvg.selectAll('.tick text')\\n  .html(function(d) { return 'Line 1<br/>Line 2'; });\\n\\n\\n### Versions\\n- D3.js version: 7.x.x\\n- Browser: Chrome 116.x.x\\n- OS: Windows 10", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:pendingReview"], "State": "closed", "Author": "KFA24SCM27H"}
{"issue_number": 316, "issue_title": "Unexpected Tooltip Behavior in Scatter Plot", "issue_body": "Issue: When hovering over the points in the scatter plot, the tooltips intermittently fail to display or flicker, instead of showing smoothly. This occurs in both Chrome and Firefox on desktop. Steps to reproduce: 1. Load the scatter plot with at least 100 points. 2. Hover over various points quickly. Expected behavior: Tooltips should consistently appear and remain stable as long as the cursor is over a point. Environment: D3 v6.2.0, Chrome 88, Firefox 78 on Windows 10.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Field", "OriginationPhase:Testing", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "HFA24SCM81P"}
{"issue_number": 315, "issue_title": "Unexpected Behavior: ngOnInit Not Triggered After Route Navigation in Angular 16", "issue_body": "Description\\nAfter upgrading to Angular 16, the ngOnInit lifecycle hook is not triggered when navigating to a component via Angular Router. This issue only occurs in certain scenarios involving lazy-loaded modules or when route guards are implemented.\nSteps to Reproduce\\n1. Create a basic Angular 16 project with multiple routes.\\n2. Implement lazy-loading for at least one module.\\n3. Add a route guard to any route leading to a component using ngOnInit.\\n4. Navigate to the component with ngOnInit either programmatically or via a router link.\nExpected Behavior\\nThe ngOnInit hook should trigger every time the component is navigated to, ensuring the component initializes correctly.\nActual Behavior\\nThe ngOnInit hook fails to trigger after navigation in certain cases, leading to uninitialized variables and missing UI elements.\nEnvironment\\n- Angular Version: 16.0.0\\n- Node.js Version: 18.x\\n- Browser: Chrome 129, Firefox 120\\n- OS: Windows 10\nPossible Related Issues\\n- Issue #45678\n\nStackOverflow thread mentioning similar behavior.\n\nAdditional Context\\nThe problem appears to be intermittent and mostly affects components that are part of lazy-loaded modules with route guards. Rolling back to Angular 15 resolves the issue.\"", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Field", "OriginationPhase:Testing", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "DFA24SCM54P"}
{"issue_number": 312, "issue_title": "Documentation Improvement: Add Detailed Examples for Fine-Tuning GPT Models", "issue_body": "The current documentation for fine-tuning GPT models lacks detailed examples that can help developers quickly get started. I suggest adding a section with clear step-by-step examples for different use cases (e.g., text classification, question-answering, summarization). These examples should include: \\n1. Data preparation (format and structure)\\n2. Model training and evaluation steps\\n3. Best practices for hyperparameter tuning\\n4. How to monitor performance during fine-tuning\\n\\nThis would significantly improve the onboarding experience for new users and reduce common questions around fine-tuning GPT models.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "open", "Author": "VFA24SCM78M"}
{"issue_number": 311, "issue_title": "D3.js - Inconsistent Behavior with Time Scale and Time Zone Shifts", "issue_body": "Issue Summary\\nWhen using a d3.scaleTime() scale, there appears to be an inconsistent rendering behavior when handling time zone shifts, particularly with daylight saving time transitions. The ticks and the domain sometimes display incorrect intervals during the transition period.\\n\\n### Steps to Reproduce\\n1. Create a d3.scaleTime() with a domain that includes a daylight saving transition.\\n2. Observe the tick intervals rendered on the axis during the time zone shift.\\n\\n### Expected Behavior\\nThe axis ticks should correctly handle time zone changes, especially around daylight saving transitions, and render consistent intervals.\\n\\n### Actual Behavior\\nThe ticks appear misaligned or unevenly spaced during the daylight saving transition, causing visual inconsistencies on the chart.\\n\\n### Versions Affected\\n- D3.js: v7.0.0 and later\\n- Browser: Chrome 94.0, Firefox 93.0\\n- OS: macOS 11.6, Windows 10\\n\\n### Additional Information\\nThis issue seems related to how the time scale is calculated during time zone shifts. It may require additional logic to handle these cases in the time scale or axis rendering.", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase: Requirements"], "State": "open", "Author": "AFA24SCM09K"}
{"issue_number": 310, "issue_title": "Improve State Management with Context API and Reducer in React", "issue_body": "The current state management approach in the project is becoming hard to scale as the application grows. This issue proposes the introduction of the Context API combined with the useReducer hook to manage global state more effectively.\\n\\n### Problem:\\n1. Prop drilling is prevalent in deeply nested components, causing code maintainability issues.\\n2. The current local state is not efficiently shared across components, leading to redundant code.\\n\\n### Solution:\\n- Introduce the React Context API to provide a global store for managing state without prop drilling.\\n- Combine the useReducer hook for managing complex state logic, making state transitions more predictable and easier to debug.\\n- Refactor components to consume state using Context instead of passing props down multiple levels.\\n\\n### Impact:\\nThis will improve code maintainability, reduce redundancy, and make the state management more scalable for larger applications.\\n\\n### Additional Notes:\\nTest the performance impact and ensure the new architecture aligns with React's best practices for state management.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "OriginationPhase:Requirements", "Priority:Medium", "Status:Approved", "DetectionPhase.Design"], "State": "closed", "Author": "MFA24SCM67B"}
{"issue_number": 309, "issue_title": "OpenAI-cookbook ", "issue_body": "{\n\"Title\": \"Enhance OpenAI-cookbook Documentation for GPT-4 API Integration\",\n\"Body\": \"The current OpenAI-cookbook lacks comprehensive examples for integrating the GPT-4 API into various applications. This issue suggests adding detailed use cases, including response parsing, error handling, and optimal prompt construction strategies to better guide developers. The enhanced documentation will help developers efficiently implement the GPT-4 API in different languages and frameworks.\"\n}", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM15G"}
{"issue_number": 307, "issue_title": "\"Add Example for Fine-Tuning GPT-4 on Custom Dataset\"", "issue_body": "\"### It would be helpful to include an example in the OpenAI Cookbook that demonstrates how to fine-tune GPT-4 on a custom dataset. This can help users understand the steps involved, including data preparation, training configurations, and best practices for optimization.\\n\\n### Suggested Content\\n- Preparing and formatting the dataset\\n- Fine-tuning setup with detailed code snippets\\n- Explanation of hyperparameters for tuning performance\\n- Saving and deploying the fine-tuned model\\n\\n### Motivation\\nMany users want to leverage GPT-4's capabilities for specific tasks by training it on domain-specific datasets. Having a clear and comprehensive guide would reduce the learning curve and increase adoption of fine-tuning methods.\"", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Testing", "Priority:Major", "Status:Completed"], "State": "open", "Author": "SFA24SCM48P"}
{"issue_number": 305, "issue_title": "Improve Documentation for GPT-3 Fine-Tuning Example", "issue_body": "The current documentation for fine-tuning GPT-3 lacks detailed explanations for the following aspects:\\n\\n1. Setting up the training environment, including necessary dependencies.\\n2. Steps to preprocess the dataset for fine-tuning.\\n3. Explanation of hyperparameters used in the fine-tuning script.\\n4. Example use cases where fine-tuning GPT-3 can be particularly beneficial.\\n\\nAdding these details will help new users better understand the process and implement fine-tuning more effectively. I would be happy to contribute to updating the documentation if guidance is provided.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM81A"}
{"issue_number": 304, "issue_title": "Improve Handling of Large Datasets in d3.js Rendering", "issue_body": "When rendering visualizations with very large datasets, d3.js experiences performance issues, such as slow rendering times and browser unresponsiveness. This issue proposes improving the handling of large datasets by introducing optimizations for rendering, such as virtual scrolling, data chunking, and asynchronous data processing. Additionally, providing documentation on best practices for optimizing large-scale visualizations in d3.js would help developers avoid performance bottlenecks when working with high volumes of data.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM91L"}
{"issue_number": 303, "issue_title": "Optimize Angular Component Lifecycle for Performance", "issue_body": "In the current implementation, the component lifecycle methods in Angular are causing performance bottlenecks due to unnecessary re-renders. This issue aims to optimize the lifecycle of components by improving the use of Angular lifecycle hooks such as ngOnInit and ngOnChanges.\\n\\n### Problem:\\n1. Excessive use of change detection is triggering frequent re-renders.\\n2. Improper use of the ngOnChanges hook leads to redundant API calls.\\n\\n### Solution:\\n- Refactor components to minimize re-renders by limiting the scope of change detection.\\n- Ensure API calls are only made when necessary by refining ngOnChanges logic.\\n- Leverage Angular's OnPush change detection strategy for components that don't require frequent updates.\\n\\n### Impact:\\nThis will improve the performance of Angular applications, particularly when dealing with large datasets or complex UIs.\\n\\n### Additional Notes:\\nPlease test these changes thoroughly in both production and development environments.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "Priority:Medium", "Status:pendingReview", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "closed", "Author": "DFA24SCM85M"}
{"issue_number": 302, "issue_title": "Improve Documentation for GPT-4o Mini Usage", "issue_body": "The current documentation for using GPT-4o Mini in the OpenAI Cookbook lacks detailed examples and best practices. This issue aims to enhance the documentation by adding step-by-step guides, code snippets, and practical use cases. \\n\\nGoal: Enhance user understanding and application of GPT-4o Mini.\\n\\nResources: Reference existing API docs and user feedback.\\n\\nDeliverables: Updated documentation with new sections on common use cases and troubleshooting tips.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Rejected"], "State": "closed", "Author": "SFA24SCM90S"}
{"issue_number": 296, "issue_title": " \"Bug: Application Fails to Load After Update to Angular 16\",", "issue_body": "\"### Description\\nAfter updating the Angular project to version 16, the application fails to load, displaying a blank screen. The console shows the following error: TypeError: Cannot read property 'map' of undefined. This issue seems to be related to the Angular Router.\\n\\n### Steps to Reproduce\\n1. Update the project dependencies to Angular 16.\\n2. Run ng serve to start the application.\\n3. Observe the blank screen and console error.\\n\\n### Expected Behavior\\nThe application should load without errors, and the router should correctly handle navigation.\\n\\n### Actual Behavior\\nThe application shows a blank screen, and the console logs a TypeError.\\n\\n### Environment\\n- Angular Version: 16.0.0\\n- Node Version: 18.12.0\\n- OS: Windows 10\\n\\n### Possible Solution\\nThere might be a breaking change in Angular 16 related to the router configuration. Reverting to Angular 15 fixes the issue, but further investigation is needed.\"", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "OriginationPhase:Requirements", "Priority:Critical", "Priority:Medium", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "closed", "Author": "DreshaBommana"}
{"issue_number": 292, "issue_title": "Bug: Code Example for Fine-Tuning GPT-3.5 Not Working as Expected", "issue_body": "Description\\nThe code example provided for fine-tuning GPT-3.5 in the OpenAI Cookbook results in an unexpected error during training. Specifically, the script throws a 'key error' related to model parameters.\\n\\n### Steps to Reproduce\\n1. Clone the OpenAI-Cookbook repository.\\n2. Navigate to the fine-tuning example directory.\\n3. Execute the provided script with sample data.\\n\\n### Expected Behavior\\nThe model should fine-tune successfully without errors, and the output should include confirmation of the fine-tuning job.\\n\\n### Actual Behavior\\nAn error message is displayed: KeyError: 'model_name'. This halts the fine-tuning process.\\n\\n### Environment\\n- Python Version: 3.8+\\n- Package Version: openai==0.28.0\\n- OS: macOS/Linux/Windows\\n\\n### Additional Context\\nThe issue may be related to recent changes in the OpenAI API. Updating the documentation and code example might resolve the problem.", "created_at": "2024-10-24", "closed_at": "2024-10-25", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "DetectionPhase:Field", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Testing", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "YFA24SCM99P"}
{"issue_number": 284, "issue_title": "issue: \"Feature Request: Enhanced Error Handling for API Calls\"", "issue_body": "I would like to propose an enhancement to the error handling mechanism in the OpenAI Cookbook, particularly for API calls. Currently, users often encounter vague error messages that can make troubleshooting difficult and time-consuming.\\n\\n### Current Limitations:\\n- Vague Error Messages: Users frequently receive generic error messages that do not specify the underlying issue, making it challenging to identify the root cause.\\n- Lack of Context: The absence of context or error codes means that users must rely on guesswork or external documentation to resolve issues.\\n- No Suggested Fixes: Users are left without guidance on how to address common errors, leading to frustration and inefficiency.\\n\\n### Proposed Enhancements:\\n1. Detailed Error Messages: \\n   - Modify the error response to include specific error codes and comprehensive descriptions. For instance, instead of a message like \"Request failed,\" the API could return \"Request failed: Invalid API key (Error Code: 401)\".\\n\\n2. Suggested Fixes:\\n   - Alongside error messages, provide a list of common resolutions or links to relevant sections of the documentation. For example, if the error is due to an invalid key, suggest checking the API key format or regenerating the key from the OpenAI dashboard.\\n\\n3. Logging Mechanism:\\n   - Implement a logging system that captures API call errors, including the endpoint accessed, parameters sent, and the error message returned. This will enable users to diagnose recurring issues more effectively and provide valuable feedback for further improvements.\\n\\n### Benefits of the Proposed Changes:\\n- Improved User Experience: By providing clearer error messages and actionable steps, users will be able to resolve issues more quickly and efficiently.\\n- Reduced Troubleshooting Time: With better context and guidance, developers will spend less time diagnosing problems and more time focusing on their projects.\\n- Enhanced Documentation: This feature can also lead to improved documentation, as common errors and their solutions can be added to a dedicated section, serving as a resource for future users.\\n\\n### Conclusion:\\nI believe that enhancing the error handling for API calls will significantly improve the usability of the OpenAI Cookbook, making it a more robust and developer-friendly resource. I would love to hear feedback on this proposal and discuss potential implementation strategies.\n}", "created_at": "2024-10-24", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "open", "Author": "SFA24SCM82D"}
{"issue_number": 282, "issue_title": "Bug: Component Not Re-rendering on State Change", "issue_body": "{\n\"Body\": \"### Description\\nWhen updating the state using the setState method, the component does not re-render as expected. The issue is observed after upgrading React to the latest version (v18.x).\\n\\n### Steps to Reproduce\\n1. Create a functional component with state using useState.\\n2. Update the state using the setter function (e.g., setMyState(newValue)).\\n3. Observe that the component does not re-render even after the state change.\\n\\n### Expected Behavior\\nThe component should re-render upon a state update.\\n\\n### Actual Behavior\\nThe component does not re-render despite state changes.\\n\\n### Environment\\n- React version: 18.x\\n- Browser: Chrome (latest)\\n- OS: Windows 10 / macOS 11.x\\n\\n### Additional Context\\nThis issue seems to occur after upgrading from React 17.x to React 18.x. Downgrading back to 17.x makes the re-rendering behavior work as expected. Please investigate if this is a regression in the newer version.\"\n}", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "NFA24SCM57M"}
{"issue_number": 278, "issue_title": "Add Example for Using GPT-4 in a Data Cleaning Pipeline", "issue_body": "Currently, there is no example in the OpenAI Cookbook demonstrating how to integrate GPT-4 into a data cleaning pipeline for real-world data processing tasks. This feature would be highly beneficial for users working with noisy datasets.\nProposed Example: Use GPT-4 to handle missing or inconsistent data in CSV files.\n\n\nDemonstrate automatic data imputation using natural language context provided by GPT-4.\n\n\nShowcase a complete pipeline, from loading the dataset to generating clean, usable data.\n\n\nBenefits:- Helps users automate data cleaning for natural language processing tasks.\\n- Provides a practical application of GPT-4 in data science workflows.\n\n\nImpact: This will serve as a valuable resource for data scientists and developers looking to integrate AI models into data preprocessing stages.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "AFA24SCM23V"}
{"issue_number": 275, "issue_title": "Enhance React's State Management Error Handling", "issue_body": "React's current state management system, while efficient, lacks advanced error handling features for complex component structures and state transitions. This issue aims to improve error handling during state updates and transitions. The enhancements could include customizable error boundaries for specific state updates, better reporting of asynchronous state transition failures, and more granular control over fallback components. Improving the error handling mechanisms in React\u2019s state management will provide developers with better tools for debugging and maintaining robust applications.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "OriginationPhase:Requirements", "Priority:Medium", "Status:InProgress", "DetectionPhase.Design"], "State": "closed", "Author": "PFA24SCM09R"}
{"issue_number": 272, "issue_title": "Feature Request: Support for Dynamic Module Federation in Angular CLI", "issue_body": "Description\nAngular CLI should support dynamic module federation to enable microfrontend architectures where modules can be loaded at runtime without explicit configuration during the build process. This would allow for more scalable and flexible microfrontend systems.\nJustification\nCurrent Angular CLI implementations require static configurations for module federation, which limits flexibility. Dynamic federation would allow independent teams to develop and deploy microfrontends without requiring updates or redeployments of the host application, improving development workflow and deployment efficiency.\nProposed Solution\n\nImplement dynamic module federation using Webpack's Module Federation Plugin.\nProvide CLI options or hooks to configure modules dynamically at runtime.\n\nAlternatives Considered\n\nManually modifying Webpack configurations, but this is not feasible for large-scale projects.\n\nAdditional Context\nThis feature would align Angular CLI with modern microfrontend architectures, enhancing Angular's ability to handle enterprise-level applications.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Field", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "AFA24SCM48C"}
{"issue_number": 271, "issue_title": "Incorrect Axis Scaling When Using Time Intervals with Zoom Behavior", "issue_body": "When applying zoom behavior to a time-based axis, the scale becomes inaccurate after zooming in and out multiple times. The tick marks and labels do not adjust correctly to the zoom level, leading to overlapping or misaligned ticks. Steps to Reproduce 1. Create a time-based line chart using d3.scaleTime(). Apply d3.zoom() to the chart. Zoom in and out several times. Expected Behavior The axis should dynamically adjust tick marks and labels to the appropriate time intervals based on the zoom level.Actual Behavior The axis shows incorrect or overlapping tick labels, which do not correspond to the correct time intervals.Version D3.js version 7.0.0 Browser Tested on Chrome and Firefox.Possible Solution Investigate how the d3.zoom() behavior interacts with d3.scaleTime() and ensure that the time intervals are recalculated correctly after zoom events.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:InProgress", "OriginationPhase.Design"], "State": "closed", "Author": "JFA24SCM04K"}
{"issue_number": 269, "issue_title": "Feature Request: Support for Lazy Loading Custom Directives", "issue_body": "Description\\nCurrently, Angular supports lazy loading for modules and components, but there is no straightforward way to lazy load custom directives. As applications grow larger, it becomes essential to optimize loading times by deferring the loading of custom directives that are not immediately needed.\\n\\n### Motivation\\nLazy loading of custom directives would allow developers to further improve performance by only loading directives when required. This can be particularly beneficial in large-scale applications where custom directives are used to apply specific behavior across multiple sections.\\n\\n### Proposed Solution\\nIntroduce a mechanism in Angular to lazy load custom directives based on user interaction or certain conditions. This could involve enhancing the existing RouterModule or providing a new API that supports lazy-loaded directive modules.\\n\\n### Alternatives Considered\\nDevelopers currently work around this by including directives in lazy-loaded feature modules, but this approach is not intuitive or easy to manage. Having a dedicated and documented way to achieve lazy loading for directives would simplify implementation.\\n\\n### Additional Context\\nMany enterprise-level Angular applications face performance issues due to the heavy initial loading of directives used in feature-rich interfaces. Implementing lazy loading for custom directives could mitigate these issues and enhance the framework\u2019s scalability.", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "DFA24SCM04P"}
{"issue_number": 266, "issue_title": "Bug: React useEffect Hook Executes Twice in Strict Mode", "issue_body": "Description:\nWhen using the useEffect hook in a React component, the effect function is executed twice in development mode with React.StrictMode enabled. This can lead to unexpected behavior, such as duplicate API calls or unnecessary re-renders.\nSteps to Reproduce:\n\nWrap a component with React.StrictMode.\nInside the component, use the useEffect hook with an empty dependency array ([]) to simulate a component mount effect.\nAdd a console log inside the effect function to observe the behavior.\nRun the application in development mode.\n\nimport React, { useEffect } from 'react';\n\nfunction TestComponent() {\n  useEffect(() => {\n    console.log('Effect runs');\n  }, []);\n\n  return <div>Test</div>;\n}\n\nexport default function App() {\n  return (\n    <React.StrictMode>\n      <TestComponent />\n    </React.StrictMode>\n  );", "created_at": "2024-10-24", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "Priority:Major", "Status:Completed", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM25R"}
{"issue_number": 265, "issue_title": "Enhancement: Add examples for handling asynchronous API requests with OpenAI API", "issue_body": "Description\\n\\nIt would be helpful to include detailed examples on how to handle asynchronous API requests when interacting with the OpenAI API. Many users face challenges when dealing with large responses or performing batch requests in an asynchronous manner.\\n\\n### Suggested Solution\\n1. Provide examples in Python, JavaScript (Node.js), and other popular languages on making asynchronous API calls.\\n2. Demonstrate error handling for API request timeouts and retries.\\n3. Include scenarios for handling rate limits and large payloads using asynchronous techniques.\\n\\n### Impact\\nThis would enhance the usability of the OpenAI API for developers working with real-time applications or those handling high volumes of requests.\\n\\n### Version\\nOpenAI API v4\\n\\n### Additional Information\\nIncluding asynchronous examples will save developers time and reduce confusion when integrating the API into their applications. It would also be great to link these examples to common use cases such as chatbot integrations and data analysis tasks.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "UFA24SCM65M"}
{"issue_number": 259, "issue_title": "React component state not updating correctly on re-render", "issue_body": "Issue Description\\nWhen re-rendering a component, the state is not updating as expected. Despite calling the setState function, the component does not reflect the updated state on the next render cycle. This issue seems to occur randomly after some user interactions.\\n\\n### Steps to Reproduce\\n1. Create a functional component with a state variable using useState.\\n2. Update the state using the setState function within an event handler.\\n3. Observe that the state does not update immediately after re-rendering.\\n\\n### Expected Behavior\\nThe component should update the state and reflect the changes on re-render as soon as setState is called.\\n\\n### Actual Behavior\\nThe state does not update on the next render, causing inconsistencies in the UI.\\n\\n### Environment\\n- React version: 18.0.0\\n- Browser: Chrome (Version 93.0)\\n- OS: macOS 12.6\\n\\n### Additional Context\\nThis issue has been reproduced with React versions 17.x and 18.x. The problem is intermittent and seems to occur after multiple state updates within the same component.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "PFA24SCM60J"}
{"issue_number": 257, "issue_title": "Incorrect example for fine-tuning GPT models in Python", "issue_body": "The Python example provided for fine-tuning GPT models in the 'fine-tuning.md' file does not run successfully due to missing imports and outdated API calls.\nSteps to reproduce:\n\nFollow the instructions in the 'fine-tuning.md' file to set up the environment.\nAttempt to run the example code for fine-tuning GPT models.\nObserve errors related to missing modules and incorrect function calls.\n\nExpected Behavior: The example should run without errors after installing the dependencies.\nActual Behavior: The script fails due to missing imports and deprecated API functions.\nEnvironment: Python 3.10, OpenAI API version 0.9.0, macOS 12.5", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "Priority:Critical", "Status:InProgress", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "VFA24SCM62M"}
{"issue_number": 256, "issue_title": "Inconsistent Results with GPT-4 API Calls in the `chat-completion` ", "issue_body": "{\n\"Body\": \"### Description:\nWhile using the GPT-4 API in the chat-completion example, the results returned by the API are inconsistent. The same prompt produces different responses when called multiple times, even with temperature set to 0.\nSteps to Reproduce:\n\nUse the chat-completion example with the GPT-4 model.\nSet the temperature parameter to 0 to reduce randomness.\nExecute multiple API calls with the same input prompt.\nObserve that the responses differ slightly with each call.\n\nExpected Behavior:\nWith the temperature set to 0, the API should return consistent results for the same input prompt across multiple requests.\nActual Behavior:\nThe API returns different responses, even with the temperature parameter set to 0, suggesting unintended randomness in the results.\nReproducible Example:\nimport openai\n\nresponse = openai.ChatCompletion.create(\n  model=\\\"gpt-4\\\",\n  messages=[\n    {\\\"role\\\": \\\"system\\\", \\\"content\\\": \\\"You are a helpful assistant.\\\"},\n    {\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"Explain the concept of artificial intelligence.\\\"}\n  ],\n  temperature=0\n)\n\nprint(response.choices[0].message['content'])", "created_at": "2024-10-23", "closed_at": "2024-10-25", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "NFA24SCM09V"}
{"issue_number": 255, "issue_title": "Bug: React component does not update when prop changes", "issue_body": "Description:\nWhen a prop is updated in a React component, the component fails to re-render as expected. This issue occurs in React v18.0.2 and seems related to state updates not being triggered properly by useEffect.\nSteps to Reproduce:\nCreate a functional component that accepts a prop.\nUse useEffect to trigger state changes based on prop updates.\nChange the prop value from the parent component.\nNotice that the component does not re-render.\nExpected Behavior:\nThe component should re-render when the prop changes.\nActual Behavior:\nThe component remains unchanged even after prop updates.\nEnvironment:\nReact version: 18.0.2\nBrowser: Chrome 116.0\nOS: Windows 11", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "Priority:Major", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "AFA24SCM69R"}
{"issue_number": 248, "issue_title": "Refactor Angular Component for Efficient State Management", "issue_body": "The current implementation of the UserProfileComponent in our Angular project handles state management directly within the component, leading to increased complexity and difficulties in maintaining and scaling the application. This issue proposes refactoring the component to utilize a more efficient state management approach.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "AFA24SCM60B"}
{"issue_number": 247, "issue_title": "Enhance Error Handling for HttpClient Requests", "issue_body": "Currently, the HttpClient module in Angular has basic error handling capabilities. It would be beneficial to enhance this feature by implementing more granular error handling options, such as specific error types for different status codes and customizable interceptors. This enhancement could help developers manage API errors more effectively and improve the debugging experience.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Rejected"], "State": "closed", "Author": "BFA24SCM67F"}
{"issue_number": 243, "issue_title": "Example Code for Fine-Tuning GPT-4 Model with Custom Dataset", "issue_body": "I am looking for an example or tutorial on how to fine-tune a GPT-4 model using a custom dataset in the OpenAI API. The current examples mainly focus on prompt engineering, but there isn't any detailed guide for fine-tuning.\nCould you please add a section in the OpenAI Cookbook that demonstrates how to fine-tune a GPT-4 model? Specifically, it would be helpful to see:\n\nDataset preparation guidelines\nSample code for fine-tuning\nSteps to evaluate the fine-tuned model\n\nThank you for your efforts in maintaining this repository!", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM18S"}
{"issue_number": 239, "issue_title": "Bug: React State Updates Not Reflecting Immediately", "issue_body": "Description: When updating the state using the setState function, the changes are not immediately reflected in the component's rendered output. This issue is intermittent but occurs frequently in React 18.x.\\n\\n### Steps to Reproduce\\n1. Create a functional component with state initialized using useState.\\n2. Trigger a state update using the setState function.\\n3. Observe that the component does not re-render immediately with the updated state value.\\n\\n### Expected Behavior\\nThe component should re-render immediately after the state update, reflecting the new state value in the rendered output.\\n\\n### Actual Behavior\\nThere is a delay in rendering the updated state, and sometimes the previous state is rendered before the correct update is applied.\\n\\n### Version\\n- React: 18.0.0\\n- Browser: Chrome 114.0.0\\n- Operating System: Windows 11\\n\\n### Additional Context\\nThis issue seems to occur more often when multiple state updates are triggered in quick succession or when asynchronous functions are involved.\"", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements"], "State": "closed", "Author": "MFA24SCM37S"}
{"issue_number": 237, "issue_title": "Enhancement Request: Add Examples for Advanced Model Fine-Tuning", "issue_body": "I would like to request the addition of examples and detailed documentation on advanced model fine-tuning techniques in the OpenAI Cookbook. While the existing examples are helpful for basic fine-tuning, more complex scenarios involving hyperparameter tuning, learning rate scheduling, and multi-task learning would greatly benefit users looking to improve model performance. Providing practical code snippets and explanations for these advanced techniques would enhance the utility of the cookbook for the community.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Testing", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM66S"}
{"issue_number": 234, "issue_title": "Bug: Component Re-rendering Unexpectedly on State Change", "issue_body": "Description\\n\\nI've encountered an issue where a component re-renders unexpectedly after a state update. The issue occurs in a functional component using hooks. Even though the state variable is not part of the dependencies for the useEffect, the component still re-renders.\\n\\n### Steps to Reproduce\\n1. Create a functional component that uses useState and useEffect.\\n2. Update a state variable that isn't listed in the dependencies of the useEffect hook.\\n3. Notice that the component still re-renders.\\n\\n### Expected Behavior\\nThe component should only re-render when state variables listed in the useEffect dependencies change.\\n\\n### Actual Behavior\\nThe component re-renders even though the state variable is not in the dependency array.\\n\\n### Environment\\n- React version: 18.0.0\\n- Browser: Chrome 115\\n- Operating System: macOS Ventura\\n\\n### Additional Information\\nThis issue does not occur when using class-based components or older versions of React (16.x). It seems to be related to the new concurrent rendering feature.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "PFA24SCM53P"}
{"issue_number": 231, "issue_title": "Error in Angular's Router Module causing navigation failure after lazy loading", "issue_body": "Description\\nIn our Angular application, we are facing an issue where the router fails to navigate properly after lazy loading a module. This issue started occurring after upgrading to Angular version 16.1.\\n\\n### Steps to Reproduce\\n1. Create an Angular application with lazy-loaded modules.\\n2. Set up a route to load the module lazily using Angular's RouterModule.forRoot().\\n3. Try to navigate to the lazily-loaded module from another route.\\n\\n### Expected Behavior\\nThe application should navigate successfully to the lazy-loaded module.\\n\\n### Actual Behavior\\nNavigation fails silently, and the app gets stuck on the current page.\\n\\n### Environment\\n- Angular: 16.1.0\\n- Node.js: 18.16.0\\n- OS: macOS Ventura 13.4\\n\\n### Additional Context\\nThe issue does not occur when the application is running with the Angular Development Server (ng serve). However, it consistently reproduces in a production build.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "DFA24SCM25P"}
{"issue_number": 230, "issue_title": "Clarification Needed on Fine-tuning GPT Models with Custom Datasets", "issue_body": "{\nIssue Description:\nThe current guide on fine-tuning GPT models with custom datasets lacks detailed explanation on the following points:\n\nSteps to preprocess data for different file formats (e.g., JSON, CSV).\nExplanation of tokenization strategies and their impact on fine-tuning performance.\nGuidance on optimal training parameters (e.g., learning rate, batch size) for smaller datasets.\n\nExpected Behavior:\n\nAdditional details in the documentation to cover preprocessing for various file types.\nInformation on tokenization techniques and how they influence the model.\nA table or guide to help users choose appropriate training parameters based on dataset size.\n\nReproduction Steps:\n\nFollow the existing fine-tuning guide for GPT models with a custom dataset in JSON format.\nObserve the lack of detailed instructions for preprocessing.\n\nSuggestions:\n\nInclude a section on data preparation and tokenization.\nProvide a few common use cases for fine-tuning parameters based on dataset characteristics.\"\n}\n", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "SFA24SCM13J"}
{"issue_number": 229, "issue_title": "Improve Angular's HTTP Client Error Handling", "issue_body": "Angular's built-in HTTP client module provides powerful functionality for making HTTP requests and handling responses in Angular applications. However, error handling capabilities could be further enhanced to provide developers with more flexibility and control over error responses. This issue aims to improve Angular's HTTP client error handling by introducing features such as interceptors for global error handling, standardized error response formats, and customizable error handling strategies. Additionally, enhancing error handling documentation and providing best practices for error handling in Angular applications will empower developers to build more robust and reliable web applications using Angular's HTTP client module.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "AFA24SCM44A"}
{"issue_number": 227, "issue_title": "Bug in Component Rendering", "issue_body": "There is an issue with the component rendering in the latest version of the React framework. The specific issue arises when handling state updates, which leads to unexpected behavior in the UI.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "Priority:Medium", "Status:InProgress", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "closed", "Author": "MFA24SCM39K"}
{"issue_number": 225, "issue_title": "Enhancement: Add Examples for Advanced Usage of OpenAI API with Streaming", "issue_body": "Description\\nCurrently, the OpenAI-cookbook provides examples for basic usage of the OpenAI API, but lacks detailed examples demonstrating advanced use cases, particularly for streaming API responses. This feature is crucial for real-time applications where latency is critical.\\n\\n### Proposed Enhancement\\n- Add a new section in the documentation that covers streaming responses using OpenAI API.\\n- Include Python code examples for integrating streaming with web frameworks like FastAPI and Flask.\\n- Provide best practices for error handling and retry mechanisms in streaming scenarios.\\n\\n### Benefits\\n- Improves the usability of the OpenAI API in real-time and high-performance applications.\\n- Helps developers understand how to implement streaming effectively, reducing latency in their projects.\\n\\n### Additional Context\\nThis enhancement request is based on community feedback and would greatly benefit users working with dynamic or interactive applications. I'd be happy to contribute to the implementation if required.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Enhancement", "OriginationPhase:Design", "Priority:Medium", "Status:Approved", "DetectionPhase.Design"], "State": "open", "Author": "SFA24SCM50K"}
{"issue_number": 221, "issue_title": "\"Bug: Router Link not working correctly with named outlets\"", "issue_body": "\"### Description\\nWhen using routerLink with named outlets, navigation does not update the URL or view correctly. This issue occurs intermittently and affects dynamic loading of components in auxiliary routes.\nSteps to Reproduce\\n1. Create a named outlet in a template (e.g., <router-outlet name='popup'></router-outlet>).\\n2. Set up routerLink to navigate to this outlet.\\n3. Attempt navigation and observe that the view does not update or the URL does not change properly.\nExpected Behavior\\nThe URL should update accordingly, and the view associated with the named outlet should render without issues.\nCurrent Behavior\\nIn some cases, the view does not load, and the URL remains unchanged.\nAngular Version\\n- Angular: 14.0.0\nAdditional Context\\n- The issue is more prevalent when navigating between sibling components.\"", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Field", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "AFA24SCM87W"}
{"issue_number": 218, "issue_title": "Inconsistent behavior of axis tick formatting on zoom event", "issue_body": "Description:\\n\nWhen zooming in or out on a chart, the axis tick formatting becomes inconsistent. The ticks occasionally overlap or display in a non-uniform manner, especially when the scale changes rapidly due to zooming.\\n\\n### Steps to Reproduce:\\n1. Create a basic chart with d3.js and set up an axis using d3.axisBottom().\\n2. Apply zoom functionality using d3.zoom().\\n3. Zoom in and out rapidly and observe the behavior of the axis ticks.\\n\\n### Expected Behavior:\\nThe axis ticks should scale and format consistently during zooming, without overlapping or changing their format unexpectedly.\\n\\n### Actual Behavior:\\nThe ticks overlap and sometimes change their format (e.g., switching from integers to decimals).\\n\\n### Version:\\nd3.js version: 7.x.x\\n\\n### Browser and Environment:\\n- Browser: Chrome Version 94.0\\n- Operating System: Windows 10\\n\\n### Suggested Fix:\\nEnsure that the tick formatting is recalculated properly during zoom events, possibly by adjusting the tickFormat() method based on zoom level.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "KFA24SCM32K"}
{"issue_number": 216, "issue_title": "\"Bug: Angular router does not trigger NavigationStart event on page reload\"", "issue_body": "\"### Description\\nThe Angular router does not trigger the NavigationStart event when a page reload occurs. This issue has been observed across several versions of Angular.\\n\\n### Steps to Reproduce\\n1. Set up an Angular application with a router event subscription for NavigationStart.\\n2. Navigate to a route within the application.\\n3. Reload the page.\\n4. Notice that the NavigationStart event is not fired on page reload.\\n\\n### Expected Behavior\\nThe NavigationStart event should trigger every time navigation begins, including on a page reload.\\n\\n### Actual Behavior\\nThe NavigationStart event does not trigger on page reloads, but only on navigations within the application.\\n\\n### Environment\\n- Angular version: 12.2.0\\n- Browser: Chrome, Firefox, Edge\\n- Operating System: macOS, Windows\\n\\n### Potential Impact\\nThis bug may cause issues in applications that rely on router events for tracking navigation or updating analytics when users reload the page.\"", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "AFA24SCM57M"}
{"issue_number": 215, "issue_title": "Documentation enhancement for integrating GPT with Rasa", "issue_body": "The current documentation lacks a clear example of integrating GPT models with Rasa for a chatbot solution. It would be helpful to have a step-by-step guide on how to set up a custom Rasa chatbot with GPT, including routes, response handling, and training data configuration. Additionally, some code snippets or examples for handling different conversation intents would add value.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM95P"}
{"issue_number": 214, "issue_title": "Component not updating view after data change", "issue_body": "When the data model in the component updates, the view is not reflecting the changes until a manual refresh is triggered. This seems to occur only when using certain lifecycle hooks.\nSteps to Reproduce\n\nCreate a component with an input field bound to a data model.\nChange the value of the input programmatically in the component class.\nThe view does not update unless a manual refresh is triggered.\n\nExpected Behavior\nThe view should automatically update to reflect the new data without requiring a manual refresh.\nVersions\n- Angular: 13.0.0\n- Browser: Chrome 94\n- OS: Windows 10\nAdditional Information\nThis issue started occurring after upgrading to Angular 13. Previous versions did not have this problem.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Testing", "Priority:Low", "Status:Rejected"], "State": "closed", "Author": "AFA24SCM54D"}
{"issue_number": 212, "issue_title": "Bug: useEffect does not re-run after state change", "issue_body": "Description: The useEffect hook is not re-running as expected when state updates occur. Specifically, after updating the component state, useEffect with the corresponding state variable in its dependency array is not triggered.\nSteps to Reproduce:\n\n\nCreate a React component with a state variable and a useEffect hook.\n\n\nAdd the state variable to the dependency array of useEffect.\n\n\nUpdate the state variable using setState.\n\n\nExpected Behavior: The useEffect hook should re-run when the state changes.\nActual Behavior: The useEffect hook does not re-run after state changes.\nEnvironment:  Browser: Chrome 95, OS: Windows 10\nAdditional Notes: This issue seems to occur intermittently, especially when the component is re-rendered multiple times due to props updates.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "Priority:Medium", "Status:Approved", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "RFA24SCM19O"}
{"issue_number": 210, "issue_title": "Add Support for Grouped Bar Charts", "issue_body": "Summary\nI would like to propose adding support for grouped bar charts to the D3.js library. Currently, D3 provides excellent capabilities for creating simple bar charts, but there is a lack of straightforward examples and documentation for grouped bar charts, which are essential for comparing multiple categories across a single dimension.\nMotivation\nGrouped bar charts are a common visualization tool in data analysis and reporting. By integrating this feature, D3.js can enhance its utility and accessibility for users looking to create more complex visualizations without having to implement custom solutions.\nSuggested Implementation\n\nA new example in the D3 documentation demonstrating how to create a grouped bar chart using sample data.\nClear instructions on how to customize the appearance of the grouped bars, including spacing, colors, and labels.\n\nAdditional Information\n\nIncluding support for grouped bar charts will benefit both new and experienced users by providing a clearer pathway to achieving common visualization goals.\n", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM72J"}
{"issue_number": 209, "issue_title": "Error Handling for API Requests: Timeout and Retry Mechanism", "issue_body": "\"Currently, the API request examples in the OpenAI-cookbook lack a robust mechanism to handle timeouts or retry failed requests. This can lead to failed processes or unnecessary crashes in production environments.\nProposed Solution: Add a section to the API request examples that demonstrates implementing a retry mechanism using libraries like requests (with Retry from urllib3) in Python. Include configurable parameters for retry attempts, timeout limits, and backoff strategies. This will ensure that developers can handle intermittent network failures gracefully.\nBenefits:\n\nImprove reliability of API calls in real-world applications.\nReduce the risk of data loss or incomplete processes due to transient network issues.\n", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "open", "Author": "SFA24SCM20N"}
{"issue_number": 208, "issue_title": "Documentation: Add Example for Responsive Bar Chart in D3.js", "issue_body": "The D3.js documentation currently lacks a clear example of creating a responsive bar chart that adjusts its size based on the screen or container. Adding such an example would assist developers in implementing responsive charts effectively. The example should demonstrate how to create a bar chart that resizes dynamically while maintaining its aspect ratio. Additionally, it should include guidance on handling different browsers and operating systems, specifically highlighting the use of viewBox with SVG elements for optimal responsiveness.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "HFA24SCM42P"}
{"issue_number": 206, "issue_title": "Clarification on Fine-Tuning GPT-3 for Domain-Specific Tasks", "issue_body": "I am currently working on fine-tuning GPT-3 for a domain-specific task following the instructions in the OpenAI Cookbook. However, I have encountered a few challenges and would appreciate some clarification on the following points:\n\n\nData Preparation: The documentation mentions formatting the data in JSONL format. Could you provide a more detailed example of how to structure training data for fine-tuning GPT-3 on classification tasks?\n\n\nHyperparameters: Could you provide some guidelines or best practices on adjusting hyperparameters like batch size, learning rate, and number of epochs during fine-tuning for optimal performance?\n\n\nEvaluation Metrics: What are the recommended evaluation metrics for tracking the performance of a fine-tuned GPT-3 model in domain-specific tasks, particularly for text classification?\n\n\nExpected Results: What are the typical results or performance benchmarks for a well-trained GPT-3 model on custom domain-specific tasks?\n}\n\n", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "SFA24SCM08M"}
{"issue_number": 203, "issue_title": "Feature Request: Add Enhanced Chart Customization Options", "issue_body": "Description\nIt would be beneficial to provide users with more extensive chart customization options. Currently, d3.js allows basic customizations, but expanding these features would significantly improve user experience, particularly for those who may not have deep knowledge of JavaScript or d3.js itself.\nFeature Suggestions:\n\nPredefined Themes: Allow users to apply predefined themes (light, dark, etc.) to charts with a simple API call.\nLegend Positioning: Provide more flexibility in positioning the legend (top, bottom, left, right) with minimal effort.\nCustomizable Animations: Enhance support for animations, allowing users to control speed, type of easing, and trigger events.\nExport to Image: Add built-in support to export charts as PNG, JPG, or SVG files directly through the library.\nAccessibility Enhancements: Improve accessibility options such as keyboard navigation and screen reader support.\n\nUse Case:\nUsers who are building dashboards or data visualizations can easily create visually appealing and accessible charts without needing to deeply customize every element of d3.js manually.\nImpact:\nThis would make d3.js more accessible to developers of varying experience levels and could potentially increase adoption rates by providing more user-friendly options.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Coding", "OriginationPhase:Documentation", "OriginationPhase:Field", "OriginationPhase:Testing", "Priority:Low", "Priority:Major", "Status:Completed", "Status:Rejected"], "State": "closed", "Author": "HFA24SCM03M"}
{"issue_number": 201, "issue_title": "D3 axis labels overlapping when resizing the chart container", "issue_body": "When dynamically resizing the container of a D3 chart, the axis labels overlap and do not adjust correctly based on the new container dimensions. This issue occurs when the chart is resized to smaller widths or heights, causing the axis labels to collide, making them unreadable. Steps to Reproduce: 1. Create a D3 chart with both x and y axes. 2. Dynamically resize the chart container (e.g., using a window resize event). 3. Observe that the axis labels overlap as the chart's size is reduced. Expected Behavior: The axis labels should reposition or scale correctly when the chart container is resized, ensuring they remain readable. Actual Behavior: The axis labels overlap when the chart container size is reduced, causing readability issues. Environment: D3 version: 7.2.1, Browser: Chrome, Firefox. Additional Context: This issue is especially problematic in responsive designs where charts need to adapt to different screen sizes.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:Low", "Status:pendingReview"], "State": "closed", "Author": "CFA24SCM76G"}
{"issue_number": 200, "issue_title": "Feature Request: Add Support for Exporting Visualizations as SVG", "issue_body": "Summary\nI would like to request a feature that allows users to export D3.js visualizations as SVG files. This would enhance the usability of D3.js for users who need to incorporate visualizations into reports and presentations without losing quality.\nMotivation\nCurrently, users can save visualizations as PNG or other raster formats, which may lead to loss of quality when scaling. SVG files, being vector graphics, would maintain quality regardless of the size.\nProposed Solution\n\nIntroduce a method in the D3.js library that allows users to convert the current visualization directly to SVG format.\nEnsure that all interactive elements and styling are preserved in the exported SVG file.\n\nAdditional Context\n\nThis feature would be especially useful for educators and professionals who rely on high-quality visuals for their work. Many other visualization libraries, such as Chart.js, already offer similar functionalities.\n", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements"], "State": "closed", "Author": "KFA24SCM71P"}
{"issue_number": 198, "issue_title": "Add Support for Grouped and Stacked Bar Chart Combination Example", "issue_body": "Summary:\nIntroduce an example that demonstrates how to create a combination of grouped and stacked bar charts in d3.js. This will help users visualize more complex categorical data with multiple dimensions in a single chart.\nDescription:\nd3.js is excellent for creating complex data visualizations, but there is no example in the official documentation or examples that showcases how to combine grouped and stacked bar charts. Such a visualization is useful for displaying multiple sets of categorical data with hierarchical relationships.\nAn example should:\n\nShow how to group bars by categories (grouped bar chart).\nStack multiple bars within each group to represent subcategories or additional data dimensions (stacked bar chart).\nHandle both horizontal and vertical orientations, allowing flexibility in usage.\n\nThis enhancement would help users create richer visual representations, particularly for complex datasets where there are both group-level and subcategory-level comparisons.\nBenefits:\n\nExpands the d3.js library\u2019s example set with a useful, frequently requested chart type.\nHelps users visualize multi-dimensional data more effectively.\nEncourages adoption of d3.js for complex charting needs by providing clearer examples.\n\nSuggested Approach:\n\nExtend the current bar chart example to handle both grouped and stacked data.\nProvide clear documentation and code comments to explain how the combination works.\nDemonstrate the application with real-world datasets (e.g., sales data grouped by region and stacked by product).\n\nAdditional Context:\nThere are multiple questions and requests from users across forums like StackOverflow and GitHub issues for a d3.js example that combines grouped and stacked bar charts. This example will meet a common need and fill a gap in the current d3.js documentation.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:pendingReview", "OriginationPhase.Design"], "State": "closed", "Author": "KFA24SCM12R"}
{"issue_number": 196, "issue_title": "Feature Request: Add support for custom hooks documentation", "issue_body": "It would be beneficial to have a dedicated section in the React documentation for custom hooks. Currently, while the documentation covers the basic use of hooks, it lacks examples and best practices for creating and using custom hooks.  Suggested Changes: 1. Create a new section in the Hooks documentation specifically for custom hooks. 2. Include clear examples demonstrating how to create custom hooks for various use cases (e.g., data fetching, form handling). 3. Discuss common patterns and best practices when building custom hooks. Benefits: - This addition would help developers better understand how to leverage hooks and encourage them to create reusable logic in their applications. - It would also promote community contributions of custom hooks and solutions, enhancing the overall ecosystem. Additional Context: - Many developers are now relying heavily on hooks for managing state and side effects in functional components, and proper guidance on custom hooks would enhance their development experience", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:InProgress"], "State": "closed", "Author": "ng-iit"}
{"issue_number": 193, "issue_title": "API Rate Limit Handling Missing in 'Chatbot' Example", "issue_body": "In the 'chatbot' example, when the OpenAI API rate limit is reached, the application crashes without any proper error handling or retry logic. This issue results in an inconsistent user experience, especially in scenarios where the chatbot is under heavy use or high traffic. It's important to handle such situations gracefully by implementing a retry mechanism or using exponential backoff when API rate limits are exceeded. Additionally, logging the error details would help users better understand when the rate limits are hit, and providing a configurable wait time before retrying would give more flexibility for usage in different environments.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Critical", "Status:Approved", "OriginationPhase.Design"], "State": "closed", "Author": "SFA24SCM37S"}
{"issue_number": 192, "issue_title": "Bug: Unexpected Behavior When Updating State in Nested Components", "issue_body": "When updating the state of a nested component, the parent component unexpectedly re-renders, causing a loss of local state and performance issues. This occurs with React version 18.2.0. Steps to Reproduce. Create a parent component with a child component. In the child component, use the useState hook to manage state. Update the child component's state using the setter function. Notice that the parent component re-renders unexpectedly. Expected Behavior: The parent component should not re-render unless its state or props are changed. Actual Behavior: The parent component re-renders when the child component's state changes.\"\n}", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "open", "Author": "SFA24SCM78G"}
{"issue_number": 190, "issue_title": "Enhancement: Add Example for Fine-tuning GPT on Custom Dataset", "issue_body": "{\n\"Title\": \"Enhancement: Add Example for Fine-tuning GPT on Custom Dataset\",\n\"Body\": \"### Issue Description\\nCurrently, the OpenAI-cookbook lacks an example that demonstrates how to fine-tune a GPT model using a custom dataset. This would be highly beneficial for users who want to adapt models to their specific tasks or domains.\\n\\n### Suggested Solution\\nAdd a detailed guide or notebook that walks users through the process of preparing a custom dataset, setting up the training environment, and fine-tuning a GPT model (e.g., GPT-3.5) on this dataset using OpenAI's API or any open-source alternative. It should include:\\n- Dataset preprocessing steps\\n- Fine-tuning commands or code snippets\\n- Evaluation of the model post-fine-tuning\\n\\n### Benefits\\nThis feature will allow users to better understand and apply fine-tuning techniques, enabling more tailored solutions for their specific use cases.\\n\\n### Additional Context\\nRelevant documentation or tutorials from OpenAI's API and any existing models in the cookbook should be linked for easy reference.\"\n}", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "OriginationPhase:Requirements", "Priority:Medium", "Status:InProgress", "DetectionPhase.Design"], "State": "closed", "Author": "YFA24SCM52T"}
{"issue_number": 188, "issue_title": "Line Chart Tooltip Displays Incorrect Data on Hover", "issue_body": "Bug Description:\nWhen hovering over points on a d3.js line chart, the tooltip displays incorrect data values. This occurs intermittently and seems to happen when there are multiple data series plotted.\nSteps to Reproduce:\n\nCreate a line chart with multiple data series using d3.line().\nAdd a tooltip that displays data values on hover.\nHover over points on the chart, especially when multiple data series intersect.\n\nExpected Behavior:\nThe tooltip should display the correct data value for the point being hovered over.\nActual Behavior:\nThe tooltip occasionally shows values from a different data series or mismatches the x/y coordinates.\nEnvironment:\n\nd3.js version: 7.0.0\nBrowser: Chrome 95.0.4638.54\nOperating System: macOS Big Sur 11.6\n\nAdditional Notes:\nThis issue appears more frequently when the chart contains many data points or when series overlap closely. This may be related to the mouse event handling in d3\u2019s tooltip function.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Major", "Status:Approved"], "State": "closed", "Author": "KFA24SCM33K"}
{"issue_number": 187, "issue_title": "\"Enhancement: Expand Data Visualization Techniques in OpenAI Cookbook with D3.js\"", "issue_body": "\"### Description:\\nThis issue proposes expanding the OpenAI Cookbook's data visualization section by incorporating advanced techniques using D3.js. Current examples may not fully address the challenges of large dataset visualization, so adding optimized methods will enhance both performance and user experience.\\n\\n### Suggested Enhancements:\\n1. Canvas Rendering for Large Datasets: Add examples of using the HTML5 Canvas element instead of SVG for rendering large datasets efficiently.\\n2. Zoom and Pan Features: Provide detailed examples of interactive charts where users can zoom and pan to explore larger datasets in detail.\\n3. Data Simplification: Include methods for data aggregation and sampling to make charts with large datasets more manageable and less computationally expensive.\\n4. Advanced Color Scales and Axis Formatting: Cover advanced usage of D3's color scales for clear visualization of heatmaps and financial data, with improved axis formatting examples.\\n5. Web Workers: Add examples on utilizing Web Workers in D3.js to offload expensive tasks and improve the performance of data visualizations.\\n\\n### Benefits:\\n- Better performance for rendering large datasets.\\n- More engaging and interactive visualizations.\\n- Increased utility of OpenAI Cookbook for data exploration and analysis with D3.js.\\n\\nWould love to hear feedback or additional suggestions to further improve the Cookbook's visualization capabilities!\"\n}", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "VFA24SCM64B"}
{"issue_number": 183, "issue_title": "\"Improve Angular's State Management with NgRx Integration\"", "issue_body": "\"Angular provides robust features for managing state in large-scale applications. However, the integration between Angular's built-in state management capabilities and third-party libraries such as NgRx could be more seamless. This issue proposes improvements in the documentation and examples for better integration with NgRx, including clearer patterns for managing asynchronous data, error handling, and side effects using Effects. Additionally, providing best practices for optimizing NgRx stores and selectors will help developers build more scalable, maintainable applications using Angular's state management solutions.\"", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "Priority:Medium", "Status:InProgress", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "JFA24SCM91M"}
{"issue_number": 182, "issue_title": "Add Recipe for Comparing Clustering Methods: K-Means, Spectral Clustering, and Dimensionality Reduction Techniques", "issue_body": "\"The OpenAI Cookbook could benefit from a detailed guide on comparing different clustering methods, particularly K-Means and Spectral Clustering, along with dimensionality reduction techniques such as ISOMAP and MDS. The recipe should focus on evaluating the performance of these methods on various datasets, including both synthetic datasets and real-world examples like a face dataset.\\n\\nThis recipe would cover the following sections:\\n\\n1. Introduction: Explanation of clustering and dimensionality reduction, and their importance in machine learning and data analysis.\\n2. Prerequisites: Required packages (e.g., scikit-learn, matplotlib), datasets, and other setup instructions.\\n3. Step-by-Step Implementation:\\n   - Loading datasets\\n   - Applying K-Means and Spectral Clustering\\n   - Using ISOMAP and MDS for dimensionality reduction\\n   - Visualizing and comparing results\\n4. Evaluation: Methods to assess clustering performance, such as silhouette score, inertia, and adjusted Rand index.\\n5. Challenges & Tips: Discuss common pitfalls like overfitting, underfitting, or improper choice of clustering parameters.\\n\\nThis recipe will help users understand how different clustering and dimensionality reduction techniques perform in various scenarios, making it easier for them to choose the right approach for their own projects.\"", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "OriginationPhase:Requirements", "Priority:Critical", "Status:InProgress", "DetectionPhase.Design"], "State": "closed", "Author": "SFA24SCM64S2"}
{"issue_number": 181, "issue_title": "Feature Request: Add support for Suspense in React server-side rendering (SSR)", "issue_body": "It would be great to have support for Suspense when using React's server-side rendering (SSR). Currently, when trying to use Suspense in SSR, the application throws an error. Adding this feature would allow for better handling of async data fetching in SSR environments, improving performance and UX.\\n\\n### Use Case\\nMany developers rely on SSR for SEO and initial load performance, but Suspense isn't fully supported, limiting the ability to handle async components gracefully during server rendering.\\n\\n### Proposed Solution\\nExtend React's server-side rendering engine to handle Suspense, possibly by enabling fallback rendering on the server with a hydration process on the client.\\n\\n### Additional Context\\n- React version: 18.2.0\\n- Feature needed for applications that use data-fetching libraries like React Query or SWR which can benefit from Suspense.\\n- This feature could reduce the complexity of workarounds that developers currently use to achieve similar functionality.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:Approved", "OriginationPhase.Design"], "State": "open", "Author": "PFA24SCM85B"}
{"issue_number": 173, "issue_title": "Improve Documentation for API Rate Limits", "issue_body": "The current documentation lacks clear information on how API rate limits work, especially with different subscription tiers. It would be helpful to include:\n\nClear explanation of rate limits across various subscription plans.\nExample code snippets that handle rate limiting in Python.\nGuidance on how to handle rate limit errors and best practices for retrying failed requests.\n\nThis would greatly help developers understand and handle rate limits effectively in their applications.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "Priority:Major", "Status:Completed", "OriginationPhase.Design"], "State": "closed", "Author": "VFA24SCM31V"}
{"issue_number": 168, "issue_title": "Bug: Change detection not triggered on programmatic DOM updates in Angular", "issue_body": "In Angular, change detection does not trigger automatically when the DOM is updated programmatically (e.g., via direct DOM manipulation or third-party libraries). This causes the UI to become out of sync with the application state, leading to unexpected behavior in components. Steps to Reproduce: 1. Create an Angular component with a reference to a DOM element. 2. Update the DOM directly using ElementRef or a third-party library. 3. Observe that Angular's change detection does not pick up the changes unless manually triggered. Expected Behavior: Angular should automatically detect and reflect changes made to the DOM, or there should be a clearer way to trigger change detection when necessary. Actual Behavior: The DOM is updated, but Angular's change detection does not trigger, resulting in a mismatch between the UI and the component's state. Environment: Angular version: 16.1.0, Browser: Chrome, Node version: 18.0.0. Additional Context: This issue affects use cases where third-party libraries or manual DOM manipulations are necessary, making it difficult to maintain consistent UI updates.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:Low", "Status:InProgress"], "State": "open", "Author": "TFA24SCM16B"}
{"issue_number": 167, "issue_title": "Request for New Recipe: Fine-Tuning OpenAI Models", "issue_body": "\" Overview\\n\\nI would like to request a new recipe in the OpenAI Cookbook that details the process of fine-tuning OpenAI models. Fine-tuning can significantly improve performance on specific tasks, and a comprehensive guide would be beneficial for users looking to customize models for their applications.\\n\\n## Proposed Sections\\n1. Introduction: Brief explanation of what fine-tuning is and when to use it.\\n2. Prerequisites: Required packages, datasets, and model specifications.\\n3. Step-by-Step Guide:\\n   - Preparing your dataset\\n   - Configuring model parameters\\n   - Fine-tuning process\\n   - Evaluating performance\\n4. Common Challenges: Troubleshooting tips and common pitfalls to avoid.\\n5. Examples: Real-world scenarios and code snippets demonstrating fine-tuning in action.\\n\\n## Additional Notes\\nProviding clear code examples and explanations will help users with varying levels of expertise. Thank you for considering this request!\"", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "Priority:Medium", "Status:Completed", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "SFA24SCM37M"}
{"issue_number": 165, "issue_title": "Bug: Incomplete documentation for fine-tuning GPT models in OpenAI Cookbook", "issue_body": "The section on fine-tuning GPT models in the OpenAI Cookbook lacks sufficient detail and examples, particularly for beginners. Key steps such as dataset preparation, setting appropriate hyperparameters, and handling errors during fine-tuning are not covered in depth, leaving users confused. Steps to Reproduce: 1. Visit the fine-tuning section of the OpenAI Cookbook. 2. Attempt to follow the guide using a custom dataset. 3. Notice the absence of detailed instructions on hyperparameter selection, error handling, and advanced use cases. Expected Behavior: The documentation should provide a step-by-step guide with examples on how to prepare datasets, choose hyperparameters, and troubleshoot common issues during the fine-tuning process. Actual Behavior: Users are left with many questions and often need to refer to external resources or experiment heavily to achieve successful fine-tuning. Environment: OpenAI API version: v4, Python version: 3.10. Additional Context: Including more real-world examples, detailed explanations on dataset formatting, and troubleshooting tips would greatly enhance the usability of this guide for both beginners and advanced users.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "MFA24SCM08V"}
{"issue_number": 163, "issue_title": "Bug: Incorrect rendering of components in React Strict Mode", "issue_body": "When enabling React Strict Mode, certain components fail to render properly, causing UI inconsistencies. This issue was noticed in version 18.0.2. Steps to Reproduce: 1. Enable React Strict Mode in the application. 2. Render components using functional components with hooks. 3. Observe that the component does not render or renders incorrectly. Expected Behavior: The components should render as expected without any discrepancies when Strict Mode is enabled. Actual Behavior: Components either fail to render or show incomplete rendering. Environment: React version: 18.0.2, Browser: Chrome 116, OS: macOS Ventura 13.5. Additional Context: This issue seems to occur more frequently with components using the useEffect hook.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "RFA24SCM86S"}
{"issue_number": 162, "issue_title": "Bug: Error when navigating between routes with nested lazy-loaded modules", "issue_body": "When navigating between routes that contain nested lazy-loaded modules, an error occurs: 'Error: Cannot match any routes. URL Segment'. This issue arises intermittently and affects applications with complex routing configurations. The problem is observed more frequently when switching between routes multiple times. Expected behavior is seamless navigation between routes without any errors, but the actual behavior causes the router to throw an error, making the application fail during routing. This issue seems to happen more often in production mode, particularly when the application has more than three levels of nested lazy-loaded modules. Environment details: Angular Version 14.0.0, Node Version 16.15.0, Browser: Chrome 100.0.4896.75.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:pendingReview", "OriginationPhase.Design"], "State": "closed", "Author": "AFA24SCM64P"}
{"issue_number": 159, "issue_title": "Improve Documentation for GPT-3 Fine-Tuning with Custom Datasets", "issue_body": "The current documentation for fine-tuning GPT-3 models using custom datasets is minimal and lacks clear examples for different use cases. It would be helpful to have more comprehensive step-by-step guides with detailed explanations, especially for:\n\nFormatting input data for fine-tuning.\nCommon preprocessing steps.\nHandling errors during fine-tuning.\nBest practices for dataset size and quality.\n\nAdditionally, providing example code for common tasks like loading a dataset, configuring fine-tuning parameters, and evaluating the model\u2019s performance after training would be valuable for users.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Requirements", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "open", "Author": "SFA24SCM04D"}
{"issue_number": 157, "issue_title": "Bug: Data binding issue in Angular reactive forms", "issue_body": "Description:\\nThere is an inconsistency in data binding when using Angular reactive forms. Specifically, the form control value does not update correctly after programmatic changes. This issue occurs intermittently when using patchValue() or setValue() in combination with FormArray.\\n\\n### Steps to Reproduce:\\n1. Create a form using FormBuilder with nested FormArray.\\n2. Programmatically update form values using patchValue().\\n3. Check if the updated values reflect in the form.\\n\\n### Expected Behavior:\\nThe form control values should update correctly when using patchValue() or setValue().\\n\\n### Actual Behavior:\\nIntermittently, the values are not reflected in the form, and users see outdated data.\\n\\n### Environment:\\n- Angular Version: 13.3.0\\n- Browser: Chrome 95\\n- OS: Windows 10\\n\\n### Additional Information:\\nNo errors are logged in the console. The issue is more frequent in production builds. The problem might be related to the ChangeDetectionStrategy used in the component.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Documentation", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "NFA24SCM36B"}
{"issue_number": 155, "issue_title": "Enhancement: Improve State Management in React Components", "issue_body": "Implement more efficient state management techniques in React components to optimize performance and reduce unnecessary re-renders.\nSolution: Consider integrating React's useReducer or Context API where applicable. Evaluate whether the introduction of external state management libraries like Redux or Zustand could provide better scalability for larger applications.\nBenefits:\n\nImproved performance for larger applications.\nEnhanced scalability and maintainability.\nReduced redundant re-renders in heavily nested components.\n\nPossible Challenges: Migration of existing code to new state management patterns. Additional complexity for small applications", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "NFA24SCM81J"}
{"issue_number": 154, "issue_title": "Improve Documentation for Lazy Loading Modules in Angular", "issue_body": "The current documentation for lazy loading modules in Angular could be expanded to provide more clarity on common use cases and troubleshooting. It would be helpful to include examples of:\n\nSetting up lazy-loaded routes with more complex route configurations.\nBest practices for structuring modules in large-scale applications.\nError handling strategies for failed module loads (e.g., network issues).\nReal-world use cases for when and how to implement lazy loading effectively.\nIntegration with Angular services and how to handle dependencies.\n\nThis would improve the developer experience and help avoid common pitfalls when implementing lazy loading in Angular applications.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "AFA24SCM13S"}
{"issue_number": 152, "issue_title": "Inconsistent Rendering of Axis Ticks with Small Data Ranges", "issue_body": "Description\nWhen using d3.axisBottom or d3.axisLeft for rendering axes, the axis ticks become inconsistent and misaligned when the data range is small. This issue becomes more pronounced when using small intervals for the domain range (e.g., [0.1, 0.5]). The expected behavior is for the ticks to be evenly spaced and aligned correctly based on the scale.\nSteps to Reproduce\n\nCreate a linear scale with a small domain (e.g., d3.scaleLinear().domain([0.1, 0.5])).\nApply the scale to an axis using d3.axisBottom or d3.axisLeft.\nRender the axis on an SVG element.\nNotice that the ticks are misaligned or not displayed consistently.\n\nExpected Behavior\nThe ticks should be evenly spaced and aligned with the scale.\nActual Behavior\nTicks are unevenly spaced or misaligned, especially when using small ranges in the scale domain.\nVersions\n\nd3.js version: 7.0.0\nBrowser: Chrome, Firefox\nOS: Windows 10, MacOS 11\n\nAdditional Information\nThis issue appears intermittently depending on the zoom level and browser settings. A potential fix might involve adjusting the tick formatting for small ranges or improving the tick calculation for small domains.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "HFA24SCM63P"}
{"issue_number": 151, "issue_title": "Bug: Component Fails to Update on State Change", "issue_body": "\"Description\": \"When the state is updated, the MyComponent component fails to re-render as expected. This issue seems to occur after migrating to React 18.0.0.\",\n\"Steps to Reproduce\": [\n\"1. Create a functional component that uses useState.\",\n\"2. Update the state using the state setter function.\",\n\"3. Notice that the component doesn't reflect the updated state in the UI.\"\n],\n\"Expected Behavior\": \"The component should re-render whenever the state changes, reflecting the new state in the UI.\",\n\"Environment\": {\n\"React Version\": \"18.0.0\",\n\"Node Version\": \"16.14.2\",\n\"Browser\": \"Chrome 96.0\"\n},\n\"Additional Context\": \"This issue doesn't occur when downgrading to React 17.x.\"", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "RFA24SCM06P"}
{"issue_number": 150, "issue_title": "Bug: Unexpected Behavior in d3.line() when Rendering Curved Paths", "issue_body": "Description\nWhen using the d3.line() function with curve interpolation, the rendered path exhibits unexpected artifacts at specific points. This issue occurs inconsistently across different datasets.\nSteps to Reproduce\n**Use the following code to create a line chart with d3.line():**\nconst line = d3.line()\n  .curve(d3.curveCatmullRom)\n  .x(d => d.x)\n  .y(d => d.y);\nsvg.append('path')\n  .data([data])\n  .attr('d', line)\n  .attr('fill', 'none')\n  .attr('stroke', 'black');\n\nProvide a dataset where the x values have increasing gaps.\nObserve the rendering artifacts at transition points.\n\nExpected Behavior\nThe path should render smoothly without artifacts, respecting the curve interpolation.\nActual Behavior\nInconsistent rendering results, with artifacts appearing at certain data transitions.\nEnvironment\nD3.js version: 7.x\nBrowser: Chrome 117, Firefox 118\nOS: Windows 11\n", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "KFA24SCM93P"}
{"issue_number": 149, "issue_title": "Bug: useEffect not triggering on state update with multiple dependencies", "issue_body": "Description\nThe useEffect hook is not triggering when state variables with multiple dependencies are updated. This behavior is inconsistent and seems to occur when two or more state variables are included in the dependencies array.\nSteps to Reproduce\n\nCreate a functional component with two state variables using useState.\nUse the useEffect hook and include both state variables in the dependency array.\nUpdate one of the state variables.\nObserve that the useEffect hook does not trigger as expected.\n\nExpected Behavior\nThe useEffect hook should trigger whenever any of the state variables in the dependency array change.\nActual Behavior\nThe useEffect hook does not always trigger when a state update occurs, even if one or more dependencies have changed.\nEnvironment\n\nReact version: 18.2.0\nBrowser: Firefox 117.0\nNode version: 16.13.0\n\nAdditional Information\nThis issue is observed mainly when there are asynchronous state updates inside the useEffect. It does not seem to happen with primitive data types like boolean or number.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Major", "Status:Completed"], "State": "open", "Author": "AFA24SCM87R"}
{"issue_number": 148, "issue_title": "Bug in D3.js Force-Directed Graph Rendering", "issue_body": "Description\\nWhen rendering a force-directed graph with more than 1000 nodes, D3.js freezes and fails to complete the rendering process. This issue occurs with larger datasets and does not display any error messages in the console. Steps to Reproduce 1. Create a dataset with 1000+ nodes. 2. Initialize the force-directed graph using D3.js. 3. Render the graph in a browser. 4. Notice that the rendering freezes and no chart is displayed. Expected Behavior :- The graph should render all nodes and edges without freezing. Actual Behavior:- Rendering halts midway, and the browser becomes unresponsive. Environment :- D3.js version: 7. Browser: Chrome v106.0 OS: Windows 10. Additional Notes :- Performance optimization is needed for handling large datasets in force-directed graphs.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "HFA24SCM09S"}
{"issue_number": 143, "issue_title": "Inconsistent Axis Tick Mark Rendering in d3.axisBottom() with Large Datasets", "issue_body": "When rendering axis tick marks using d3.axisBottom() with large datasets, there appears to be inconsistency in how the tick marks are displayed. Some ticks are missing or overlapping, especially when the axis is scaled to fit data with highly varied ranges. This issue seems to occur most often when using non-linear scales like d3.scaleLog() or d3.scaleTime().\nSteps to reproduce:\n\nCreate a large dataset (e.g., more than 10,000 data points) with a wide range of values.\nApply a logarithmic or time scale to the x-axis.\nUse d3.axisBottom() to render the axis with ticks.\nObserve that some ticks are missing or improperly spaced.\n\nExpected behavior:\nTick marks should be spaced consistently and rendered correctly without overlap or disappearance.\nActual behavior:\nTicks are missing, overlapping, or spaced inconsistently.\nSystem information:\n\nd3.js version: 7.x.x\nBrowser: Chrome 114.0.5735.110\nOS: Windows 10\n\nThank you for looking into this!", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "JFA24SCM87S"}
{"issue_number": 142, "issue_title": "Add Example for Implementing GPT-4 in Flask API", "issue_body": "It would be beneficial to include an example of how to integrate GPT-4 into a Flask API in the OpenAI-cookbook. This would provide developers with a clear, step-by-step guide on how to create an API endpoint that interacts with GPT-4. The following points should be covered:\n\nSetting up a Flask API project.\nInstalling necessary libraries (OpenAI, Flask).\nAuthenticating and calling the GPT-4 API.\nHandling various input/output formats for the API.\nError handling and rate limiting for the API.\nExample use cases, such as chatbots or text generation.\n\nThis would greatly benefit developers looking to quickly integrate GPT models into their web services.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "SFA24SCM80K"}
{"issue_number": 140, "issue_title": "Fix Incorrect Rendering of Nested Components", "issue_body": "Description\\nNested components are not rendering correctly when passed certain props. The child component either doesn't display or causes the parent component to re-render unnecessarily.\\n\\n### Steps to Reproduce\\n1. Create a parent component that passes props to a child component.\\n2. Render the child component conditionally.\\n3. Pass a new prop that triggers a re-render.\\n\\n### Expected Behavior\\nThe child component should render without affecting the parent component's state or causing unnecessary re-renders.\\n\\n### Actual Behavior\\nThe parent component re-renders, causing performance issues.\\n\\n### Environment\\n- React Version: 18.2.0\\n- Browser: Chrome 117.0\\n- OS: macOS 13.0\\n\\n### Possible Solution\\nInvestigate the component lifecycle methods and ensure that memoization or useMemo/useCallback hooks are used appropriately for the child component.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "NFA24SCM36B"}
{"issue_number": 139, "issue_title": "Issue when integrating OpenAI ChatGPT 3.5 API in OpenAI-cookbook", "issue_body": "Problem Description:\nThere is an issue when attempting to integrate OpenAI ChatGPT 3.5 API in the OpenAI-cookbook repository. The API responses seem to not function as expected in certain cases, specifically when [describe the specific situation or context].\nI expected the API to return [expected behavior], but instead, it returned [actual behavior].\nSteps to Reproduce:\n\nClone the OpenAI-cookbook repository.\nSet up the OpenAI API key and install necessary dependencies.\nImplement the example code using the ChatGPT 3.5 API as shown in the OpenAI-cookbook.\nRun the code and observe the unexpected behavior.\n\nEnvironment:\n\nRepo Name: OpenAI-cookbook\nOS: [Your operating system, e.g., Windows 10/macOS 13]\nPython version: [Your Python version]\nAPI version: ChatGPT 3.5\nAdditional information: [Include any additional relevant details]\n\nScreenshots/Logs:\n[Include any relevant screenshots, error messages, or logs.]\nPotential Fix:\n[Optional - Describe any workarounds or solutions you may have explored, if any.]", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Design", "Priority:Critical", "Status:Completed"], "State": "closed", "Author": "KFA24SCM51S"}
{"issue_number": 133, "issue_title": "Inconsistent Axis Label Rendering in Responsive Layouts", "issue_body": "Description\\nWhen using D3.js to create responsive visualizations, axis labels do not scale proportionally when the window is resized. This issue is particularly noticeable in charts with dynamic width and height. The labels either overlap with the chart or become misaligned with the axis.\\n\\n### Steps to Reproduce\\n1. Create a basic bar chart using D3.js with responsive dimensions.\\n2. Add x and y axes with labels.\\n3. Resize the browser window.\\n\\n### Expected Behavior\\nAxis labels should scale proportionally and remain aligned with the axes as the chart resizes.\\n\\n### Actual Behavior\\nLabels either overlap with the chart or are not aligned with the axis after resizing.\\n\\n### Version\\n- D3.js: v7.0.0\\n- Browser: Chrome v94\\n\\n### Possible Solution\\nConsider implementing label scaling logic or allow custom events for developers to control label size during window resize events.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Inquiry", "DetectionPhase:Field", "OriginationPhase:Testing", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "HFA24SCM28G"}
{"issue_number": 132, "issue_title": " Add Comprehensive Documentation for GPT-4 API Use Cases in Higher Education", "issue_body": "Problem:\nThere is a growing interest in using GPT-4 for higher education purposes, such as tutoring, automated grading, and generating study materials. However, the existing OpenAI documentation lacks specific examples and best practices tailored to this field, leaving educators and developers without clear guidance on how to effectively implement the technology.\nProposed Solution:\nExpand the GPT-4 documentation with a dedicated section focused on higher education use cases. This section could include:\nCase studies of institutions successfully leveraging GPT-4.\nBest practices for using GPT-4 in tutoring or automated feedback systems.\nSample prompts and API configurations for grading, personalized learning, and content generation.\nEthical considerations, such as avoiding bias in educational content.\nBenefits:\nImproved accessibility and usability of GPT-4 for educators and developers.\nEmpower institutions to adopt AI in ways that enhance learning outcomes.\nAddress ethical concerns proactively.\nAdditional Context:\nAs an increasing number of universities and education tech startups adopt AI-driven tools, providing clear and detailed examples will help accelerate GPT-4's integration into higher education.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:Approved", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM01S"}
{"issue_number": 130, "issue_title": "Error when using Angular Universal with Angular version 16.0.0", "issue_body": "Description\nI encountered an error when trying to use Angular Universal after upgrading to Angular version 16.0.0. The issue arises during server-side rendering, where the app fails to render properly, and I receive a TypeError: Cannot read property 'property' of undefined.\nSteps to Reproduce\n\nCreate a new Angular project using Angular CLI (v16.0.0).\nInstall Angular Universal with ng add @nguniversal/express-engine.\nAttempt to build and run the project using npm run build:ssr and npm run serve:ssr.\n\nExpected Behavior\nThe app should render properly both client-side and server-side.\nActual Behavior\nThe app fails to render on the server-side, throwing a TypeError in the terminal.\nEnvironment:\n\nAngular version: 16.0.0\nAngular CLI: 16.0.0\nNode version: 18.x\nOperating system: macOS Big Sur\n\nAdditional Information\nThe issue does not occur with Angular 15.x.x. The error seems to be related to dependency changes in Angular 16.0.0.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "Priority:Medium", "Status:Approved", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "AFA24SCM09K8"}
{"issue_number": 129, "issue_title": "Input Binding Fails in ProductDetailsComponent on Initial Load", "issue_body": "Description\nThe ProductDetailsComponent in our Angular application fails to correctly bind input data on the first load. This leads to incomplete rendering of product information in the view until a manual refresh is performed.\nSteps to Reproduce:\nClone the repository and check out the main branch.\nRun npm install and then ng serve to start the application.\nNavigate to the Product Details page for any product.\nObserve that the product information is not fully displayed on the initial load.\nExpected Behavior:\nThe component should properly render all product details as soon as it receives the input data.\nActual Behavior:\nOnly partial information is rendered on the initial load. Refreshing the page corrects the issue and displays the full product details.\nSuggested Fix:\nReview the implementation of the @input() binding in ProductDetailsComponent.\nEnsure the parent component passes all necessary data before the child component is initialized.\nOptionally, implement ngOnChanges or ngAfterViewInit lifecycle hooks to handle input changes and ensure data is updated before rendering.\nEnvironment:\nAngular version: 16.1.0\nBrowser: Google Chrome 117, Firefox 118\nAdditional Information:\nThis issue seems to occur consistently when navigating to the Product Details page for the first time after launching the application.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "open", "Author": "AFA24SCM19P"}
{"issue_number": 128, "issue_title": "Memory leak detected in Angular router when navigating between components", "issue_body": "\"### Issue Summary\\n\\nThere appears to be a memory leak when using the Angular router to navigate between components in an Angular application. The memory usage gradually increases and is not released, causing performance issues over time.\\n\\n### Steps to Reproduce\\n1. Create two components and configure routing between them.\\n2. Continuously navigate back and forth between the components.\\n3. Monitor memory usage in the browser's dev tools.\\n\\n### Expected Behavior\\nThe memory usage should remain consistent, and garbage collection should release unused memory after each navigation.\\n\\n### Actual Behavior\\nThe memory usage increases with each navigation and is not released, indicating a memory leak.\\n\\n### Environment\\n- Angular Version: 16.0.0\\n- Browser: Chrome Version 117\\n- Operating System: Windows 11\\n\\n### Additional Info\\nThe issue was also tested in Firefox, and similar results were observed.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:InProgress", "OriginationPhase: Requirements"], "State": "closed", "Author": "DFA24SCM11D"}
{"issue_number": 127, "issue_title": "Bug in GPT-3 Example: Incorrect Token Counting Logic", "issue_body": "The example script for token counting in GPT-3 under the examples/gpt3_token_count.py section appears to have an incorrect logic for counting tokens. The current implementation does not account for special characters and whitespace accurately, leading to incorrect token limits being enforced when using the max_tokens parameter.\nSteps to reproduce:\n\nRun the provided script with a text input that contains multiple special characters and whitespace.\nCompare the result with the expected token count as per the OpenAI API documentation.\n\nExpected behavior:\nThe token count should match the API documentation for all types of input.\nEnvironment:\n\nPython version: 3.8\nOpenAI Python SDK version: 0.8.0\nOperating System: Ubuntu 20.04\n\nPlease let me know if further clarification is needed.", "created_at": "2024-10-23", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Testing", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "VFA24SCM71M"}
{"issue_number": 117, "issue_title": "Incorrect scaling behavior in d3.scaleLinear with negative domain values", "issue_body": "Description\nWhen using d3.scaleLinear with negative domain values, the scaling function behaves unexpectedly. The output appears to be non-linear when mapping from a negative domain to a positive range.\nSteps to reproduce\n\nCreate a linear scale using d3.scaleLinear().domain([-10, 0]).range([0, 100]).\nCall the scale function with values in the domain, e.g., scale(-5), scale(-2), etc.\nObserve that the scaling output does not appear to map correctly.\n\nExpected behavior\nThe scaling function should map negative domain values to the specified range linearly.\nEnvironment\n\nD3.js version: 7.0.0\nBrowser: Chrome 117.0.0\nOS: macOS 12.6.3\n\nPossible solution\nReview the d3.scaleLinear logic for handling negative domain values and ensure it follows a linear mapping across both positive and negative domains.\nAdditional context\nThe issue does not seem to occur when using only positive domain values or a symmetric domain around zero.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Field", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "HFA24SCM93S"}
{"issue_number": 116, "issue_title": "Bug: Component Fails to Re-render After State Update in useEffect Hook", "issue_body": "When updating the state within the useEffect hook, a component does not re-render as expected. This issue occurs when the state is updated asynchronously within the hook and does not trigger a re-render, despite the state change being reflected in the console. Steps to Reproduce\n\nCreate a component that uses the useEffect hook to update a state variable asynchronously (e.g., fetching data from an API).\nUpdate the state within the useEffect function.\nCheck if the component re-renders after the state update. Expected BehaviorThe component should re-render when the state is updated asynchronously inside the useEffect hook. Actual Behavior The state updates but the component does not re-render.\n", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "Priority:Medium", "Status:Approved", "OriginationPhase: Requirements", "DetectionPhase.Design"], "State": "closed", "Author": "NFA24SCM09S"}
{"issue_number": 115, "issue_title": "Bug: Component re-rendering unexpectedly on state change", "issue_body": "happens even though the state is used in a non-render impacting logic.\nSteps to Reproduce:\nCreate a component with multiple useState hooks.\nUpdate a state variable that is not directly connected to the UI render.\nObserve the component re-rendering unnecessarily.\nExpected Behavior: The component should only re-render when a state change affects the rendered output.\nActual Behavior: The component re-renders even when state changes are not impacting the DOM.\nVersions:\nReact version: 18.0.0\nBrowser: Chrome 100.0.4896.127\nAdditional Information: This issue was observed after upgrading to React 18. It might be related to the new automatic batching functionality.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Bug", "Priority:Medium", "Status:InProgress", "OriginationPhase.Design", "DetectionPhase.Design"], "State": "open", "Author": "NFA24SCM31T"}
{"issue_number": 114, "issue_title": "Inconsistent Results When Using GPT-3.5-Turbo for Summarization Tasks", "issue_body": "Issue Description\\nWhile utilizing the GPT-3.5-Turbo model for summarization tasks, there are cases where the model provides inconsistent or overly verbose summaries, despite setting the temperature to a low value (0.2). Additionally, there appears to be variation in the length and detail of the summaries when running the same prompt multiple times. \\n\\n## Steps to Reproduce:\\n1. Use the GPT-3.5-Turbo model for summarization with the following settings:\\n   - Temperature: 0.2\\n   - Max tokens: 256\\n2. Provide the same input text multiple times and observe the variation in output.\\n\\n## Expected Behavior:\\nSummaries should be concise and consistent when using low temperature settings across multiple runs.\\n\\n## Observed Behavior:\\nSummaries often vary in detail and length, with occasional verbose outputs despite settings aimed at reducing randomness.\\n\\n## Environment Details:\\n- Model: GPT-3.5-Turbo\\n- API Version: 2024-10-20\\n- Programming Language: Python\\n\\n## Suggested Fix:\\nReview the temperature and token handling mechanisms within the GPT-3.5-Turbo model, particularly for summarization tasks. Consider providing a dedicated summarization parameter or enhancing consistency for low-temperature settings.", "created_at": "2024-10-23", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "open", "Author": "SFA24SCM49R"}
{"issue_number": 112, "issue_title": "Bug: Error When Running Example Code for Text Completion with GPT-3", "issue_body": "When running the example code provided in the text-completion.py script from the OpenAI-cookbook repository, an error occurs related to the API response structure. The script throws a 'KeyError' for the 'choices' field in the response.\nSteps to Reproduce:\n\nClone the OpenAI-cookbook repository.\nNavigate to the examples/text-completion.py script.\nRun the script using a valid OpenAI API key. Expected Behavior: The script should output a text completion response without throwing an error. Actual Behavior: The script fails with a 'KeyError' indicating that the 'choices' field is missing from the response.\n\nEnvironment: Python version: X.X.X, OpenAI SDK version: X.X.X, Operating System: MacOS/Windows/Linux. Additional Context: The issue seems to have started occurring after a recent API update. Updating the script to align with the new API response structure might resolve the problem.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM02G"}
{"issue_number": 109, "issue_title": "Bug in GPT-3 Fine-tuning Example: Incorrect Token Count Calculation", "issue_body": "There seems to be an issue in the fine-tuning example provided in the OpenAI-cookbook. The token count calculation in the preprocessing step doesn't account for special tokens, leading to an incorrect token count during training. This results in errors during the training phase when the token count exceeds the model's limit. To replicate this issue, follow these steps:\n\nRun the fine-tuning example with a dataset containing long inputs.\nNotice that the token count exceeds the model's maximum limit.\nSuggested fix: Update the token count logic to include special tokens and handle cases where the token count exceeds the model\u2019s token limit.\"\n", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "Priority:Medium", "Status:pendingReview", "OriginationPhase: Requirements"], "State": "closed", "Author": "SFA24SCM69P"}
{"issue_number": 108, "issue_title": "Enhancement: Optimize Component Rendering for Better Performance", "issue_body": "Description:\nCurrently, some components in the application are experiencing performance issues due to inefficient re-renders.\nThis issue proposes optimizing the rendering of React components by implementing React.memo and useCallback hooks where applicable.\nSteps to Implement: 1. Identify components with excessive re-renders.\n2. Apply React.memo to prevent unnecessary re-renders of functional components.\n3. Implement useCallback for functions that are passed as props to memoized components.\n4. Test the changes to ensure performance improvement.\n5. Expected Outcome\\nOptimized performance with reduced rendering times and smoother user experience.", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "OriginationPhase:Design", "Priority:Critical", "Status:Approved", "DetectionPhase.Design"], "State": "closed", "Author": "NFA24SCM76P"}
{"issue_number": 107, "issue_title": "Enhancement: Add more examples for fine-tuning GPT models on specific tasks", "issue_body": "The current OpenAI Cookbook provides some great examples for working with GPT models, but there is limited guidance on fine-tuning models for domain-specific tasks. It would be helpful to have more detailed examples on how to fine-tune GPT models for particular use cases like:\n\nText classification.\nNamed entity recognition.\nQuestion answering with custom datasets.\n\nAdditionally, the inclusion of more advanced techniques for hyperparameter tuning, optimization strategies, and performance evaluation would greatly benefit developers working on more specialized applications. Could these topics be considered for future examples and documentation updates?\nThanks for the great work so far!", "created_at": "2024-10-23", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:pendingReview"], "State": "closed", "Author": "VFA24SCM71M"}
{"issue_number": 106, "issue_title": "Enhance Documentation for Fine-Tuning GPT-4 with Custom Datasets", "issue_body": "The current documentation for fine-tuning GPT-4 with custom datasets provides basic guidance but lacks detailed steps and best practices for specific use cases, such as handling large datasets, optimizing for training efficiency, and addressing model performance issues. This issue proposes to enhance the fine-tuning section by adding more detailed tutorials, including code snippets for pre-processing data, model training monitoring, and evaluation. Additionally, covering more advanced fine-tuning techniques would help users fine-tune GPT-4 models for various industry-specific applications.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "SFA24SCM91L"}
{"issue_number": 102, "issue_title": "Enhancement: Add Support for Custom Color Schemes in Charts", "issue_body": "Description: It would be beneficial to allow users to define custom color schemes for charts created using d3.js. This feature would enhance the flexibility and visual appeal of data visualizations, enabling users to tailor charts to fit specific design requirements or branding guidelines.\nProposed Solution:\nIntroduce a new option in the chart configuration to accept a color palette array.\nUpdate the color mapping logic to utilize the provided color palette for data points.\nEnsure backward compatibility with existing color schemes.\nBenefits:\nIncreased customization options for developers and designers.\nImproved user experience and visual consistency across different charts.\nExample Use Case: A user wants to create a chart that aligns with their company\u2019s branding colors. By allowing custom color schemes, they can easily implement this without modifying the core library.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "KFA24SCM51S"}
{"issue_number": 99, "issue_title": "Enhance React Component Error Boundaries", "issue_body": "React's error boundaries provide a way to catch and handle errors in the component tree, preventing the entire application from crashing. However, the current implementation could be improved to offer more flexibility in error recovery and more detailed error reporting. This issue proposes enhancing React's error boundaries with features such as component-level recovery strategies, more informative error messages, and better integration with developer tools for debugging. Improving these aspects will make React more robust in production environments and offer developers a smoother debugging experience.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "PFA24SCM65M"}
{"issue_number": 98, "issue_title": "Bug: useEffect not running on state change", "issue_body": "The useEffect hook does not trigger as expected when a state value changes. This issue occurs intermittently and affects components relying on side effects based on state updates. Steps to Reproduce: 1. Create a component using useState and useEffect. 2. Set the useEffect dependency array to include a state value. 3. Update the state through an event handler. Expected Behavior: useEffect should run whenever the specified state value changes. Actual Behavior: useEffect does not run on some state changes, causing inconsistent behavior in the component. Environment: React version: 18.2.0. Additional Context: This issue seems to occur randomly and may be related to batching behavior.\"", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "MFA24SCM08V"}
{"issue_number": 97, "issue_title": "Extend NgModel to Support Deep Object Binding", "issue_body": "Angular's NgModel directive provides essential functionalities for two-way data binding, but it currently lacks built-in support for deep object properties. This limitation requires developers to implement additional logic to handle nested data bindings. Enhancing NgModel to natively support deep object paths would simplify form handling in complex applications, reduce boilerplate code, and improve overall development efficiency. Proposed improvements include the ability to bind directly to nested object properties using a dot notation in the NgModel directive, such as 'user.profile.name'. This enhancement would provide a more intuitive and powerful way to handle complex data structures directly within templates.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "AFA24SCM84S"}
{"issue_number": 95, "issue_title": "Enhance Accessibility Features in Angular Forms", "issue_body": "Angular's form handling capabilities are robust and provide developers with a variety of tools for building forms. However, the accessibility features of these forms can be further improved to support a wider range of assistive technologies. Improvements could include better ARIA attributes integration and more detailed keyboard navigation options. These enhancements would not only make Angular forms more accessible but would also enhance the overall user experience by making forms easier to navigate for all users. Suggested steps include: 1. Review current form components for ARIA compliance. 2. Develop a set of best practices for keyboard navigation in Angular forms. 3. Implement these practices in the default Angular form components.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "DFA24SCM74V"}
{"issue_number": 94, "issue_title": "Optimize React Virtual DOM Updates for Large Lists", "issue_body": "React's virtual DOM provides efficient updates by only re-rendering nodes that change. However, when dealing with large lists or complex state changes, performance can degrade, especially on less powerful devices. This issue proposes optimizations to React's reconciliation algorithm to handle large lists more efficiently. Proposed changes could include implementing windowing techniques, optimizing the diffing algorithm for list updates, and providing more granular control over component updates through shouldComponentUpdate hooks. These enhancements would help developers manage large datasets more effectively, reducing render times and improving user experience.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "PFA24SCM25S"}
{"issue_number": 93, "issue_title": "Feature Request: Support for Real-time Data Streaming in d3.js.", "issue_body": "I would like to request support for real-time data streaming within the d3.js library. This feature would enable the handling and visualization of data that is updated in real-time, which is essential for applications such as live dashboards, monitoring systems, and dynamic data visualizations.\nExpected Behavior:\n\nAbility to bind data that updates in real-time to d3.js visualizations.\nAutomatic re-rendering or transition effects for changes in data without requiring full redraws.\nFlexibility to handle different streaming protocols (e.g., WebSockets, Server-Sent Events).\n\nPotential Use Cases:\n\nLive stock market data visualizations.\nReal-time IoT device data monitoring.\nDynamic updates to user interaction statistics in dashboards.\n\nCurrent Workarounds:\nCurrently, to achieve real-time data updates, developers need to manually manage the update and re-rendering processes. Native support in d3.js would significantly reduce complexity and improve performance.\"", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "HFA24SCM63P"}
{"issue_number": 92, "issue_title": "Improve Documentation for GPT-3 Fine-Tuning with Custom Datasets", "issue_body": "The current documentation for fine-tuning GPT-3 models using custom datasets is minimal and lacks clear examples for different use cases. It would be helpful to have more comprehensive step-by-step guides with detailed explanations, especially for:\n\nFormatting input data for fine-tuning.\nCommon preprocessing steps.\nHandling errors during fine-tuning.\nBest practices for dataset size and quality.\n\nAdditionally, providing example code for common tasks like loading a dataset, configuring fine-tuning parameters, and evaluating the model\u2019s performance after training would be valuable for users.", "created_at": "2024-10-22", "closed_at": "2024-10-22", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "SFA24SCM04D"}
{"issue_number": 91, "issue_title": "Add Example for Fine-Tuning GPT-3.5 with Custom Dataset", "issue_body": "It would be helpful to include an example in the OpenAI-cookbook demonstrating how to fine-tune GPT-3.5 using a custom dataset.\nThis could cover:\n\nFormatting the dataset (e.g., text and labels).\nUploading the dataset to OpenAI's platform.\nFine-tuning steps using the OpenAI API.\nBest practices for evaluating and iterating on fine-tuned models.\n\nSuch an example would be useful for users who need specific model customizations based on domain-specific data. Thank you!\"", "created_at": "2024-10-22", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "Category:Inquiry", "DetectionPhase:Coding", "Priority:Low", "Priority:Major", "Status:Completed", "Status:Rejected"], "State": "closed", "Author": "SFA24SCM76G"}
{"issue_number": 90, "issue_title": "Add Example for Handling Large Language Model Output with Streaming Responses", "issue_body": "Summary:\nProvide an example that demonstrates how to handle and process large language model (LLM) outputs in a streaming fashion within the OpenAI API. This would be particularly useful for managing long outputs that exceed typical memory constraints or require real-time processing, as opposed to buffering the entire response before acting.\nDescription:\nCurrently, most examples in the OpenAI-cookbook showcase how to interact with the API in a request-response pattern, where the complete response is returned at once. However, handling large outputs\u2014such as generating lengthy documents or real-time interactive applications\u2014requires processing the responses as they arrive, particularly in applications like chatbots, transcription services, or real-time content generation tools.\nAn example that demonstrates how to:\n\nImplement API calls using the stream=True parameter to receive data incrementally.\nHandle the streamed data efficiently (e.g., processing tokens as they arrive).\nUse the stream functionality in practical applications, such as real-time chat or document generation.\nOptionally handle retries and ensure proper error handling for streamed responses.\n\nThis would provide developers with a more comprehensive understanding of how to leverage the OpenAI API for use cases involving large-scale output, as well as applications that require real-time responsiveness.\nBenefits:\n\nImproves handling of large outputs that may not fit in memory or need immediate processing.\nSupports developers building real-time applications with OpenAI models.\nEnhances the cookbook by expanding use case coverage, making it a more versatile resource.\n\nSuggested Approach:\n\nInclude a step-by-step guide in the examples section.\nProvide code snippets in Python to demonstrate API interaction with streaming responses.\nCover practical scenarios where streaming is most effective.\n\nAdditional Context:\nThere has been a growing demand for efficient ways to handle large responses from language models, especially in interactive applications and services where latency and memory constraints are important factors. This example will fill an existing gap and help developers optimize their systems using OpenAI technology.", "created_at": "2024-10-22", "closed_at": "2024-10-22", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "TFA24SCM64P"}
{"issue_number": 89, "issue_title": "Error: Expression Changed After It Has Been Checked in lifecycle hooks", "issue_body": "Description:\nI encountered an ExpressionChangedAfterItHasBeenCheckedError while updating a component property within the ngOnInit lifecycle hook. This error seems to occur when a change is detected after Angular's change detection cycle has completed.\nSteps to Reproduce:\n\nCreate a component with a bound property.\nModify the property inside the ngOnInit hook.\nObserve the ExpressionChangedAfterItHasBeenCheckedError in the console.\n\nExpected Behavior:\nThe component should update without throwing the error, or a clear explanation should be provided as to why this behavior occurs.\nCurrent Behavior:\nThe app throws an ExpressionChangedAfterItHasBeenCheckedError when a value is updated during the ngOnInit phase.\nEnvironment:\n\nAngular Version: 14.0.0\nNode.js Version: 16.13.0\nBrowser: Chrome 96\nOS: Windows 10\n\nAdditional Context:\nI\u2019ve followed the common practices for data binding, and the error persists across various scenarios. Let me know if further details are required.\"", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Field", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "AFA24SCM44E"}
{"issue_number": 86, "issue_title": "Bug: React state not persisting after fast consecutive state updates", "issue_body": "Description\nIn certain scenarios, when state updates are triggered in rapid succession (within a few milliseconds), React fails to correctly persist the latest state. Instead, an older state is rendered or state changes are skipped entirely.\nSteps to Reproduce\n\nCreate a functional component with a state variable.\nTrigger multiple state updates using setState or useState within a very short timeframe.\nObserve that the state sometimes doesn't reflect the most recent update, especially when debounced or throttled.\n\nExpected Behavior\nReact should properly capture and render the most up-to-date state after consecutive state updates, regardless of timing.\nActual Behavior\nThe state sometimes lags behind or updates incorrectly after multiple rapid changes.\nReproducible Example\nHere is a minimal code example to reproduce the issue:\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  const updateCount = () => {\n    setCount(prev => prev + 1);\n    setCount(prev => prev + 1);\n    setCount(prev => prev + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={updateCount}>Increment</button>\n    </div>\n  );\n}\n\nexport default App;", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:InProgress"], "State": "closed", "Author": "OFA24SCM90B"}
{"issue_number": 84, "issue_title": "Bug: Unexpected Behavior with Angular Form Validation", "issue_body": "Description:\\nThere seems to be an issue with Angular form validation where the 'required' attribute is not properly triggering validation errors. Specifically, when dynamically updating form fields, the validation does not recognize the newly added 'required' fields until another field is manually interacted with.\\n\\n### Steps to Reproduce:\\n1. Create a reactive form with dynamic form controls.\\n2. Add a 'required' field dynamically after form initialization.\\n3. Attempt to submit the form without interacting with the dynamically added field.\\n\\n### Expected Behavior:\\nThe form should immediately show validation errors for any dynamically added 'required' fields.\\n\\n### Actual Behavior:\\nNo validation errors appear until another form control is interacted with.\\n\\n### Environment:\\n- Angular Version: 14.2.0\\n- Browser: Chrome 106.0\\n- OS: Windows 10\\n\\n### Possible Fix:\\n", "created_at": "2024-10-22", "closed_at": "2024-10-22", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "DFA24SCM31P"}
{"issue_number": 81, "issue_title": "Error when using ngFor directive with async pipe", "issue_body": "Description\nWhen using the ngFor directive in combination with the async pipe, an error occurs under certain conditions. Specifically, when the observable being passed to the async pipe completes, the following error is thrown:\nERROR TypeError: Cannot read properties of undefined (reading 'length')\nThis seems to happen when the observable returns null or undefined before completion.\nExpected Behavior\nThe ngFor directive should handle null or undefined values gracefully and not throw an error.\nReproduction Steps\n\nSet up an Angular component with an observable that returns null or undefined at some point during its lifecycle.\nUse the ngFor directive with the async pipe to bind the observable to the view.\nObserve the error in the browser's console.\n\nVersion Info\n\nAngular Version: 15.2.0\nNode Version: 18.12.1\nOS: macOS Ventura 13.0\n\nPossible Fix\nA potential fix might involve updating the ngFor directive to check for null or undefined and handle these cases without throwing an error.\nAdditional Context\nThis issue affects components that rely heavily on async data streams, especially when dealing with incomplete or non-continuous data sources.", "created_at": "2024-10-22", "closed_at": "2024-10-22", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Testing", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "Akash-2204"}
{"issue_number": 80, "issue_title": "API Key Not Accepted During Requests", "issue_body": "Description\nI am encountering an issue where my API key is not being accepted during requests made to the OpenAI API. This occurs consistently, regardless of the endpoint being used.\nSteps to Reproduce\n\nSet up the environment with the latest version of the OpenAI Cookbook.\\n2. Use the following sample code to make an API request:\n\nimport openai\nopenai.api_key = 'your_api_key'\nresponse = openai.ChatCompletion.create(\n       model='gpt-3.5-turbo',\n       messages=[{'role': 'user', 'content': 'Hello!'}]\n   )\n\nRun the code.\n\nExpected Behavior\nThe request should succeed and return a valid response from the API.\nActual Behavior\nThe request fails with the following error message: Invalid API key provided.\nAdditional Information\n\nI have verified that my API key is valid and has the necessary permissions.\nThis issue persists even after regenerating the API key.\nI am using Python 3.8 and the latest version of the OpenAI library.\n", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Field", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "SFA24SCM72J"}
{"issue_number": 78, "issue_title": "Bug: Angular Router not preserving queryParams during navigation", "issue_body": "Description\\nWhen navigating between routes using router.navigate with the queryParamsHandling option set to 'preserve', the query parameters are not retained as expected.\\n\\n### Steps to Reproduce\\n1. Create a route that navigates to another route using the Angular router.\\n2. Use the queryParamsHandling: 'preserve' option in the router.navigate method.\\n3. Observe that the query parameters are not preserved when navigating between routes.\\n\\n### Expected Behavior\\nQuery parameters should be retained during navigation when the queryParamsHandling: 'preserve' option is used.\\n\\n### Actual Behavior\\nThe query parameters are removed during navigation.\\n\\n### Angular Version\\n- Angular: 16.1.0\\n\\n### Reproduction URL\\nProvide a minimal reproduction via a StackBlitz or GitHub repo.\\n\\n### Additional Context\\nThis issue occurs in both browser and server environments.\\n\"", "created_at": "2024-10-22", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:pendingReview"], "State": "open", "Author": "AFA24SCM97N"}
{"issue_number": 77, "issue_title": "Bug: Unexpected Behavior with Angular Form Validation", "issue_body": "Description:\\nThere seems to be an issue with Angular form validation where the 'required' attribute is not properly triggering validation errors. Specifically, when dynamically updating form fields, the validation does not recognize the newly added 'required' fields until another field is manually interacted with.\\n\\n### Steps to Reproduce:\\n1. Create a reactive form with dynamic form controls.\\n2. Add a 'required' field dynamically after form initialization.\\n3. Attempt to submit the form without interacting with the dynamically added field.\\n\\n### Expected Behavior:\\nThe form should immediately show validation errors for any dynamically added 'required' fields.\\n\\n### Actual Behavior:\\nNo validation errors appear until another form control is interacted with.\\n\\n### Environment:\\n- Angular Version: 14.2.0\\n- Browser: Chrome 106.0\\n- OS: Windows 10\\n\\n### Possible Fix:\\n", "created_at": "2024-10-22", "closed_at": "2024-10-24", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "DFA24SCM31P"}
{"issue_number": 76, "issue_title": "Update Documentation for API Usage Examples", "issue_body": "The documentation for the API usage examples needs to be updated to include the latest methods and best practices. This should cover new functionalities added in the last release, with clear code snippets and explanations for better clarity. Additionally, we should ensure that the examples reflect real-world scenarios to enhance usability for developers.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "TFA24SCM41T"}
{"issue_number": 72, "issue_title": "Error Handling Incomplete in GPT-3 Fine-tuning Example", "issue_body": "In the fine-tuning example for GPT-3 located in the OpenAI-cookbook, the current error handling mechanism does not account for rate limiting and network disruptions. This can lead to crashes during the training process. Suggest adding retries with exponential backoff and clearer error messaging for cases when API requests fail.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "VFA24SCM17B"}
{"issue_number": 71, "issue_title": "Bug: Incorrect example for handling rate limits in the API documentation", "issue_body": "The current example for handling rate limits in the API documentation does not properly implement exponential backoff. This may lead to frequent API failures under high usage. It would be great if the code could be updated to demonstrate proper retry logic with exponential backoff, including a way to handle 'Retry-After' headers for improved API stability.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "OriginationPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:InProgress"], "State": "closed", "Author": "YFA24SCM47P"}
{"issue_number": 63, "issue_title": "Add support for React 18 features in documentation", "issue_body": "As React 18 introduces several new features like automatic batching, transitions, and concurrent rendering, the documentation needs to be updated to reflect these changes. This includes:\n\\n\\n1. Detailed examples of how to implement automatic batching in applications.\n\\n2. A section dedicated to transitions, explaining their use cases and best practices.\n\\n3. Clear guidelines on using concurrent rendering with existing components.\n\\n\\nUpdating the documentation will help developers leverage these new features effectively and improve their experience with React.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "PFA24SCM24M"}
{"issue_number": 62, "issue_title": "Feature Request: Enhance Form Validation with Custom Validators", "issue_body": "Summary\nWe would like to propose an enhancement to the Angular forms module by introducing support for custom validators. This feature will allow developers to define their own validation logic, improving flexibility and reusability across applications.\nProposed Solution\nIntroduce a new interface for custom validators that will allow developers to implement their own validation logic.\nUpdate the existing form validation API to integrate with the new custom validators.\nProvide documentation and examples on how to create and use custom validators in Angular applications.\nBenefits\nImproved flexibility in form validation.\nReusable validation logic across different forms and components.\nEnhanced user experience by providing real-time feedback on form validation errors.\nRelated Issues\n#1234 (if applicable)\nAdditional Context\nReference to similar features in other frameworks (if applicable).\nAny additional notes or context that may be useful.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "DFA24SCM62M"}
{"issue_number": 61, "issue_title": "Request for Example on Time Series Forecasting with LSTM and OpenAI Models", "issue_body": "I am working on a project involving time series forecasting and would like to see an example that demonstrates the use of LSTM (Long Short-Term Memory) for this purpose in combination with OpenAI models. Currently, the examples provided are excellent for general tasks, but it would be helpful to include more complex scenarios like time series analysis, especially for forecasting tasks. Specifically, an example using Python with TensorFlow or PyTorch for building the LSTM model, and how OpenAI models can be integrated to enhance predictions, would be highly valuable for developers working on similar projects. Thank you!", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "SFA24SCM49T"}
{"issue_number": 59, "issue_title": "Refactor Component Structure for Better Reusability", "issue_body": "The current component structure is deeply nested, leading to reduced reusability and increased complexity. Refactoring the existing components into more modular and reusable ones will enhance maintainability and reduce future development efforts.\nProposed Changes:\n-Break down larger components into smaller, reusable subcomponents.\\n- Ensure each component follows the single responsibility principle.\n\nUpdate routing to reflect the new component hierarchy.\nWrite unit tests for new components to ensure functionality.\n\nBenefits:\n\n\nImproved code readability.\n\n\nBetter reusability of components across the application.\n\n\nEasier maintenance and debugging.\n\n\nImpact:\n\n\nThis will affect several existing components and may require updates to routing and styling\n\n", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "AFA24SCM23V"}
{"issue_number": 57, "issue_title": "Missing error handling in example for OpenAI API rate limits", "issue_body": "The examples in the OpenAI Cookbook for interacting with the OpenAI API do not include error handling for rate limits. When the API rate limit is reached, the script fails without retrying or providing meaningful feedback. This can cause confusion for users who may not realize they have exceeded the API rate limit. Steps to Reproduce: 1. Use one of the OpenAI API examples from the cookbook (e.g., a GPT-3 generation example). 2. Make repeated requests in a short period of time to trigger the API rate limit. 3. Observe that the script fails without retry logic or clear error messages regarding rate limiting. Expected Behavior: The examples should handle rate limit errors gracefully by implementing retry logic with exponential backoff or informing the user about the rate limit error with a clear message. Actual Behavior: The script fails when the API rate limit is reached, without retrying or giving useful feedback to the user. Environment: OpenAI API version: 2023-09-01, Python 3.8+. Additional Context: Including error handling for rate limits would make the examples more robust and user-friendly, especially for developers working with the API in production environments.\n", "created_at": "2024-10-22", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:Approved"], "State": "open", "Author": "TFA24SCM16B"}
{"issue_number": 55, "issue_title": "Angular Component Not Updating When Input Changes", "issue_body": "There seems to be an issue with Angular components not updating properly when the @Input value changes. I am passing a dynamic value into a child component using the @Input decorator, but the component is not reflecting the updated value after change detection.\nSteps to Reproduce:\n\nCreate a parent and child component in Angular.\nPass an @Input property from the parent to the child.\nUpdate the value of the property in the parent component after some event (like a button click).\nObserve that the child component does not reflect the updated value.\n\nExpected Behavior:\nThe child component should update when the input value changes.\nActual Behavior:\nThe child component does not reflect the updated value unless manually triggered with change detection methods like ChangeDetectorRef.markForCheck().\nEnvironment:\n\nAngular Version: 12.0.0\nBrowser: Chrome 90\n", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "BFA24SCM87C"}
{"issue_number": 54, "issue_title": "useEffect not running on state change", "issue_body": "The useEffect hook does not trigger as expected when a state value changes. This issue occurs intermittently and affects components relying on side effects based on state updates. Steps to Reproduce: 1. Create a component using useState and useEffect. 2. Set the useEffect dependency array to include a state value. 3. Update the state through an event handler. Expected Behavior: useEffect should run whenever the specified state value changes. Actual Behavior: useEffect does not run on some state changes, causing inconsistent behavior in the component. Environment: React version: 18.2.0. Additional Context: This issue seems to occur randomly and may be related to batching behavior.\"", "created_at": "2024-10-22", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Completed"], "State": "open", "Author": "mvadlamudi08"}
{"issue_number": 52, "issue_title": "Bug: useEffect Hook not cleaning up on component unmount", "issue_body": "\"### Description\nThe useEffect hook does not consistently clean up resources when the component is unmounted, which leads to memory leaks. This issue occurs sporadically in both development and production builds.\nSteps to Reproduce\n\nCreate a functional component that uses the useEffect hook with a cleanup function.\nEnsure that the component is mounted and then unmounted.\nObserve that the cleanup function is not always called, leading to open resources or listeners.\n\nExpected Behavior\nThe cleanup function inside useEffect should always be called when the component is unmounted.\nActual Behavior\nThe cleanup function is sometimes skipped, causing memory leaks or leftover event listeners.\nVersions\n\nReact: 18.2.0\nBrowser: Chrome 116.0\nOS: macOS 13.5\n\nAdditional Information\nThis issue started after upgrading from React 17 to 18. No major changes were made to the component structure.\"\n}", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "RFA24SCM49C"}
{"issue_number": 51, "issue_title": "Bug: Angular component lifecycle hooks are not working after upgrading to Angular 15", "issue_body": "Description:\nAfter upgrading to Angular 15, the component lifecycle hooks like ngOnInit and ngOnDestroy are not triggered for dynamically loaded components in lazy-loaded modules.\nSteps to Reproduce:\n\nUpgrade an Angular project to version 15.\nImplement lazy-loaded modules with components using lifecycle hooks.\nLoad the component dynamically and observe that the hooks don't execute.\n\nExpected Behavior:\nLifecycle hooks should execute correctly.\nActual Behavior:\nHooks are not triggered or only partially triggered.\nVersion:\nAngular CLI: 15.0.0\nNode: 16.13.0\nOS: macOS 12.5", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Critical", "Status:pendingReview"], "State": "closed", "Author": "AFA24SCM69R"}
{"issue_number": 48, "issue_title": "Title\": \"Unexpected Behavior with useState Initial Value in Strict Mode\",", "issue_body": "{\n\"Title\": \"Unexpected Behavior with useState Initial Value in Strict Mode\",\n\"Body\": \"### Description:\nWhen running the app in React Strict Mode, the useState hook behaves unexpectedly by re-initializing its state on every render. This issue does not occur outside of Strict Mode.\nSteps to Reproduce:\n\nWrap the app with <React.StrictMode>.\nCreate a component with a useState hook and log the initial state value.\nNotice that the initial state is logged multiple times, indicating re-initialization.\n\nExpected Behavior:\nThe useState hook should initialize state only once, even in Strict Mode.\nActual Behavior:\nThe state is re-initialized on every render.\nReproducible Example:\nimport React, { useState } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(() => {\n    console.log('Initializing state...');\n    return 0;\n  });\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <React.StrictMode>\n      <ExampleComponent />\n    </React.StrictMode>\n  );\n}", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:Approved"], "State": "closed", "Author": "NFA24SCM09V"}
{"issue_number": 41, "issue_title": "Bug: RouterLinkActive not updating correctly on navigation", "issue_body": "Description\\nWhen using RouterLinkActive to toggle class styles based on route changes, the active state doesn't always update correctly when navigating between nested routes.\\n\\n### Steps to Reproduce\\n1. Create a parent route with nested child routes.\\n2. Use [routerLinkActive] on navigation links to indicate the active route.\\n3. Navigate between parent and child routes.\\n4. Observe that the routerLinkActive class is not applied/removed consistently.\\n\\n### Expected Behavior\\nThe routerLinkActive directive should apply the active class reliably on every route change.\\n\\n### Actual Behavior\\nThe active class remains unchanged or updates incorrectly in some cases.\\n\\n### Versions\\n- Angular: 15.2.4\\n- Browser: Chrome 129.0.0\\n- Operating System: Windows 10\\n\\n### Additional Context\\nThis issue seems to occur more frequently when the navigation involves routes with similar path prefixes. Possible race conditions might be involved. A sample project demonstrating this issue is available here.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "AFA24SCM60T"}
{"issue_number": 40, "issue_title": "Bug: Angular `ngFor` directive causing memory leaks with large datasets", "issue_body": "Description\nWhen using the ngFor directive to render large datasets (e.g., 10,000+ items), memory leaks are observed, leading to performance degradation. This issue persists even after removing the elements from the DOM.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Critical", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM48C"}
{"issue_number": 39, "issue_title": "Unexpected Behavior: ngModel Change Detection Fails in Nested Components", "issue_body": "When using ngModel for form controls within nested components, the change detection does not trigger correctly, resulting in outdated or incorrect data being displayed. This issue seems to occur when ngModel is used in combination with ngFor directives.", "created_at": "2024-10-22", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "open", "Author": "EFA24SCM03M"}
{"issue_number": 37, "issue_title": "Improve Documentation for React Hooks", "issue_body": "The current documentation for React Hooks can be overwhelming for beginners. It would be beneficial to provide more simplified examples and a clearer explanation of when to use each hook. Additionally, a dedicated section for common pitfalls and best practices would enhance understanding. This could help new developers adopt hooks more effectively and improve their overall experience with React.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "RFA24SCM62N"}
{"issue_number": 36, "issue_title": "Error When Navigating to Route with Missing Parameter", "issue_body": "Navigating to a route that requires a parameter but is missing it results in an unhandled error instead of a user-friendly message. Steps to Reproduce: 1. Create a route that requires a parameter (e.g., /user/:id). 2. Try to navigate to /user/ without providing the id parameter. 3. Observe the error in the console. Expected Behavior: The application should handle the missing parameter gracefully and display a user-friendly error message. Actual Behavior: An unhandled error is thrown, causing the navigation to break. Angular Version: Provide the version of Angular being used to troubleshoot the issue.\"", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:Approved"], "State": "closed", "Author": "CFA24SCM76G"}
{"issue_number": 34, "issue_title": "Enhancement: Add Example for Text Summarization Using GPT-4", "issue_body": "Problem Statement:\nCurrently, there is no specific example in the OpenAI Cookbook that demonstrates how to use GPT-4 for text summarization. Users looking for this feature need to manually adjust other examples, which can be time-consuming and error-prone.\nProposed Solution:\nAdd a dedicated example for text summarization using GPT-4 in the 'text-generation' section. The example should:\n\nDemonstrate how to take a long text input and output a concise summary.\nInclude parameter tuning tips to control summary length.\nOffer insights into optimizing the prompt for different types of summarization (e.g., extractive vs. abstractive).\n\nBenefits:\n\nEnhances the usability of the OpenAI Cookbook by covering a common use case.\nSaves users time by providing a well-structured, working example.\nEncourages adoption of GPT-4 for summarization tasks in various applications.\n\nAdditional Context:\nA significant portion of users have been discussing text summarization in the community forums, highlighting the demand for this feature.", "created_at": "2024-10-22", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Design", "Priority:Medium", "Status:pendingReview"], "State": "closed", "Author": "SFA24SCM25R"}
{"issue_number": 32, "issue_title": "Enhancement: Add Support for Nested Data Structures ", "issue_body": "Currently, D3.js provides excellent support for flat data structures. However, handling nested data structures can be cumbersome for developers looking to visualize hierarchical data effectively. This issue proposes adding new utility functions that streamline the process of binding nested data to visual elements. Suggested features include:\\n\\n1. Simplified methods for creating hierarchies from nested data.\\n2. Enhanced support for nested selections and transitions.\\n3. Documentation and examples showcasing best practices for using these features.\\n\\nImplementing these enhancements will improve usability for users working with complex datasets and foster better data visualizations.", "created_at": "2024-10-21", "closed_at": "2024-10-22", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "HFA24SCM28G"}
{"issue_number": 31, "issue_title": "Bug: Incorrect state update in useEffect with async function", "issue_body": "{\n\"Title\": \"Bug: Incorrect state update in useEffect with async function\",\n\"Body\": \"## Description\\nWhen using useEffect with an async function, the state doesn't update correctly if the component is unmounted before the promise resolves. This leads to a memory leak warning.\\n\\n## Steps to Reproduce\\n1. Create a component with an async function inside useEffect.\\n2. Unmount the component before the async task completes.\\n3. Observe that the state update still occurs, resulting in a memory leak warning.\\n\\n## Expected Behavior\\nThe state update should be canceled if the component is unmounted.\\n\\n## Environment\\n- React version: 18.2.0\\n- Browser: Chrome 114.0.5735.199\\n\\n## Possible Solution\\nUse an abort controller or clean up the promise in the useEffect cleanup function.\"\n}", "created_at": "2024-10-21", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "MFA24SCM58D"}
{"issue_number": 30, "issue_title": "Bug: Data binding not working as expected in template-driven forms", "issue_body": "Description\nWhen using template-driven forms in Angular, two-way data binding between the model and the form controls does not work correctly. The form input fails to update the bound model after user interaction.\nSteps to Reproduce\n\nCreate a template-driven form using ngModel in an Angular component.\nBind an input field to a model property.\nModify the input value in the UI.\nObserve that the model does not update as expected.\n\nExpected Behavior\nThe model property should update whenever the input value changes.\nActual Behavior\nThe model remains unchanged after the input value is modified.\nEnvironment\n\nAngular version: 14.2.0\nBrowser: Chrome 96.0\n\nAdditional Information\nThis issue seems to occur specifically when using nested form controls or when there are conditional form field displays. A similar issue was observed in previous versions, but it was resolved in version 12. This bug might have been reintroduced.", "created_at": "2024-10-21", "closed_at": "2024-10-23", "labels": ["Category:Bug", "DetectionPhase:Design", "OriginationPhase:Requirements", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "AFA24SCM87R"}
{"issue_number": 29, "issue_title": "Inconsistent Axis Label Rendering in Responsive Charts", "issue_body": "When resizing the browser window, axis labels in responsive D3.js charts do not always adjust correctly, leading to misaligned or overlapping labels, particularly on smaller screens. This issue is observed across different browsers and appears to affect both the x and y axes.\nSteps to Reproduce\\n1. Create a responsive chart using D3.js with dynamic width and height.\\n2. Add axis labels (e.g., dates on the x-axis, numerical values on the y-axis).\\n3. Resize the browser window or view the chart on a smaller screen.\\n4. Observe how the labels overlap or become misaligned.\nExpected Behavior\\nAxis labels should adjust in size, position, and alignment dynamically when the chart container is resized. ### Actual Behavior\\nLabels remain fixed in size or position, causing overlap or truncation when the chart is resized.\nEnvironment\\n- D3.js Version: v7.0.0\\n- Browser: Chrome, Firefox, Edge\\n- OS: Windows 10, macOS Big Sur\nPossible Solution\\nConsider adding a feature to recalculate and re-render the axis labels when the container dimensions change, ensuring proper alignment and readability on all screen sizes.", "created_at": "2024-10-21", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Low", "Status:Completed"], "State": "closed", "Author": "KFA24SCM33K"}
{"issue_number": 28, "issue_title": "Bug: Incorrect state update in useEffect with async function", "issue_body": "{\n\"Title\": \"Bug: Incorrect state update in useEffect with async function\",\n\"Body\": \"## Description\\nWhen using useEffect with an async function, the state doesn't update correctly if the component is unmounted before the promise resolves. This leads to a memory leak warning.\\n\\n## Steps to Reproduce\\n1. Create a component with an async function inside useEffect.\\n2. Unmount the component before the async task completes.\\n3. Observe that the state update still occurs, resulting in a memory leak warning.\\n\\n## Expected Behavior\\nThe state update should be canceled if the component is unmounted.\\n\\n## Environment\\n- React version: 18.2.0\\n- Browser: Chrome 114.0.5735.199\\n\\n## Possible Solution\\nUse an abort controller or clean up the promise in the useEffect cleanup function.\"\n}", "created_at": "2024-10-21", "closed_at": "2024-10-21", "labels": [], "State": "closed", "Author": "MFA24SCM58D"}
{"issue_number": 27, "issue_title": "Bug: Unexpected behavior when using force layout with large datasets", "issue_body": "When using the force layout with datasets larger than 10,000 nodes, there is a noticeable performance degradation and the simulation freezes intermittently. This issue occurs even with basic configurations.\nSteps to Reproduce\n\nCreate a force layout with a dataset containing 10,000+ nodes and 15,000+ links.\nInitialize the simulation and observe the performance.\nExpected Behavior: The force layout should maintain interactive performance, even with large datasets, given D3's design for handling complex visualizations.\nActual Behavior: The simulation becomes unresponsive, and the performance drops significantly, making the visualization difficult to interact with.\nEnvironment:- D3.js version: 7.0.0\nBrowser: Chrome 95, Firefox 93\nOperating System: Windows 10\nAdditional Context: This issue seems related to the default force settings. Adjusting the alpha decay and velocity decay provides minor improvements, but the core issue persists. It may involve the internal calculation within the force simulation.\n", "created_at": "2024-10-21", "closed_at": "2024-10-24", "labels": ["Category:Enhancement", "OriginationPhase:Coding", "OriginationPhase:Documentation", "Priority:Major", "Status:Rejected"], "State": "closed", "Author": "JFA24SCM99M"}
{"issue_number": 26, "issue_title": "\"Bug: Reactive Forms ValueChanges Not Triggering for Custom Validators\"", "issue_body": "When using Reactive Forms, the valueChanges observable is not being triggered when custom validators change the control's value. This behavior is inconsistent with Angular\u2019s default validators, which trigger the valueChanges observable correctly.\nSteps to Reproduce\n\nCreate a form with a control using a custom validator that modifies the control's value.\nSubscribe to the valueChanges observable for the control.\nModify the form control value via the custom validator logic.\n\nExpected Behavior\nThe valueChanges observable should emit a new value whenever the custom validator changes the form control's value.\nActual Behavior\nThe valueChanges observable does not trigger when the custom validator changes the value.\nEnvironment\n\nAngular version: 15.1.0\nBrowser: Chrome, Firefox\n\nAdditional Context\nThe issue seems related to how custom validators are handled compared to built-in validators. This behavior affects dynamic form validation and any custom reactive form handling relying on valueChanges.", "created_at": "2024-10-21", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Low", "Status:Completed"], "State": "open", "Author": "AFA24SCM09K"}
{"issue_number": 24, "issue_title": "\"Bug: Angular Router Navigation Cancels on Browser Back Button\"", "issue_body": "When using the Angular Router, navigating between routes via the browser back button intermittently cancels the navigation. This issue occurs especially when there are pending HTTP requests or heavy components being loaded during route changes.\\n\\n### Steps to Reproduce\\n1. Create an Angular project with routing enabled.\\n2. Set up two routes with components that load data from an API.\\n3. Navigate between the two routes.\\n4. Use the browser's back button to go to the previous route.\\n\\n### Expected Behavior\\nThe router should smoothly navigate back to the previous route without interruptions.\\n\\n### Actual Behavior\\nThe navigation is canceled intermittently, resulting in the user staying on the same page or seeing a flicker.\\n\\n### Environment\\n- Angular Version: 16.2.0\\n- Browser: Chrome 117.0.5938\\n- OS: Windows 11\\n\\n### Additional Context\\nThis issue seems to occur when using canDeactivate guards or complex Resolver logic that adds delays to route transitions. Similar problems have been reported in earlier Angular versions.", "created_at": "2024-10-20", "closed_at": "2024-10-23", "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Coding", "Priority:Major", "Status:Completed"], "State": "closed", "Author": "CFA24SCM94N"}
{"issue_number": 23, "issue_title": "langgraph", "issue_body": "No Body for the Issue", "created_at": "2024-09-28", "closed_at": "2024-09-28", "labels": ["Category:Bug", "DetectionPhase:Coding", "OriginationPhase:Requirements", "Priority:Major", "Status:pendingReview"], "State": "closed", "Author": "SPM587FA24"}
{"issue_number": 22, "issue_title": "langchain", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": "2024-09-27", "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Field", "Priority:High", "Status:InProgress"], "State": "closed", "Author": "SPM587FA24"}
{"issue_number": 21, "issue_title": "ML", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": null, "labels": ["Category:Requirements", "DetectionPhase:Field", "Priority:High", "Status:InProgress"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 20, "issue_title": "AI", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": null, "labels": ["Category:Requirements", "DetectionPhase:Testing", "OriginationPhase:Documentation", "Priority:Major", "Status:Rejected"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 19, "issue_title": "redux", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": null, "labels": ["Category:Bug", "DetectionPhase:Field", "OriginationPhase:Field", "Priority:Low", "Status:pendingReview"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 18, "issue_title": "js", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": null, "labels": ["Category:Requirements", "DetectionPhase:Design", "OriginationPhase:Testing", "Priority:Medium", "Status:Rejected"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 17, "issue_title": "openai", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": null, "labels": ["Category:Enhancement", "OriginationPhase:Field", "Priority:Critical", "Priority:Major", "Status:Rejected"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 16, "issue_title": "java", "issue_body": "No Body for the Issue", "created_at": "2024-09-27", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Coding", "OriginationPhase:Testing", "Priority:High", "Status:Completed"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 15, "issue_title": "lstm", "issue_body": "No Body for the Issue", "created_at": "2024-09-26", "closed_at": "2024-09-26", "labels": ["Category:Requirements", "DetectionPhase:Design", "OriginationPhase:Testing", "Priority:Medium", "Status:InProgress"], "State": "closed", "Author": "SPM587FA24"}
{"issue_number": 14, "issue_title": "python", "issue_body": "No Body for the Issue", "created_at": "2024-09-26", "closed_at": null, "labels": ["Category:Inquiry", "DetectionPhase:Coding", "OriginationPhase:Documentation", "Priority:Low", "Status:Rejected"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 13, "issue_title": "flask", "issue_body": "No Body for the Issue", "created_at": "2024-09-26", "closed_at": null, "labels": ["Category:Enhancement", "DetectionPhase:Testing", "OriginationPhase:Field", "Priority:Low", "Status:InProgress"], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 12, "issue_title": "react", "issue_body": "No Body for the Issue", "created_at": "2024-09-26", "closed_at": "2024-09-27", "labels": ["Category:Bug", "DetectionPhase:Field", "OriginationPhase:Coding", "Priority:High", "Status:Approved"], "State": "closed", "Author": "SPM587FA24"}
{"issue_number": 4, "issue_title": "TestIssue_04", "issue_body": "No Body for the Issue", "created_at": "2024-08-31", "closed_at": "2024-09-26", "labels": [], "State": "closed", "Author": "SPM587FA24"}
{"issue_number": 3, "issue_title": "TestIssue_02", "issue_body": "No Body for the Issue", "created_at": "2024-08-30", "closed_at": null, "labels": [], "State": "open", "Author": "SPM587FA24"}
{"issue_number": 2, "issue_title": "TestIssue_01", "issue_body": "No Body for the Issue", "created_at": "2024-08-26", "closed_at": "2024-10-23", "labels": [], "State": "closed", "Author": "SPM587FA24"}
{"issue_number": 1, "issue_title": "testissue", "issue_body": "No Body for the Issue", "created_at": "2024-08-26", "closed_at": "2024-08-26", "labels": [], "State": "closed", "Author": "SPM587FA24"}
